[
    {
        "key": "common-xml:FailedUnitTests",
        "repo": "common-xml",
        "name": "Failed unit tests should be fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "mdDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "xml",
        "langName": "XML",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of failed tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of failed tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "common-xml:DuplicatedBlocks",
        "repo": "common-xml",
        "name": "Source files should not have any duplicated blocks",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "xml",
        "langName": "XML",
        "params": [],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "10min",
        "defaultDebtRemFnOffset": "10min",
        "effortToFixDescription": "number of duplicate blocks",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "10min",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "10min",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "10min",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of duplicate blocks",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-xml:SkippedUnitTests",
        "repo": "common-xml",
        "name": "Skipped unit tests should be either removed or fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "mdDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "xml",
        "langName": "XML",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of skipped tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of skipped tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-xml:InsufficientCommentDensity",
        "repo": "common-xml",
        "name": "Source files should have a sufficient density of comment lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "mdDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "xml",
        "langName": "XML",
        "params": [
            {
                "key": "minimumCommentDensity",
                "defaultValue": "25",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines required to meet minimum density",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines required to meet minimum density",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-xml:InsufficientLineCoverage",
        "repo": "common-xml",
        "name": "Lines should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "xml",
        "langName": "XML",
        "params": [
            {
                "key": "minimumLineCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines under the coverage threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines under the coverage threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-xml:InsufficientBranchCoverage",
        "repo": "common-xml",
        "name": "Branches should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "xml",
        "langName": "XML",
        "params": [
            {
                "key": "minimumBranchCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "5min",
        "effortToFixDescription": "number of uncovered conditions",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "5min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "5min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "5min",
        "remFnOverloaded": false,
        "gapDescription": "number of uncovered conditions",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-cs:FailedUnitTests",
        "repo": "common-cs",
        "name": "Failed unit tests should be fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "mdDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "cs",
        "langName": "C#",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of failed tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of failed tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "common-cs:DuplicatedBlocks",
        "repo": "common-cs",
        "name": "Source files should not have any duplicated blocks",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "cs",
        "langName": "C#",
        "params": [],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "10min",
        "defaultDebtRemFnOffset": "10min",
        "effortToFixDescription": "number of duplicate blocks",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "10min",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "10min",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "10min",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of duplicate blocks",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-cs:SkippedUnitTests",
        "repo": "common-cs",
        "name": "Skipped unit tests should be either removed or fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "mdDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "cs",
        "langName": "C#",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of skipped tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of skipped tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-cs:InsufficientCommentDensity",
        "repo": "common-cs",
        "name": "Source files should have a sufficient density of comment lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "mdDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "cs",
        "langName": "C#",
        "params": [
            {
                "key": "minimumCommentDensity",
                "defaultValue": "25",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines required to meet minimum density",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines required to meet minimum density",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-cs:InsufficientLineCoverage",
        "repo": "common-cs",
        "name": "Lines should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "cs",
        "langName": "C#",
        "params": [
            {
                "key": "minimumLineCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines under the coverage threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines under the coverage threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-cs:InsufficientBranchCoverage",
        "repo": "common-cs",
        "name": "Branches should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "cs",
        "langName": "C#",
        "params": [
            {
                "key": "minimumBranchCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "5min",
        "effortToFixDescription": "number of uncovered conditions",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "5min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "5min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "5min",
        "remFnOverloaded": false,
        "gapDescription": "number of uncovered conditions",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1258",
        "repo": "squid",
        "name": "Classes and enums with private members should have a constructor",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>",
        "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00115",
        "repo": "squid",
        "name": "Constant names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>",
        "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "internalKey": "S115",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the constant names against.",
                "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2225",
        "repo": "squid",
        "name": "\"toString()\" and \"clone()\" methods should not return null",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n {code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "mdDesc": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n {code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2589",
        "repo": "squid",
        "name": "Boolean expressions should not be gratuitous",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra",
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2226",
        "repo": "squid",
        "name": "Servlets should not have mutable instance fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess the request. So all threads share the servlet instances and by extension their instance fields. To prevent any misunderstanding and unexpected\nbehavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYBUC\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>\n</ul>",
        "mdDesc": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess the request. So all threads share the servlet instances and by extension their instance fields. To prevent any misunderstanding and unexpected\nbehavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYBUC\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading",
            "struts"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3436",
        "repo": "squid",
        "name": "Value-based classes should not be used for locking",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p> Instances of a value-based class ... </p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>Which means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
        "mdDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p> Instances of a value-based class ... </p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>Which means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8",
            "lock-in",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S00113",
        "repo": "squid",
        "name": "Files should contain an empty newline at the end",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>",
        "mdDesc": "<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S113",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00116",
        "repo": "squid",
        "name": "Field names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>",
        "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S116",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the field names against.",
                "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1135",
        "repo": "squid",
        "name": "Track uses of \"TODO\" tags",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "mdDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "severity": "INFO",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1134",
        "repo": "squid",
        "name": "Track uses of \"FIXME\" tags",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "mdDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4524",
        "repo": "squid",
        "name": "\"default\" clauses should be last",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.4 - Every switch statement shall have a default label </li>\n  <li> MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement </li>\n</ul>",
        "mdDesc": "<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.4 - Every switch statement shall have a default label </li>\n  <li> MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00114",
        "repo": "squid",
        "name": "Interface names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>",
        "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S114",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the interface names against.",
                "defaultValue": "^[A-Z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1133",
        "repo": "squid",
        "name": "Deprecated code should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>",
        "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>",
        "severity": "INFO",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "obsolete"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2221",
        "repo": "squid",
        "name": "\"Exception\" should not be caught when not required by called methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>",
        "mdDesc": "<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00119",
        "repo": "squid",
        "name": "Type parameter names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>",
        "mdDesc": "<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S119",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the type parameter names against.",
                "defaultValue": "^[A-Z][0-9]?$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2222",
        "repo": "squid",
        "name": "Locks should be released",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>",
        "mdDesc": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3553",
        "repo": "squid",
        "name": "\"Optional\" should not be used for parameters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. </p>\n<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have <code>Optional</code> parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>",
        "mdDesc": "<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. </p>\n<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have <code>Optional</code> parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00117",
        "repo": "squid",
        "name": "Local variable and method parameter names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant\n  // ...\n}\n</pre>\n<p>as well as one-character <code>catch</code> variables: </p>\n<pre>\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant\n  // ...\n}\n</pre>\n<p>as well as one-character <code>catch</code> variables: </p>\n<pre>\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S117",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the names against.",
                "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1132",
        "repo": "squid",
        "name": "Strings literals should be placed on the left side when checking for equality",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>",
        "mdDesc": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3551",
        "repo": "squid",
        "name": "Overrides should match their parent class methods in synchronization",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper\nsynchronization as callers rely on the thread-safety promised by the parent class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n @Override\n  public foo () {  // Noncompliant\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n  @Override\n  synchronized foo () {\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/XgAZAg\">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are\n  not thread-safe </li>\n</ul>",
        "mdDesc": "<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper\nsynchronization as callers rely on the thread-safety promised by the parent class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n @Override\n  public foo () {  // Noncompliant\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n  @Override\n  synchronized foo () {\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/XgAZAg\">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are\n  not thread-safe </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S00118",
        "repo": "squid",
        "name": "Abstract class names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\n<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to\nsuggest to either make it abstract or to rename it.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class MyAbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>",
        "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\n<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to\nsuggest to either make it abstract or to rename it.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class MyAbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S118",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the abstract class names against.",
                "defaultValue": "^Abstract[A-Z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2583",
        "repo": "squid",
        "name": "Conditionally executed blocks should be reachable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue in either of these cases:</p>\n<ul>\n  <li> When the condition is a single <code>final boolean</code> </li>\n</ul>\n<pre>\nfinal boolean debug = false;\n//...\nif (debug) {\n  // Print something\n}\n</pre>\n<ul>\n  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>\n</ul>\n<pre>\nif (true) {\n  // do something\n}\n</pre>\n<p>In these cases it is obvious the code is as intended.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "mdDesc": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue in either of these cases:</p>\n<ul>\n  <li> When the condition is a single <code>final boolean</code> </li>\n</ul>\n<pre>\nfinal boolean debug = false;\n//...\nif (debug) {\n  // Print something\n}\n</pre>\n<ul>\n  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>\n</ul>\n<pre>\nif (true) {\n  // do something\n}\n</pre>\n<p>In these cases it is obvious the code is as intended.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra",
            "pitfall",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2109",
        "repo": "squid",
        "name": "Reflection should not be used to check non-runtime annotations",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,\n  <code>@SuppressWarnings</code>. </li>\n  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>",
        "mdDesc": "<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,\n  <code>@SuppressWarnings</code>. </li>\n  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2229",
        "repo": "squid",
        "name": "Methods should not call same-class methods with incompatible \"@Transactional\" values",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>\nrequirement will result in runtime exceptions because Spring only \"sees\" the caller and makes no provisions for properly invoking the callee. </p>\n<p>Therefore, certain calls should never be made within the same class:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n    <tr>\n      <td> non-<code>@Transactional</code> </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> MANDATORY </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NESTED </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NEVER </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NOT_SUPPORTED </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRED or <code>@Transactional</code> </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRES_NEW </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> SUPPORTS </td>\n      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\n@Override\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing();  // Noncompliant\n}\n\n@Override\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>\nrequirement will result in runtime exceptions because Spring only \"sees\" the caller and makes no provisions for properly invoking the callee. </p>\n<p>Therefore, certain calls should never be made within the same class:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n    <tr>\n      <td> non-<code>@Transactional</code> </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> MANDATORY </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NESTED </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NEVER </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NOT_SUPPORTED </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRED or <code>@Transactional</code> </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRES_NEW </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> SUPPORTS </td>\n      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\n@Override\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing();  // Noncompliant\n}\n\n@Override\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3439",
        "repo": "squid",
        "name": "\"DefaultMessageListenerContainer\" instances should not drop messages during restarts",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>DefaultMessageListenerContainer</code> is implemented as a JMS poller. While the Spring container is shutting itself down, as each\nin-progress JMS <code>Consumer.receive()</code> call completes, any non-<code>null</code> return value will be a JMS message that the DMLC will\n<em>discard</em> due to the shutdown in progress. That will result in the received message never being processed. </p>\n<p>To prevent message loss during restart operations, set <code>acceptMessagesWhileStopping</code> to <code>true</code> so that such messages will be\nprocessed before shut down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n&lt;/bean&gt;\n {code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n   &lt;property name=\"acceptMessagesWhileStopping\" value=\"true\" /&gt;\n&lt;/bean&gt;\n</pre>",
        "mdDesc": "<p><code>DefaultMessageListenerContainer</code> is implemented as a JMS poller. While the Spring container is shutting itself down, as each\nin-progress JMS <code>Consumer.receive()</code> call completes, any non-<code>null</code> return value will be a JMS message that the DMLC will\n<em>discard</em> due to the shutdown in progress. That will result in the received message never being processed. </p>\n<p>To prevent message loss during restart operations, set <code>acceptMessagesWhileStopping</code> to <code>true</code> so that such messages will be\nprocessed before shut down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n&lt;/bean&gt;\n {code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n   &lt;property name=\"acceptMessagesWhileStopping\" value=\"true\" /&gt;\n&lt;/bean&gt;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4529",
        "repo": "squid",
        "name": "Exposing HTTP endpoints is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072\">CVE-2016-3072</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175\">CVE-2015-3175</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218\">CVE-2003-0218</a> </li>\n</ul>\n<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers\n(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status\ncode).</p>\n<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>\n<p>In the case of the Spring framework, methods of a <code>@Controller</code> object annotated with <code>@RequestMapping</code> (or all its variants\nsuch as <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>) are\ndeclaring HTTP endpoints.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>\n  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's\n  headers, cookies, body and status code. </li>\n  <li> the response contains some sensitive information which the user shouldn't have access to. </li>\n</ul>\n<p>no access control prevents attackers from successfully performing a forbidden request.</p>\n<ul>\n  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user\n  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a\nhref=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">sanitized</a> before being used. Their content, length, encoding, name (ex: name\nof URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values\nin a given input, can easily miss some of them.</p>\n<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a\nhref=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\">CSRF</a> tokens when possible.</p>\n<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">Protect your sensitive cookies</a> so that client-side javascript cannot\nread or modify them.</p>\n<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the\nfollowing attacks:</p>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">Cross-site Scripting (XSS)</a>, which happens when\n  an unsafe value is included in an HTML page. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">Unvalidated redirects</a> which can happen when the\n  <code>Location</code> header is compromised. </li>\n</ul>\n<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>\n<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when\nthe existence of a resource is sensitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(path = \"/profile\", method = RequestMethod.GET) // Noncompliant\npublic UserProfile getUserProfile(String name) {\n...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/79.html\">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/22.html\">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal') </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072\">CVE-2016-3072</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175\">CVE-2015-3175</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218\">CVE-2003-0218</a> </li>\n</ul>\n<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers\n(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status\ncode).</p>\n<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>\n<p>In the case of the Spring framework, methods of a <code>@Controller</code> object annotated with <code>@RequestMapping</code> (or all its variants\nsuch as <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>) are\ndeclaring HTTP endpoints.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>\n  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's\n  headers, cookies, body and status code. </li>\n  <li> the response contains some sensitive information which the user shouldn't have access to. </li>\n</ul>\n<p>no access control prevents attackers from successfully performing a forbidden request.</p>\n<ul>\n  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user\n  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a\nhref=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">sanitized</a> before being used. Their content, length, encoding, name (ex: name\nof URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values\nin a given input, can easily miss some of them.</p>\n<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a\nhref=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\">CSRF</a> tokens when possible.</p>\n<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">Protect your sensitive cookies</a> so that client-side javascript cannot\nread or modify them.</p>\n<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the\nfollowing attacks:</p>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">Cross-site Scripting (XSS)</a>, which happens when\n  an unsafe value is included in an HTML page. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">Unvalidated redirects</a> which can happen when the\n  <code>Location</code> header is compromised. </li>\n</ul>\n<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>\n<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when\nthe existence of a resource is sensitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(path = \"/profile\", method = RequestMethod.GET) // Noncompliant\npublic UserProfile getUserProfile(String name) {\n...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/79.html\">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/22.html\">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal') </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a3",
            "owasp-a7",
            "sans-top25-insecure",
            "sans-top25-porous",
            "sans-top25-risky",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S3437",
        "repo": "squid",
        "name": "Value-based objects should not be serialized",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
        "mdDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8",
            "lock-in",
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3438",
        "repo": "squid",
        "name": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic\nconnection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing\nanything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>",
        "mdDesc": "<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic\nconnection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing\nanything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S864",
        "repo": "squid",
        "name": "Limited dependence should be placed on operator precedence",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>",
        "mdDesc": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00120",
        "repo": "squid",
        "name": "Package names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n</pre>",
        "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S120",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the package names against.",
                "defaultValue": "^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00121",
        "repo": "squid",
        "name": "Control structures should use curly braces",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
        "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "internalKey": "S121",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00122",
        "repo": "squid",
        "name": "Statements should be on separate lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>",
        "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S122",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "style"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2115",
        "repo": "squid",
        "name": "Databases should be password-protected",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Failure to password-protect a database is so careless or naive as to be almost negligent. Databases should always be password protected, but the\nuse of a database connection with an empty password is a clear indication of a database that is not protected.</p>\n<p>This rule flags database connections with empty passwords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"AppLogin\", \"\");\nConnection conn2 = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=password\");\n\nDriverManager.getConnection(\"jdbc:mysql://address=(host=myhost1)(port=1111)(key1=value1)(user=sandy)(password=secret),address=(host=myhost2)(port=2222)(key2=value2)(user=sandy)(password=secret)/db\");\n\nDriverManager.getConnection(\"jdbc:mysql://sandy:secret@[myhost1:1111,myhost2:2222]/db\");\n\nString url = \"jdbc:postgresql://localhost/test\";\nProperties props = new Properties();\nprops.setProperty(\"user\", \"fred\");\nprops.setProperty(\"password\", \"secret\");\nDriverManager.getConnection(url, props);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p>Failure to password-protect a database is so careless or naive as to be almost negligent. Databases should always be password protected, but the\nuse of a database connection with an empty password is a clear indication of a database that is not protected.</p>\n<p>This rule flags database connections with empty passwords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"AppLogin\", \"\");\nConnection conn2 = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=password\");\n\nDriverManager.getConnection(\"jdbc:mysql://address=(host=myhost1)(port=1111)(key1=value1)(user=sandy)(password=secret),address=(host=myhost2)(port=2222)(key2=value2)(user=sandy)(password=secret)/db\");\n\nDriverManager.getConnection(\"jdbc:mysql://sandy:secret@[myhost1:1111,myhost2:2222]/db\");\n\nString url = \"jdbc:postgresql://localhost/test\";\nProperties props = new Properties();\nprops.setProperty(\"user\", \"fred\");\nprops.setProperty(\"password\", \"secret\");\nDriverManager.getConnection(url, props);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "45min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "45min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "45min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "45min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2236",
        "repo": "squid",
        "name": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only\nbecause all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread</code>:</p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>",
        "mdDesc": "<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only\nbecause all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread</code>:</p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3688",
        "repo": "squid",
        "name": "Track uses of disallowed classes",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>",
        "mdDesc": "<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>",
        "severity": "INFO",
        "status": "READY",
        "isTemplate": true,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "className",
                "htmlDesc": "Fully qualified name of the forbidden class. Use a regex to forbid a package.",
                "type": "STRING"
            }
        ],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00104",
        "repo": "squid",
        "name": "Files should not have too many lines of code",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>",
        "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S104",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "Max",
                "htmlDesc": "Maximum authorized lines in a file.",
                "defaultValue": "750",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1148",
        "repo": "squid",
        "name": "Throwable.printStackTrace(...) should not be called",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2116",
        "repo": "squid",
        "name": "\"hashCode\" and \"toString\" should not be called on array instances",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's\n\"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>",
        "mdDesc": "<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's\n\"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S00105",
        "repo": "squid",
        "name": "Tabulation characters should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>",
        "mdDesc": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S105",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1147",
        "repo": "squid",
        "name": "Exit methods should not be called",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PoYbAQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>",
        "mdDesc": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PoYbAQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2234",
        "repo": "squid",
        "name": "Parameters should be passed in the correct order",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>",
        "mdDesc": "<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2235",
        "repo": "squid",
        "name": "IllegalMonitorStateException should not be caught",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>",
        "mdDesc": "<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00103",
        "repo": "squid",
        "name": "Lines should not be too long",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
        "mdDesc": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S103",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "maximumLineLength",
                "htmlDesc": "The maximum authorized line length.",
                "defaultValue": "120",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1145",
        "repo": "squid",
        "name": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2583'>S2583</a> instead.</p>",
        "mdDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2583} instead.</p>",
        "severity": "MAJOR",
        "status": "DEPRECATED",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2114",
        "repo": "squid",
        "name": "Collections should not be passed as arguments to their own methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>",
        "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2111",
        "repo": "squid",
        "name": "\"BigDecimal(double)\" should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point\n  literals </li>\n</ul>",
        "mdDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point\n  literals </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2232",
        "repo": "squid",
        "name": "\"ResultSet.isLast()\" should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>",
        "mdDesc": "<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance",
            "pitfall",
            "sql"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4530",
        "repo": "squid",
        "name": "Using Struts 1 ActionForm is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using Struts 1 ActionForm is security-sensitive. For example, their use has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>All classes extending <code>org.apache.struts.action.Action</code> are potentially remotely reachable. The <code>ActionForm</code> object provided\nas a parameter of the <code>execute</code> method is automatically instantiated and populated with the HTTP parameters. One should review the use of\nthese parameters to be sure they are used safely. </p>\n<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> some parameters of the ActionForm might not have been validated properly. </li>\n  <li> dangerous parameter names are accepted. Example: accept a \"class\" parameter and use the form to populate JavaBean properties (see the\n  CVE-2014-0114 above). </li>\n  <li> there are unused fields which are not empty or undefined. </li>\n</ul>\n<p>You are at risk if you answered to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>All ActionForm's properties should be validated, including their size. Whenever possible, filter the parameters with a whitelist of valid values.\nOtherwise, escape any sensitive character and constrain the values as much as possible.</p>\n<p>Allow only non security-sensitive property names. All the ActionForm's property names should be whitelisted.</p>\n<p>Unused fields should be constrained so that they are either empty or undefined.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n// Struts 1.1+\npublic final class CashTransferAction extends Action {\n\n  public String fromAccount = \"\";\n  public String toAccount = \"\";\n\n  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {\n    // usage of the \"form\" object to call some services doing JDBC actions\n    [...]\n    return mapping.findForward(resultat);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/105.html\">MITRE, CWE-105</a>: Struts Form Field Without Validator </li>\n</ul>",
        "mdDesc": "<p>Using Struts 1 ActionForm is security-sensitive. For example, their use has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>All classes extending <code>org.apache.struts.action.Action</code> are potentially remotely reachable. The <code>ActionForm</code> object provided\nas a parameter of the <code>execute</code> method is automatically instantiated and populated with the HTTP parameters. One should review the use of\nthese parameters to be sure they are used safely. </p>\n<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> some parameters of the ActionForm might not have been validated properly. </li>\n  <li> dangerous parameter names are accepted. Example: accept a \"class\" parameter and use the form to populate JavaBean properties (see the\n  CVE-2014-0114 above). </li>\n  <li> there are unused fields which are not empty or undefined. </li>\n</ul>\n<p>You are at risk if you answered to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>All ActionForm's properties should be validated, including their size. Whenever possible, filter the parameters with a whitelist of valid values.\nOtherwise, escape any sensitive character and constrain the values as much as possible.</p>\n<p>Allow only non security-sensitive property names. All the ActionForm's property names should be whitelisted.</p>\n<p>Unused fields should be constrained so that they are either empty or undefined.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n// Struts 1.1+\npublic final class CashTransferAction extends Action {\n\n  public String fromAccount = \"\";\n  public String toAccount = \"\";\n\n  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {\n    // usage of the \"form\" object to call some services doing JDBC actions\n    [...]\n    return mapping.findForward(resultat);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/105.html\">MITRE, CWE-105</a>: Struts Form Field Without Validator </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "struts"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S00108",
        "repo": "squid",
        "name": "Nested blocks of code should not be left empty",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>",
        "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S108",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1143",
        "repo": "squid",
        "name": "Jump statements should not occur in \"finally\" blocks",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>",
        "mdDesc": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1264",
        "repo": "squid",
        "name": "A \"while\" loop should be used instead of a \"for\" loop",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
        "mdDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2112",
        "repo": "squid",
        "name": "\"URL.hashCode\" and \"URL.equals\" should be avoided",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1142",
        "repo": "squid",
        "name": "Methods should not have too many return statements",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
        "mdDesc": "<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum allowed return statements per method",
                "defaultValue": "3",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2230",
        "repo": "squid",
        "name": "Non-public methods should not be \"@Transactional\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2110",
        "repo": "squid",
        "name": "Invalid \"Date\" values should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>0-11</td>\n    </tr>\n    <tr>\n      <td>date (day)</td>\n      <td>0-31</td>\n    </tr>\n    <tr>\n      <td>hour</td>\n      <td>0-23</td>\n    </tr>\n    <tr>\n      <td>minute</td>\n      <td>0-60</td>\n    </tr>\n    <tr>\n      <td>second</td>\n      <td>0-61</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>0-11</td>\n    </tr>\n    <tr>\n      <td>date (day)</td>\n      <td>0-31</td>\n    </tr>\n    <tr>\n      <td>hour</td>\n      <td>0-23</td>\n    </tr>\n    <tr>\n      <td>minute</td>\n      <td>0-60</td>\n    </tr>\n    <tr>\n      <td>second</td>\n      <td>0-61</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4531",
        "repo": "squid",
        "name": "Using setters in Struts 2 ActionSupport is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using setters in Struts 2 ActionSupport is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1006\">CVE-2012-1006</a> </li>\n</ul>\n<p>All classes extending <code>com.opensymphony.xwork2.ActionSupport</code> are potentially remotely reachable. An action class extending\nActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One\nshould review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted\ninputs.</p>\n<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the setter is needed. There is no need for it if the attribute's goal is not to map queries' parameter. </li>\n  <li> the value provided to the setter is properly sanitized before being used or stored. (*) </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>As said in Strut's documentation: <a href=\"https://struts.apache.org/security/#do-not-define-setters-when-not-needed\">\"Do not define setters when\nnot needed\"</a></p>\n<p>Sanitize the user input. This can be for example done by implementing the <code>validate()</code> method of\n<code>com.opensymphony.xwork2.ActionSupport</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class AccountBalanceAction extends ActionSupport {\n  private static final long serialVersionUID = 1L;\n  private Integer accountId;\n\n  // this setter might be called with user input\n  public void setAccountId(Integer accountId) {\n    this.accountId = accountId;\n  }\n\n  @Override\n  public String execute() throws Exception {\n    // call a service to get the account's details and its balance\n    [...]\n    return SUCCESS;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n</ul>",
        "mdDesc": "<p>Using setters in Struts 2 ActionSupport is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1006\">CVE-2012-1006</a> </li>\n</ul>\n<p>All classes extending <code>com.opensymphony.xwork2.ActionSupport</code> are potentially remotely reachable. An action class extending\nActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One\nshould review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted\ninputs.</p>\n<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the setter is needed. There is no need for it if the attribute's goal is not to map queries' parameter. </li>\n  <li> the value provided to the setter is properly sanitized before being used or stored. (*) </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>As said in Strut's documentation: <a href=\"https://struts.apache.org/security/#do-not-define-setters-when-not-needed\">\"Do not define setters when\nnot needed\"</a></p>\n<p>Sanitize the user input. This can be for example done by implementing the <code>validate()</code> method of\n<code>com.opensymphony.xwork2.ActionSupport</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class AccountBalanceAction extends ActionSupport {\n  private static final long serialVersionUID = 1L;\n  private Integer accountId;\n\n  // this setter might be called with user input\n  public void setAccountId(Integer accountId) {\n    this.accountId = accountId;\n  }\n\n  @Override\n  public String execute() throws Exception {\n    // call a service to get the account's details and its balance\n    [...]\n    return SUCCESS;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a1",
            "struts"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S881",
        "repo": "squid",
        "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>",
        "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1141",
        "repo": "squid",
        "name": "Try-catch blocks should not be nested",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>",
        "mdDesc": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00107",
        "repo": "squid",
        "name": "Methods should not have too many parameters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) or\n<code>@JsonCreator</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>",
        "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) or\n<code>@JsonCreator</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S107",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum authorized number of parameters",
                "defaultValue": "7",
                "type": "INTEGER"
            },
            {
                "key": "constructorMax",
                "htmlDesc": "Maximum authorized number of parameters for a constructor",
                "defaultValue": "7",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3329",
        "repo": "squid",
        "name": "Cypher Block Chaining IV's should be random and unique",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>In encryption, when Cipher Block Chaining (CBC) is used, the Initialization Vector (IV) must be random and unpredictable. Otherwise, the encrypted\nvalue is vulnerable to crypto-analysis attacks such as the \"Chosen-Plaintext Attack\".</p>\n<p>An IV value should be associated to one, and only one encryption cycle, because the IV's purpose is to ensure that the same plaintext encrypted\ntwice will yield two different ciphertexts.</p>\n<p>To that end, IV's should be:</p>\n<ul>\n  <li> random </li>\n  <li> unpredictable </li>\n  <li> publishable (IV's frequently are published) </li>\n  <li> authenticated, along with the ciphertext, with a Message Authentication Code (MAC) </li>\n</ul>\n<p>This rule raises an issue when the IV is:</p>\n<ul>\n  <li> hard-coded </li>\n  <li> created using <code>java.util.Random</code> rather than <code>java.security.SecureRandom</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyCbcClass {\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = \"7cVgr5cbdCZVw5WY\".getBytes(\"UTF-8\");\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);  // Noncompliant because IV hard coded and cannot vary with each ciphering round\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV) // IV is typically published\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyCbcClass {\n\n  SecureRandom random = new SecureRandom();\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = new byte[16];\n    random.nextBytes(bytesIV);\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV)\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#STATIC_IV\">STATIC_IV</a> </li>\n</ul>",
        "mdDesc": "<p>In encryption, when Cipher Block Chaining (CBC) is used, the Initialization Vector (IV) must be random and unpredictable. Otherwise, the encrypted\nvalue is vulnerable to crypto-analysis attacks such as the \"Chosen-Plaintext Attack\".</p>\n<p>An IV value should be associated to one, and only one encryption cycle, because the IV's purpose is to ensure that the same plaintext encrypted\ntwice will yield two different ciphertexts.</p>\n<p>To that end, IV's should be:</p>\n<ul>\n  <li> random </li>\n  <li> unpredictable </li>\n  <li> publishable (IV's frequently are published) </li>\n  <li> authenticated, along with the ciphertext, with a Message Authentication Code (MAC) </li>\n</ul>\n<p>This rule raises an issue when the IV is:</p>\n<ul>\n  <li> hard-coded </li>\n  <li> created using <code>java.util.Random</code> rather than <code>java.security.SecureRandom</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyCbcClass {\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = \"7cVgr5cbdCZVw5WY\".getBytes(\"UTF-8\");\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);  // Noncompliant because IV hard coded and cannot vary with each ciphering round\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV) // IV is typically published\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyCbcClass {\n\n  SecureRandom random = new SecureRandom();\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = new byte[16];\n    random.nextBytes(bytesIV);\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV)\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#STATIC_IV\">STATIC_IV</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1149",
        "repo": "squid",
        "name": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>",
        "mdDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2118",
        "repo": "squid",
        "name": "Non-serializable classes should not be written",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>",
        "mdDesc": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2119",
        "repo": "squid",
        "name": "\"Random\" objects should be reused",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers which are not random depending\non the JDK. For better efficiency and randomness, create a single <code>Random</code>, then store, and reuse it.</p>\n<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be\nrandom or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.</p>\n<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked and assigned to a local random variable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingCommon() {\n  Random rand = new Random();  // Noncompliant; new instance created with each invocation\n  int rValue = rand.nextInt();\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random\n\npublic void doSomethingCommon() {\n  int rValue = this.rand.nextInt();\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>A class which uses a <code>Random</code> in its constructor or in a static <code>main</code> function and nowhere else will be ignored by this\nrule.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "mdDesc": "<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers which are not random depending\non the JDK. For better efficiency and randomness, create a single <code>Random</code>, then store, and reuse it.</p>\n<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be\nrandom or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.</p>\n<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked and assigned to a local random variable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingCommon() {\n  Random rand = new Random();  // Noncompliant; new instance created with each invocation\n  int rValue = rand.nextInt();\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random\n\npublic void doSomethingCommon() {\n  int rValue = this.rand.nextInt();\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>A class which uses a <code>Random</code> in its constructor or in a static <code>main</code> function and nowhere else will be ignored by this\nrule.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S00112",
        "repo": "squid",
        "name": "Generic exceptions should never be thrown",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>",
        "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S112",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3655",
        "repo": "squid",
        "name": "Optional value should only be accessed after calling isPresent()",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a </p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> method should always\nbe done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>",
        "mdDesc": "<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a </p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> method should always\nbe done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2203",
        "repo": "squid",
        "name": "\"collect\" should be used with \"Streams\" instead of \"list::add\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it's automatically thread-safe and parallellizable. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>",
        "mdDesc": "<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it's automatically thread-safe and parallellizable. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2325",
        "repo": "squid",
        "name": "\"private\" methods that don't access instance data should be \"static\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>private</code> methods that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the\nmethod.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>",
        "mdDesc": "<p><code>private</code> methods that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the\nmethod.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2445",
        "repo": "squid",
        "name": "Blocks should be synchronized on \"private final\" fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6IEzAg\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that\n  may interact with untrusted code </li>\n</ul>",
        "mdDesc": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6IEzAg\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that\n  may interact with untrusted code </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3776",
        "repo": "squid",
        "name": "Cognitive Complexity of methods should not be too high",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
        "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "Threshold",
                "htmlDesc": "The maximum authorized complexity.",
                "defaultValue": "15",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "1min",
        "defaultDebtRemFnOffset": "5min",
        "effortToFixDescription": "per complexity point over the threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "1min",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "1min",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "1min",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "gapDescription": "per complexity point over the threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2204",
        "repo": "squid",
        "name": "\".equals()\" should not be used to test the values of \"Atomic\" classes",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and\n<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should\n<code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and\n<code>AtomicBoolean</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>",
        "mdDesc": "<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and\n<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should\n<code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and\n<code>AtomicBoolean</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2446",
        "repo": "squid",
        "name": "\"notifyAll\" should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>\nrouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OoAlAQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread\n  </li>\n</ul>",
        "mdDesc": "<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>\nrouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OoAlAQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1598",
        "repo": "squid",
        "name": "Package declaration should match source file directory",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at <code>\"src/org/bar/Foo.java\"</code> should have a package of <code>\"org.bar\"</code>. </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>\n<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>",
        "mdDesc": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at <code>\"src/org/bar/Foo.java\"</code> should have a package of <code>\"org.bar\"</code>. </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>\n<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2201",
        "repo": "squid",
        "name": "Return values from functions without side effects should not be ignored",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<p>and also on <code>ConcurrentMap.putIfAbsent</code> calls ignored return value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when both these conditions are met:</p>\n<ul>\n  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>\n  <li> The method name starts with \"parse\", \"format\", \"decode\" or \"valueOf\" or the method is <code>String.getBytes(Charset)</code>. </li>\n</ul>\n<pre>\nprivate boolean textIsInteger(String textToCheck) {\n\n    try {\n        Integer.parseInt(textToCheck, 10); // OK\n        return true;\n    } catch (NumberFormatException ignored) {\n        return false;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>",
        "mdDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<p>and also on <code>ConcurrentMap.putIfAbsent</code> calls ignored return value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when both these conditions are met:</p>\n<ul>\n  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>\n  <li> The method name starts with \"parse\", \"format\", \"decode\" or \"valueOf\" or the method is <code>String.getBytes(Charset)</code>. </li>\n</ul>\n<pre>\nprivate boolean textIsInteger(String textToCheck) {\n\n    try {\n        Integer.parseInt(textToCheck, 10); // OK\n        return true;\n    } catch (NumberFormatException ignored) {\n        return false;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4502",
        "repo": "squid",
        "name": "Disabling Spring Security's CSRF protection is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Spring Security is coming out of the box with a protection against CSRF attacks. With 4.0, this protection is even enabled by default. Spring's\nrecommendation is to \"use CSRF protection for any request that could be processed by a browser by normal users\". So there is no reason to disable it\nfor standard web applications.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> activate Spring Security's CSRF protection. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n\t  http.csrf().disable(); // Noncompliant\n\t}\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_PROTECTION_DISABLED\">SPRING_CSRF_PROTECTION_DISABLED</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#when-to-use-csrf-protection\">Spring Security\n  Official Documentation: When to use CSRF protection</a> </li>\n</ul>",
        "mdDesc": "<p>Spring Security is coming out of the box with a protection against CSRF attacks. With 4.0, this protection is even enabled by default. Spring's\nrecommendation is to \"use CSRF protection for any request that could be processed by a browser by normal users\". So there is no reason to disable it\nfor standard web applications.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> activate Spring Security's CSRF protection. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n\t  http.csrf().disable(); // Noncompliant\n\t}\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_PROTECTION_DISABLED\">SPRING_CSRF_PROTECTION_DISABLED</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#when-to-use-csrf-protection\">Spring Security\n  Official Documentation: When to use CSRF protection</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6",
            "sans-top25-insecure",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1596",
        "repo": "squid",
        "name": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>",
        "mdDesc": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "obsolete",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2441",
        "repo": "squid",
        "name": "Non-serializable objects should not be stored in \"HttpSession\" objects",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n</ul>",
        "mdDesc": "<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2444",
        "repo": "squid",
        "name": "Lazy initialization of \"static\" fields should be \"synchronized\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be <code>synchronized</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating\nintended usage in multi-threaded applications.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>",
        "mdDesc": "<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be <code>synchronized</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating\nintended usage in multi-threaded applications.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2200",
        "repo": "squid",
        "name": "\"compareTo\" results should not be checked for specific values",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2440",
        "repo": "squid",
        "name": "Classes with only \"static\" methods should not be instantiated",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>\n</ul>",
        "mdDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> {rule:squid:S1118} - Utility classes should not have public constructors </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2442",
        "repo": "squid",
        "name": "\"Lock\" objects should not be \"synchronized\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cQCaAg\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level\n  concurrency objects </li>\n</ul>",
        "mdDesc": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cQCaAg\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level\n  concurrency objects </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "clumsy",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2681",
        "repo": "squid",
        "name": "Multiline blocks should be enclosed in curly braces",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
        "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:NoSonar",
        "repo": "squid",
        "name": "Track uses of \"NOSONAR\" comments",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>",
        "mdDesc": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1291",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3419",
        "repo": "squid",
        "name": "Group ids should follow a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match\nthe provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match\nthe provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "maven"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "regex",
                "htmlDesc": "The regular expression the &quot;groupId&quot; should match",
                "defaultValue": "(com|org)(\\.[a-z][a-z-0-9]*)+",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4508",
        "repo": "squid",
        "name": "Deserializing objects from an untrusted source is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Deserializing objects is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10654\">CVE-2018-10654</a>: Hazelcast Library: Java deserialization\n  vulnerability </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000058\">CVE-2018-1000058</a>: Jenkins Pipeline: arbitrary code execution\n  vulnerability </li>\n</ul>\n<p>Object deserialization from an untrusted source can lead to unexpected code execution. <code>ObjectInputStream</code> doesn't provide a way to\napply rules on its <code>InputStream</code> argument. Knowing that all serializable classes in the scope of the classloader will be deserialized,\nthere is a possibility that malicious code could be executed during the deserialization phase even if, in the end, a <code>ClassCastException</code>\nwill be raised.</p>\n<p>Deserialization takes a stream of bits and turns it into an object. If the stream contains the type of object you expect, all is well. But if\nyou're deserializing untrusted input, and an attacker has inserted some other type of object, you're in trouble. Why? There are a few different attack\nscenarios, but one widely-documented one goes like this: Deserialization first instantiates an <code>Object</code>, then uses the\n<code>readObject</code> method to populate it. If the attacker has overridden <code>readObject</code> then he is entirely in control of what code\nexecutes during that process. It is only after <code>readObject</code> has completed that your newly-minted <code>Object</code> can be cast to the\ntype you expected. A <code>ClassCastException</code> or <code>ClassNotFoundException</code> will be thrown, but at that point it's too late.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an attacker could have tampered with the source provided to the deserialization function. </li>\n  <li> you are using an unsafe deserialization function. See the <strong>Recommended Secure Coding Practices</strong> for examples of safe libraries.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To prevent insecure deserialization, you should either use look-ahead deserialization (pre-Java 9) or a filter to make sure you're dealing with the\ncorrect type of object <em>before</em> you act on it.</p>\n<p>Several third-party libraries offer look-ahead deserialization, including:</p>\n<ul>\n  <li> ikkisoft's <code>SerialKiller</code> </li>\n  <li> Apache Commons Class IO's <code>ValidatingObjectInputStream</code> </li>\n  <li> contrast-rO0's <code>SafeObjectInputStream</code> </li>\n</ul>\n<p>Note that it is possible to set a deserialization filter at the level of the JVM, but relying on that requires that your environment be configured\nperfectly. Every time. Additionally, such a filter may have unwanted impacts on other applications in the environment. On the other hand, setting a\nfilter as close as possible to the deserialization that uses it allows you to specify a very narrow, focused filter.</p>\n<p>You should also limit access to the serialized source. For example:</p>\n<ul>\n  <li> if it is a file, restrict the access to it. </li>\n  <li> if it comes from the network, restrict who has access to the process, such as with a Firewall or by authenticating the sender first. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION\">OBJECT_DESERIALIZATION </a> </li>\n</ul>",
        "mdDesc": "<p>Deserializing objects is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10654\">CVE-2018-10654</a>: Hazelcast Library: Java deserialization\n  vulnerability </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000058\">CVE-2018-1000058</a>: Jenkins Pipeline: arbitrary code execution\n  vulnerability </li>\n</ul>\n<p>Object deserialization from an untrusted source can lead to unexpected code execution. <code>ObjectInputStream</code> doesn't provide a way to\napply rules on its <code>InputStream</code> argument. Knowing that all serializable classes in the scope of the classloader will be deserialized,\nthere is a possibility that malicious code could be executed during the deserialization phase even if, in the end, a <code>ClassCastException</code>\nwill be raised.</p>\n<p>Deserialization takes a stream of bits and turns it into an object. If the stream contains the type of object you expect, all is well. But if\nyou're deserializing untrusted input, and an attacker has inserted some other type of object, you're in trouble. Why? There are a few different attack\nscenarios, but one widely-documented one goes like this: Deserialization first instantiates an <code>Object</code>, then uses the\n<code>readObject</code> method to populate it. If the attacker has overridden <code>readObject</code> then he is entirely in control of what code\nexecutes during that process. It is only after <code>readObject</code> has completed that your newly-minted <code>Object</code> can be cast to the\ntype you expected. A <code>ClassCastException</code> or <code>ClassNotFoundException</code> will be thrown, but at that point it's too late.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an attacker could have tampered with the source provided to the deserialization function. </li>\n  <li> you are using an unsafe deserialization function. See the <strong>Recommended Secure Coding Practices</strong> for examples of safe libraries.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To prevent insecure deserialization, you should either use look-ahead deserialization (pre-Java 9) or a filter to make sure you're dealing with the\ncorrect type of object <em>before</em> you act on it.</p>\n<p>Several third-party libraries offer look-ahead deserialization, including:</p>\n<ul>\n  <li> ikkisoft's <code>SerialKiller</code> </li>\n  <li> Apache Commons Class IO's <code>ValidatingObjectInputStream</code> </li>\n  <li> contrast-rO0's <code>SafeObjectInputStream</code> </li>\n</ul>\n<p>Note that it is possible to set a deserialization filter at the level of the JVM, but relying on that requires that your environment be configured\nperfectly. Every time. Additionally, such a filter may have unwanted impacts on other applications in the environment. On the other hand, setting a\nfilter as close as possible to the deserialization that uses it allows you to specify a very narrow, focused filter.</p>\n<p>You should also limit access to the serialized source. For example:</p>\n<ul>\n  <li> if it is a file, restrict the access to it. </li>\n  <li> if it comes from the network, restrict who has access to the process, such as with a Firewall or by authenticating the sender first. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION\">OBJECT_DESERIALIZATION </a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2208",
        "repo": "squid",
        "name": "Wildcard imports should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>",
        "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2209",
        "repo": "squid",
        "name": "\"static\" members should be accessed statically",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>",
        "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3417",
        "repo": "squid",
        "name": "Track uses of disallowed dependencies",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre>\n&lt;dependency&gt; &lt;!-- Noncompliant --&gt;\n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>",
        "mdDesc": "<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre>\n&lt;dependency&gt; &lt;!-- Noncompliant --&gt;\n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": true,
        "tags": [],
        "sysTags": [
            "maven"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "dependencyName",
                "htmlDesc": "Pattern describing forbidden dependencies group and artifact ids. E.G. '<code>*:.*log4j</code>' or '<code>x.y:*</code>'",
                "type": "STRING"
            },
            {
                "key": "version",
                "htmlDesc": "Dependency version pattern or dash-delimited range. Leave blank for all versions. E.G. '<code>1.3.*</code>', '<code>1.0-3.1</code>', '<code>1.0-*</code>' or '<code>*-3.1</code>'",
                "type": "STRING"
            }
        ],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1118",
        "repo": "squid",
        "name": "Utility classes should not have public constructors",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>",
        "mdDesc": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2689",
        "repo": "squid",
        "name": "Files opened in append mode should not be used with ObjectOutputStream",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization\nstream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>\nconstructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>\n<p>When you're trying to read your object(s) back from the file, only the first one will be read successfully, and a\n<code>StreamCorruptedException</code> will be thrown after that.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode\nObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName);\nObjectOutputStream out = new ObjectOutputStream(fos);\n</pre>",
        "mdDesc": "<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization\nstream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>\nconstructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>\n<p>When you're trying to read your object(s) back from the file, only the first one will be read successfully, and a\n<code>StreamCorruptedException</code> will be thrown after that.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode\nObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName);\nObjectOutputStream out = new ObjectOutputStream(fos);\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3415",
        "repo": "squid",
        "name": "Assertion arguments should be passed in the correct order",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome\n(succeed/fail when it should) but the error messages will be confusing. </p>\n<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\n</pre>",
        "mdDesc": "<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome\n(succeed/fail when it should) but the error messages will be confusing. </p>\n<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious",
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4507",
        "repo": "squid",
        "name": "Delivering code in production with debug features activated is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007\">CVE-2018-1999007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306\">CVE-2015-5306</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006\">CVE-2013-2006</a> </li>\n</ul>\n<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system\nrunning the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application\nwhich has debug features activated is extremely dangerous.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>\n  <li> the application runs by default with debug features activated. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug\nfeatures should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>\n<p>Check that every debug feature is controlled by only very few configuration variables: logging, exception/error handling, access control, etc... It\nis otherwise very easy to forget one of them.</p>\n<p>Do not enable debug features on production servers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Noncompliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/215.html\">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007\">CVE-2018-1999007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306\">CVE-2015-5306</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006\">CVE-2013-2006</a> </li>\n</ul>\n<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system\nrunning the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application\nwhich has debug features activated is extremely dangerous.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>\n  <li> the application runs by default with debug features activated. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug\nfeatures should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>\n<p>Check that every debug feature is controlled by only very few configuration variables: logging, exception/error handling, access control, etc... It\nis otherwise very easy to forget one of them.</p>\n<p>Do not enable debug features on production servers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Noncompliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/215.html\">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2326",
        "repo": "squid",
        "name": "Unused type parameters should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>",
        "mdDesc": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2447",
        "repo": "squid",
        "name": "Null should not be returned from a \"Boolean\" method",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "mdDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3658",
        "repo": "squid",
        "name": "Unit tests should throw exceptions",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>",
        "mdDesc": "<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "error-handling",
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1479",
        "repo": "squid",
        "name": "\"switch\" statements should not have too many \"case\" clauses",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>",
        "mdDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "maximum",
                "htmlDesc": "Maximum number of case",
                "defaultValue": "30",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:UnusedPrivateMethod",
        "repo": "squid",
        "name": "Unused \"private\" methods should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>",
        "mdDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1144",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:UselessImportCheck",
        "repo": "squid",
        "name": "Unnecessary imports should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>\n<p>Unused and useless imports should not occur if that is the case. </p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>",
        "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>\n<p>Unused and useless imports should not occur if that is the case. </p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1128",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:UselessParenthesesCheck",
        "repo": "squid",
        "name": "Redundant pairs of parentheses should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>",
        "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1110",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1126",
        "repo": "squid",
        "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single\ninvocation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n</pre>",
        "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single\ninvocation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2698",
        "repo": "squid",
        "name": "JUnit assertions should include messages",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of\ntime on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the\nassertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>",
        "mdDesc": "<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of\ntime on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the\nassertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4512",
        "repo": "squid",
        "name": "Setting JavaBean properties is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is\n  called </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the new property values might have been tampered with or provided by an untrusted source. </li>\n  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>\n</ul>\n<p>You are at risk if you answered yes to any of these question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize all values used as JavaBean properties.</p>\n<p>Don't set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCompany bean = new Company();\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map); // Noncompliant; \"map\" is populated with data coming from user input, here \"request.getParameterNames()\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/15.html\">MITRE, CWE-15</a> - External Control of System or Configuration Setting </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION\">BEAN_PROPERTY_INJECTION</a> </li>\n</ul>",
        "mdDesc": "<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is\n  called </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the new property values might have been tampered with or provided by an untrusted source. </li>\n  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>\n</ul>\n<p>You are at risk if you answered yes to any of these question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize all values used as JavaBean properties.</p>\n<p>Don't set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCompany bean = new Company();\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map); // Noncompliant; \"map\" is populated with data coming from user input, here \"request.getParameterNames()\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/15.html\">MITRE, CWE-15</a> - External Control of System or Configuration Setting </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION\">BEAN_PROPERTY_INJECTION</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a1"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1488",
        "repo": "squid",
        "name": "Local variables should not be declared and then immediately returned or thrown",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>",
        "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2699",
        "repo": "squid",
        "name": "Tests should include assertions",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>\n<ul>\n  <li> JUnit </li>\n  <li> Fest 1.x </li>\n  <li> Fest 2.x </li>\n  <li> Rest-assured 2.0 </li>\n  <li> AssertJ </li>\n  <li> Hamcrest </li>\n  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>\n  <li> Eclipse Vert.x </li>\n  <li> Truth Framework </li>\n  <li> Mockito </li>\n  <li> EasyMock </li>\n  <li> JMock </li>\n  <li> WireMock </li>\n  <li> RxJava 1.x </li>\n  <li> RxJava 2.x </li>\n  <li> Selenide </li>\n  <li> JMockit </li>\n</ul>\n<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,\nthe pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>\n<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>\n<pre>\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass = new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n</pre>",
        "mdDesc": "<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>\n<ul>\n  <li> JUnit </li>\n  <li> Fest 1.x </li>\n  <li> Fest 2.x </li>\n  <li> Rest-assured 2.0 </li>\n  <li> AssertJ </li>\n  <li> Hamcrest </li>\n  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>\n  <li> Eclipse Vert.x </li>\n  <li> Truth Framework </li>\n  <li> Mockito </li>\n  <li> EasyMock </li>\n  <li> JMock </li>\n  <li> WireMock </li>\n  <li> RxJava 1.x </li>\n  <li> RxJava 2.x </li>\n  <li> Selenide </li>\n  <li> JMockit </li>\n</ul>\n<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,\nthe pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>\n<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>\n<pre>\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass = new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "customAssertionMethods",
                "htmlDesc": "Comma-separated list of fully qualified method symbols that should be considered as assertion methods. The wildcard character can be used at the end of the method name.",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3546",
        "repo": "squid",
        "name": "Custom resources should be closed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>See also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS2095'>S2095</a> - Resources should be closed </li>\n</ul>",
        "mdDesc": "<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>See also</h2>\n<ul>\n  <li> {rule:squid:S2095} - Resources should be closed </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": true,
        "tags": [],
        "sysTags": [
            "denial-of-service"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "factoryMethod",
                "htmlDesc": "the fully-qualified name of a factory method that returns an open resource, with or without a parameter list. E.G. &quot;org.assoc.res.ResourceFactory$Innerclass#create&quot; or &quot;org.assoc.res.SpecialResourceFactory#create(java.lang.String, int)&quot;",
                "type": "STRING"
            },
            {
                "key": "closingMethod",
                "htmlDesc": "the fully-qualified name of the method which closes the open resource, with or without a parameter list. E.G. &quot;org.assoc.res.MyResource#closeMe&quot; or &quot;org.assoc.res.MySpecialResource#closeMe(java.lang.String, int)&quot;",
                "type": "STRING"
            },
            {
                "key": "constructor",
                "htmlDesc": "the fully-qualified name of a constructor that creates an open resource. An optional signature may be specified after the class name. E.G. &quot;org.assoc.res.MyResource&quot; or &quot;org.assoc.res.MySpecialResource(java.lang.String, int)&quot;",
                "type": "STRING"
            },
            {
                "key": "openingMethod",
                "htmlDesc": "the fully-qualified name of a method that opens an existing resource, with or without a parameter list. E.G. &quot;org.assoc.res.ResourceFactory#create&quot; or &quot;org.assoc.res.SpecialResourceFactory #create(java.lang.String, int)&quot;",
                "type": "STRING"
            }
        ],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1125",
        "repo": "squid",
        "name": "Boolean literals should not be redundant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>",
        "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3422",
        "repo": "squid",
        "name": "Dependencies should not have \"system\" scope",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>",
        "mdDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "lock-in",
            "maven"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4635",
        "repo": "squid",
        "name": "String offset-based methods should be preferred for finding substrings from offsets",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.\nThis works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of\n<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>\n<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>\n<p>- <code>indexOf(int ch)</code></p>\n<p>- <code>indexOf(String str)</code></p>\n<p>- <code>lastIndexOf(int ch)</code></p>\n<p>- <code>lastIndexOf(String str)</code></p>\n<p>- <code>startsWith(String prefix)</code></p>\n<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>\n<p>Using these methods gives the same result while avoiding the creation of additional <code>String</code> instances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.indexOf(char1, beginIndex);\n</pre>",
        "mdDesc": "<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.\nThis works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of\n<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>\n<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>\n<p>- <code>indexOf(int ch)</code></p>\n<p>- <code>indexOf(String str)</code></p>\n<p>- <code>lastIndexOf(int ch)</code></p>\n<p>- <code>lastIndexOf(String str)</code></p>\n<p>- <code>startsWith(String prefix)</code></p>\n<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>\n<p>Using these methods gives the same result while avoiding the creation of additional <code>String</code> instances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.indexOf(char1, beginIndex);\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2333",
        "repo": "squid",
        "name": "Redundant modifiers should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. There is no need to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>",
        "mdDesc": "<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. There is no need to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "finding"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2696",
        "repo": "squid",
        "name": "Instance methods should not write to \"static\" fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>",
        "mdDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3423",
        "repo": "squid",
        "name": "pom elements should be in the recommended order",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:</p>\n<ol>\n  <li> &lt;modelVersion/&gt; </li>\n  <li> &lt;parent/&gt; </li>\n  <li> &lt;groupId/&gt; </li>\n  <li> &lt;artifactId/&gt; </li>\n  <li> &lt;version/&gt; </li>\n  <li> &lt;packaging/&gt; </li>\n  <li> &lt;name/&gt; </li>\n  <li> &lt;description/&gt; </li>\n  <li> &lt;url/&gt; </li>\n  <li> &lt;inceptionYear/&gt; </li>\n  <li> &lt;organization/&gt; </li>\n  <li> &lt;licenses/&gt; </li>\n  <li> &lt;developers/&gt; </li>\n  <li> &lt;contributors/&gt; </li>\n  <li> &lt;mailingLists/&gt; </li>\n  <li> &lt;prerequisites/&gt; </li>\n  <li> &lt;modules/&gt; </li>\n  <li> &lt;scm/&gt; </li>\n  <li> &lt;issueManagement/&gt; </li>\n  <li> &lt;ciManagement/&gt; </li>\n  <li> &lt;distributionManagement/&gt; </li>\n  <li> &lt;properties/&gt; </li>\n  <li> &lt;dependencyManagement/&gt; </li>\n  <li> &lt;dependencies/&gt; </li>\n  <li> &lt;repositories/&gt; </li>\n  <li> &lt;pluginRepositories/&gt; </li>\n  <li> &lt;build/&gt; </li>\n  <li> &lt;reporting/&gt; </li>\n  <li> &lt;profiles/&gt; </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention\">POM Code Convention</a> </li>\n</ul>",
        "mdDesc": "<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:</p>\n<ol>\n  <li> &lt;modelVersion/&gt; </li>\n  <li> &lt;parent/&gt; </li>\n  <li> &lt;groupId/&gt; </li>\n  <li> &lt;artifactId/&gt; </li>\n  <li> &lt;version/&gt; </li>\n  <li> &lt;packaging/&gt; </li>\n  <li> &lt;name/&gt; </li>\n  <li> &lt;description/&gt; </li>\n  <li> &lt;url/&gt; </li>\n  <li> &lt;inceptionYear/&gt; </li>\n  <li> &lt;organization/&gt; </li>\n  <li> &lt;licenses/&gt; </li>\n  <li> &lt;developers/&gt; </li>\n  <li> &lt;contributors/&gt; </li>\n  <li> &lt;mailingLists/&gt; </li>\n  <li> &lt;prerequisites/&gt; </li>\n  <li> &lt;modules/&gt; </li>\n  <li> &lt;scm/&gt; </li>\n  <li> &lt;issueManagement/&gt; </li>\n  <li> &lt;ciManagement/&gt; </li>\n  <li> &lt;distributionManagement/&gt; </li>\n  <li> &lt;properties/&gt; </li>\n  <li> &lt;dependencyManagement/&gt; </li>\n  <li> &lt;dependencies/&gt; </li>\n  <li> &lt;repositories/&gt; </li>\n  <li> &lt;pluginRepositories/&gt; </li>\n  <li> &lt;build/&gt; </li>\n  <li> &lt;reporting/&gt; </li>\n  <li> &lt;profiles/&gt; </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention\">POM Code Convention</a> </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "maven"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1244",
        "repo": "squid",
        "name": "Floating point numbers should not be tested for equality",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>",
        "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2694",
        "repo": "squid",
        "name": "Inner classes which do not reference their owning classes should be \"static\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth noting that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth noting that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3420",
        "repo": "squid",
        "name": "Artifact ids should follow a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the\nprovided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the\nprovided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "maven"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "regex",
                "htmlDesc": "The regular expression the &quot;artifactId&quot; should match",
                "defaultValue": "[a-z][a-z-0-9]+",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2211",
        "repo": "squid",
        "name": "Types should be used in lambdas",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Exceptions</h2>\n<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.</p>\n<pre>\nstream.map((a, b) -&gt; a.length); // compliant\n</pre>",
        "mdDesc": "<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Exceptions</h2>\n<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.</p>\n<pre>\nstream.map((a, b) -&gt; a.length); // compliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2695",
        "repo": "squid",
        "name": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any \"set\" method of a <code>PreparedStatement</code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,\nrather than 0</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>",
        "mdDesc": "<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any \"set\" method of a <code>PreparedStatement</code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,\nrather than 0</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "sql"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3421",
        "repo": "squid",
        "name": "Deprecated \"${pom}\" properties should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>",
        "mdDesc": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "maven",
            "obsolete"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4510",
        "repo": "squid",
        "name": "Deserializing XML from an untrusted source is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Deserialization from an untrusted source using the XMLDecoder library can lead to unexpected code execution. For example, it has led in the past to\nthe following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4221\">CVE-2013-4221</a> </li>\n</ul>\n<p>XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods only but nothing prevents the execution of any\nother method.</p>\n<p>This rule raises an issue when XMLDecoder is instantiated. The call to \"readObject\" is also highlighted to show where the malicious code can be\nexecuted.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XML input can come from an untrusted source and be tainted by a hacker. (*) </li>\n  <li> you require the advanced functionalities provided by the XMLDecoder class. If you simply need to deserialize XML you can use a more secure\n  deserialization function. </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>If you only need a simple deserialization, use instead one of the deserialization libraries <a\nhref=\"https://www.owasp.org/index.php/Deserialization_Cheat_Sheet#Mitigation_Tools.2FLibraries\">recommended by OWASP</a>.</p>\n<p>If you really need to use XMLDecoder, make sure that the serialized data cannot be tampered with.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void decode(InputStream in) {\n  XMLDecoder d = new XMLDecoder(in); // Noncompliant\n  Object result = d.readObject();\n  [...]\n  d.close();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XML_DECODER\">XML_DECODER </a> </li>\n</ul>",
        "mdDesc": "<p>Deserialization from an untrusted source using the XMLDecoder library can lead to unexpected code execution. For example, it has led in the past to\nthe following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4221\">CVE-2013-4221</a> </li>\n</ul>\n<p>XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods only but nothing prevents the execution of any\nother method.</p>\n<p>This rule raises an issue when XMLDecoder is instantiated. The call to \"readObject\" is also highlighted to show where the malicious code can be\nexecuted.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XML input can come from an untrusted source and be tainted by a hacker. (*) </li>\n  <li> you require the advanced functionalities provided by the XMLDecoder class. If you simply need to deserialize XML you can use a more secure\n  deserialization function. </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>If you only need a simple deserialization, use instead one of the deserialization libraries <a\nhref=\"https://www.owasp.org/index.php/Deserialization_Cheat_Sheet#Mitigation_Tools.2FLibraries\">recommended by OWASP</a>.</p>\n<p>If you really need to use XMLDecoder, make sure that the serialized data cannot be tampered with.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void decode(InputStream in) {\n  XMLDecoder d = new XMLDecoder(in); // Noncompliant\n  Object result = d.readObject();\n  [...]\n  d.close();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XML_DECODER\">XML_DECODER </a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2692",
        "repo": "squid",
        "name": "\"indexOf\" checks should not be for positive numbers",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2693",
        "repo": "squid",
        "name": "Threads should not be started in constructors",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZQIRAg\">CERT, TSM02-J.</a> - Do not use background threads during class initialization\n  </li>\n</ul>",
        "mdDesc": "<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZQIRAg\">CERT, TSM02-J.</a> - Do not use background threads during class initialization\n  </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3305",
        "repo": "squid",
        "name": "Factory method injection should be used in \"@Configuration\" classes",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn't to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single <code>@Bean</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n  @Autowired private ​DataSource dataSource​;  // Noncompliant\n\n  @Bean\n  public ​MyService myService() {\n    return new ​MyService(this​.dataSource​);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n @Bean\n  public ​MyService myService(DataSource dataSource) {\n    return new ​MyService(dataSource);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don't have to provide the dependencies themselves.</p>",
        "mdDesc": "<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn't to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single <code>@Bean</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n  @Autowired private ​DataSource dataSource​;  // Noncompliant\n\n  @Bean\n  public ​MyService myService() {\n    return new ​MyService(this​.dataSource​);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n @Bean\n  public ​MyService myService(DataSource dataSource) {\n    return new ​MyService(dataSource);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don't have to provide the dependencies themselves.</p>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3306",
        "repo": "squid",
        "name": "Constructor injection should be used instead of field injection",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,\nrather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, ...), won't have the ability to perform the\nfield injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>",
        "mdDesc": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,\nrather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, ...), won't have the ability to perform the\nfield injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design",
            "jee",
            "pitfall",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1481",
        "repo": "squid",
        "name": "Unused local variables should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>",
        "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2148",
        "repo": "squid",
        "name": "Underscores should be used to make large numbers readable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Base</th>\n      <th> Minimum digits</th>\n    </tr>\n    <tr>\n      <td>binary</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>octal</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td> 6 </td>\n    </tr>\n    <tr>\n      <td>hexadecimal</td>\n      <td> 9 </td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>",
        "mdDesc": "<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Base</th>\n      <th> Minimum digits</th>\n    </tr>\n    <tr>\n      <td>binary</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>octal</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td> 6 </td>\n    </tr>\n    <tr>\n      <td>hexadecimal</td>\n      <td> 9 </td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3358",
        "repo": "squid",
        "name": "Ternary operators should not be nested",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n  return p.gender == Person.MALE ? \"Mr. \" : p.isMarried() ? \"Mrs. \" : \"Miss \";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String getTitle(Person p) {\n  if (p.gender == Person.MALE) {\n    return \"Mr. \";\n  }\n  return p.isMarried() ? \"Mrs. \" : \"Miss \";\n}\n</pre>",
        "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n  return p.gender == Person.MALE ? \"Mr. \" : p.isMarried() ? \"Mrs. \" : \"Miss \";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String getTitle(Person p) {\n  if (p.gender == Person.MALE) {\n    return \"Mr. \";\n  }\n  return p.isMarried() ? \"Mrs. \" : \"Miss \";\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4517",
        "repo": "squid",
        "name": "InputSteam.read() implementation should not return a signed byte",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from\nthe input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been\nreached, the value -1 is returned.</p>\n<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum\nvalue of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>\nprimitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied\n}\n</pre>",
        "mdDesc": "<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from\nthe input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been\nreached, the value -1 is returned.</p>\n<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum\nvalue of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>\nprimitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2147",
        "repo": "squid",
        "name": "Catches should be combined",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>",
        "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2388",
        "repo": "squid",
        "name": "Inner class calls to super class methods should be unambiguous",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3599",
        "repo": "squid",
        "name": "Double Brace Initialization should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. </p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>",
        "mdDesc": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. </p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "leak"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2386",
        "repo": "squid",
        "name": "Mutable fields should not be \"public static\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>",
        "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2387",
        "repo": "squid",
        "name": "Child class fields should not shadow parent class fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3355",
        "repo": "squid",
        "name": "Defined filters should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not\ninvoked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n\n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "mdDesc": "<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not\ninvoked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n\n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a6"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4684",
        "repo": "squid",
        "name": "Persistent entities should not be used as arguments of \"@RequestMapping\" methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>On one side, Spring MVC automatically bind request parameters to beans declared as arguments of methods annotated with\n<code>@RequestMapping</code>. Because of this automatic binding feature, it's possible to feed some unexpected fields on the arguments of the\n<code>@RequestMapping</code> annotated methods. </p>\n<p>On the other end, persistent objects (<code>@Entity</code> or <code>@Document</code>) are linked to the underlying database and updated\nautomatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.</p>\n<p>These two facts combined together can lead to malicious attack: if a persistent object is used as an argument of a method annotated with\n<code>@RequestMapping</code>, it's possible from a specially crafted user input, to change the content of unexpected fields into the database.</p>\n<p>For this reason, using <code>@Entity</code> or <code>@Document</code> objects as arguments of methods annotated with <code>@RequestMapping</code>\nshould be avoided.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport javax.persistence.Entity;\n\n@Entity\npublic class Wish {\n  Long productId;\n  Long quantity;\n  Client client;\n}\n\n@Entity\npublic class Client {\n  String clientId;\n  String name;\n  String password;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class WishListController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class WishDTO {\n  Long productId;\n  Long quantity;\n  Long clientId;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/915.html\">MITRE, CWE-915</a> - Improperly Controlled Modification of Dynamically-Determined\n  Object Attributes </li>\n  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>\n  <li> <a href=\"https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf\">Two Security Vulnerabilities in the Spring\n  Framework’s MVC by Ryan Berg and Dinis Cruz</a> </li>\n</ul>",
        "mdDesc": "<p>On one side, Spring MVC automatically bind request parameters to beans declared as arguments of methods annotated with\n<code>@RequestMapping</code>. Because of this automatic binding feature, it's possible to feed some unexpected fields on the arguments of the\n<code>@RequestMapping</code> annotated methods. </p>\n<p>On the other end, persistent objects (<code>@Entity</code> or <code>@Document</code>) are linked to the underlying database and updated\nautomatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.</p>\n<p>These two facts combined together can lead to malicious attack: if a persistent object is used as an argument of a method annotated with\n<code>@RequestMapping</code>, it's possible from a specially crafted user input, to change the content of unexpected fields into the database.</p>\n<p>For this reason, using <code>@Entity</code> or <code>@Document</code> objects as arguments of methods annotated with <code>@RequestMapping</code>\nshould be avoided.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport javax.persistence.Entity;\n\n@Entity\npublic class Wish {\n  Long productId;\n  Long quantity;\n  Client client;\n}\n\n@Entity\npublic class Client {\n  String clientId;\n  String name;\n  String password;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class WishListController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class WishDTO {\n  Long productId;\n  Long quantity;\n  Long clientId;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/915.html\">MITRE, CWE-915</a> - Improperly Controlled Modification of Dynamically-Determined\n  Object Attributes </li>\n  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>\n  <li> <a href=\"https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf\">Two Security Vulnerabilities in the Spring\n  Framework’s MVC by Ryan Berg and Dinis Cruz</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1175",
        "repo": "squid",
        "name": "The signature of \"finalize()\" should match that of \"Object.finalize()\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override <code>Object.finalize()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>",
        "mdDesc": "<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override <code>Object.finalize()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2142",
        "repo": "squid",
        "name": "\"InterruptedException\" should not be ignored",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>\n<blockquote>\n  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n  <li> <a href=\"https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1\">Dealing with InterruptedException</a> </li>\n</ul>",
        "mdDesc": "<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>\n<blockquote>\n  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n  <li> <a href=\"https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1\">Dealing with InterruptedException</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "error-handling",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2384",
        "repo": "squid",
        "name": "Mutable members should not be stored or returned directly",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zQCuAQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QIEVAQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal\n  components </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>",
        "mdDesc": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zQCuAQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QIEVAQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal\n  components </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1174",
        "repo": "squid",
        "name": "\"Object.finalize()\" should remain protected (versus public) when overriding",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "mdDesc": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2143",
        "repo": "squid",
        "name": "\"java.time\" classes should be used for dates and times",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n    <tr>\n      <td>LocalDate</td>\n      <td>a date, without time of day, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalTime</td>\n      <td>the time of day, without date, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalDateTime</td>\n      <td>the date and time, without offset, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDate</td>\n      <td>a date with an offset such as +02:00, without time of day, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetTime</td>\n      <td>the time of day with an offset such as +02:00, without date, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDateTime</td>\n      <td>the date and time with an offset such as +02:00, without a zone</td>\n    </tr>\n    <tr>\n      <td>ZonedDateTime</td>\n      <td>the date and time with a time zone and offset</td>\n    </tr>\n    <tr>\n      <td>YearMonth</td>\n      <td>a year and month</td>\n    </tr>\n    <tr>\n      <td>MonthDay</td>\n      <td>month and day</td>\n    </tr>\n    <tr>\n      <td>Year/MonthOfDay/DayOfWeek/...</td>\n      <td>classes for the important fields</td>\n    </tr>\n    <tr>\n      <td>DateTimeFields</td>\n      <td>stores a map of field-value pairs which may be invalid</td>\n    </tr>\n    <tr>\n      <td>Calendrical</td>\n      <td>access to the low-level API</td>\n    </tr>\n    <tr>\n      <td>Period</td>\n      <td>a descriptive amount of time, such as \"2 months and 3 days\"</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>",
        "mdDesc": "<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n    <tr>\n      <td>LocalDate</td>\n      <td>a date, without time of day, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalTime</td>\n      <td>the time of day, without date, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalDateTime</td>\n      <td>the date and time, without offset, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDate</td>\n      <td>a date with an offset such as +02:00, without time of day, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetTime</td>\n      <td>the time of day with an offset such as +02:00, without date, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDateTime</td>\n      <td>the date and time with an offset such as +02:00, without a zone</td>\n    </tr>\n    <tr>\n      <td>ZonedDateTime</td>\n      <td>the date and time with a time zone and offset</td>\n    </tr>\n    <tr>\n      <td>YearMonth</td>\n      <td>a year and month</td>\n    </tr>\n    <tr>\n      <td>MonthDay</td>\n      <td>month and day</td>\n    </tr>\n    <tr>\n      <td>Year/MonthOfDay/DayOfWeek/...</td>\n      <td>classes for the important fields</td>\n    </tr>\n    <tr>\n      <td>DateTimeFields</td>\n      <td>stores a map of field-value pairs which may be invalid</td>\n    </tr>\n    <tr>\n      <td>Calendrical</td>\n      <td>access to the low-level API</td>\n    </tr>\n    <tr>\n      <td>Period</td>\n      <td>a descriptive amount of time, such as \"2 months and 3 days\"</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4201",
        "repo": "squid",
        "name": "Null checks should not be used with \"instanceof\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There's no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so\na null check is redundant.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n</pre>",
        "mdDesc": "<p>There's no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so\na null check is redundant.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:ClassCyclomaticComplexity",
        "repo": "squid",
        "name": "Classes should not be too complex",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,\n<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,\n<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance\ninitializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the\ntime, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several\nclasses.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
        "mdDesc": "<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,\n<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,\n<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance\ninitializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the\ntime, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several\nclasses.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
        "severity": "CRITICAL",
        "status": "DEPRECATED",
        "internalKey": "S1311",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum complexity allowed.",
                "defaultValue": "200",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "1min",
        "defaultDebtRemFnOffset": "10min",
        "effortToFixDescription": "per complexity point over the threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "1min",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "1min",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "1min",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "gapDescription": "per complexity point over the threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2140",
        "repo": "squid",
        "name": "Methods of \"Random\" that return floating point values should not be used in random integer generation",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>",
        "mdDesc": "<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4449",
        "repo": "squid",
        "name": "Nullness of parameters should be guaranteed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>\n<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding\nnull parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter\n  }\n\n  void bar(Object o) { // 'o' is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Two solutions are possible: </p>\n<ul>\n  <li> The signature of the method is correct, and null check should be done prior to the call. </li>\n  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>\n</ul>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o = getValue();\n      if (o != null) {\n        bar(); // Compliant - 'o' can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<p>or </p>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>",
        "mdDesc": "<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>\n<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding\nnull parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter\n  }\n\n  void bar(Object o) { // 'o' is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Two solutions are possible: </p>\n<ul>\n  <li> The signature of the method is correct, and null check should be done prior to the call. </li>\n  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>\n</ul>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o = getValue();\n      if (o != null) {\n        bar(); // Compliant - 'o' can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<p>or </p>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1172",
        "repo": "squid",
        "name": "Unused method parameters should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be use for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "mdDesc": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be use for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2141",
        "repo": "squid",
        "name": "Classes that don't define \"hashCode()\" should not be used in hashes",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>",
        "mdDesc": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4682",
        "repo": "squid",
        "name": "\"@CheckForNull\" or \"@Nullable\" should not be used on primitive types",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>By definition, primitive types are not Objects and so they can't be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>\non primitive types adds confusion and is useless.</p>\n<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nboolean isFoo() {\n ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean isFoo() {\n ...\n}\n</pre>",
        "mdDesc": "<p>By definition, primitive types are not Objects and so they can't be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>\non primitive types adds confusion and is useless.</p>\n<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nboolean isFoo() {\n ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean isFoo() {\n ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1170",
        "repo": "squid",
        "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>",
        "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1171",
        "repo": "squid",
        "name": "Only static class initializers should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>",
        "mdDesc": "<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3369",
        "repo": "squid",
        "name": "Security constraints should be defined",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,\nbut it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284.html\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>\n</ul>",
        "mdDesc": "<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,\nbut it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284.html\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "jee",
            "owasp-a5",
            "websphere"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "3h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "3h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "3h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "3h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2039",
        "repo": "squid",
        "name": "Member variable visibility should be specified",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Ball {\n    String color=\"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>",
        "mdDesc": "<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Ball {\n    String color=\"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2157",
        "repo": "squid",
        "name": "\"Cloneables\" should implement \"clone\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>",
        "mdDesc": "<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "api-design",
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2159",
        "repo": "squid",
        "name": "Silly equality checks should not be made",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>",
        "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1068",
        "repo": "squid",
        "name": "Unused \"private\" fields should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>",
        "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2276",
        "repo": "squid",
        "name": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to\ntemporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FgG7AQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a\n  lock </li>\n</ul>",
        "mdDesc": "<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to\ntemporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FgG7AQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a\n  lock </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading",
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2278",
        "repo": "squid",
        "name": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a> </li>\n</ul>",
        "mdDesc": "<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a6",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1067",
        "repo": "squid",
        "name": "Expressions should not be too complex",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>",
        "mdDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum number of allowed conditional operators in an expression",
                "defaultValue": "3",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "1min",
        "defaultDebtRemFnOffset": "5min",
        "effortToFixDescription": "per complexity point above the threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "1min",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "1min",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "1min",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "gapDescription": "per complexity point above the threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1188",
        "repo": "squid",
        "name": "Lambdas and anonymous classes should not have too many lines of code",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>",
        "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "Max",
                "htmlDesc": "Maximum allowed lines in an anonymous class/lambda",
                "defaultValue": "20",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2156",
        "repo": "squid",
        "name": "\"final\" classes should not have \"protected\" members",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3366",
        "repo": "squid",
        "name": "\"this\" should not be exposed from constructors",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.</p>\n<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another\nthread could access the object before it's fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,\nthere's still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won't be complete before\n<code>this</code> is exposed.</p>\n<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Monument {\n\n  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location = location;\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered\nby S3010.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/aAD1AQ\">CERT, TSM01-J.</a> - Do not let the this reference escape during object\n  construction </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7ABQAg\">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>\n</ul>",
        "mdDesc": "<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.</p>\n<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another\nthread could access the object before it's fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,\nthere's still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won't be complete before\n<code>this</code> is exposed.</p>\n<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Monument {\n\n  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location = location;\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered\nby S3010.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/aAD1AQ\">CERT, TSM01-J.</a> - Do not let the this reference escape during object\n  construction </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7ABQAg\">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1066",
        "repo": "squid",
        "name": "Collapsible \"if\" statements should be merged",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>",
        "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2277",
        "repo": "squid",
        "name": "Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/780.html\">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe</a> </li>\n</ul>",
        "mdDesc": "<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/780.html\">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3",
            "owasp-a6",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2153",
        "repo": "squid",
        "name": "Boxing and unboxing should not be immediately reversed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n\n  Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = (int) d;\n\n  examineInt(i);\n\n  examineInteger(i);\n  examineInteger(iger1);\n}\n</pre>",
        "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n\n  Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = (int) d;\n\n  examineInt(i);\n\n  examineInteger(i);\n  examineInteger(iger1);\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3242",
        "repo": "squid",
        "name": "Method parameters should be declared with base types",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>",
        "mdDesc": "<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "api-design"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1065",
        "repo": "squid",
        "name": "Unused labels should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "mdDesc": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1186",
        "repo": "squid",
        "name": "Methods should not be empty",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>",
        "mdDesc": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2274",
        "repo": "squid",
        "name": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9QIhAQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop\n  </li>\n</ul>",
        "mdDesc": "<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9QIhAQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2154",
        "repo": "squid",
        "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>",
        "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4454",
        "repo": "squid",
        "name": "\"equals\" method parameters should not be marked \"@Nonnull\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the\nother cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating \"_For any non-null\nreference value x, x.equals(null) should return false._\"</p>\n<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>\n<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>\nannotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null) {\n    return false;\n  }\n  // ...\n}\n</pre>",
        "mdDesc": "<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the\nother cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating \"_For any non-null\nreference value x, x.equals(null) should return false._\"</p>\n<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>\n<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>\nannotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null) {\n    return false;\n  }\n  // ...\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "3min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "3min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "3min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "3min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1185",
        "repo": "squid",
        "name": "Overriding methods should do more than simply call the same method in the super class",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>",
        "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2275",
        "repo": "squid",
        "name": "Printf-style format strings should not lead to unexpected behavior at runtime",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant {{Not enough arguments.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14, 2); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
        "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant {{Not enough arguments.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14, 2); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:UndocumentedApi",
        "repo": "squid",
        "name": "Public types, methods and fields (API) should be documented with Javadoc",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like \"TODO\", \"FIXME\", \"...\" should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>",
        "mdDesc": "<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like \"TODO\", \"FIXME\", \"...\" should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1176",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "forClasses",
                "htmlDesc": "Pattern of classes which should adhere to this constraint. Ex : *<strong>.api.</strong>*",
                "defaultValue": "**.api.**",
                "type": "STRING"
            },
            {
                "key": "exclusion",
                "htmlDesc": "Pattern of classes which are excluded from adhering to this constraint.",
                "defaultValue": "**.internal.**",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2151",
        "repo": "squid",
        "name": "\"runFinalizersOnExit\" should not be called",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and\n<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "mdDesc": "<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and\n<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2272",
        "repo": "squid",
        "name": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>",
        "mdDesc": "<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling",
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3008",
        "repo": "squid",
        "name": "Static non-final field names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the field names against.",
                "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1182",
        "repo": "squid",
        "name": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals\\(x\\)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/580.html\">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/CQHEAw\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>",
        "mdDesc": "<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals\\(x\\)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/580.html\">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/CQHEAw\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "convention",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2273",
        "repo": "squid",
        "name": "\"wait\", \"notify\" and \"notifyAll\" should only be called when a lock is obviously held on an object",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>",
        "mdDesc": "<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2391",
        "repo": "squid",
        "name": "JUnit framework methods should be declared properly",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named\n\"suite\", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a\n<code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... }  // Noncompliant; must be public static\npublic static boolean suite() { ... }  // Noncompliant; wrong return type\npublic static Test suit() { ... }  // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... }  // Noncompliant; should be tearDown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>",
        "mdDesc": "<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named\n\"suite\", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a\n<code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... }  // Noncompliant; must be public static\npublic static boolean suite() { ... }  // Noncompliant; wrong return type\npublic static Test suit() { ... }  // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... }  // Noncompliant; should be tearDown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1181",
        "repo": "squid",
        "name": "Throwable and Error should not be caught",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>",
        "mdDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "cert",
            "cwe",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2390",
        "repo": "squid",
        "name": "Classes should not access their own subclasses during initialization",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>",
        "mdDesc": "<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3578",
        "repo": "squid",
        "name": "Test methods should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression the test method names are checked against.",
                "defaultValue": "^test[A-Z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3457",
        "repo": "squid",
        "name": "Printf-style format strings should be used correctly",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result '{0}'\", 14); // Noncompliant {{String contains no format specifiers.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message \", 1); // Noncompliant {{String contains no format specifiers.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}'\", 14);\n\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
        "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result '{0}'\", 14); // Noncompliant {{String contains no format specifiers.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message \", 1); // Noncompliant {{String contains no format specifiers.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}'\", 14);\n\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4424",
        "repo": "squid",
        "name": "TrustManagers should not blindly accept any certificates",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Empty implementations of the <code>X509TrustManager</code> interface are often created to allow connection to a host that is not signed by a root\ncertificate authority. Such an implementation will accept any certificate, which leaves the application vulnerable to Man-in-the-middle attacks. The\ncorrect solution is to provide an appropriate trust store.</p>\n<p>This rule raises an issue when an implementation of <code>X509TrustManager</code> never throws exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {  // Noncompliant, nothing means trust any client\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { // Noncompliant, this method never throws exception, it means trust any client\n        LOG.log(Level.SEVERE, ERROR_MESSAGE);\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>",
        "mdDesc": "<p>Empty implementations of the <code>X509TrustManager</code> interface are often created to allow connection to a host that is not signed by a root\ncertificate authority. Such an implementation will accept any certificate, which leaves the application vulnerable to Man-in-the-middle attacks. The\ncorrect solution is to provide an appropriate trust store.</p>\n<p>This rule raises an issue when an implementation of <code>X509TrustManager</code> never throws exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {  // Noncompliant, nothing means trust any client\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { // Noncompliant, this method never throws exception, it means trust any client\n        LOG.log(Level.SEVERE, ERROR_MESSAGE);\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a6"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4787",
        "repo": "squid",
        "name": "Encrypting data is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902\">CVE-2017-7902</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378\">CVE-2006-1378</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376\">CVE-2003-1376</a> </li>\n</ul>\n<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.</p>\n<p> </p>\n<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>\n  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>\n  <li> the key exchange is made without properly authenticating the receiver. </li>\n  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. </li>\n  <li> the chosen encryption library is deemed unsafe. </li>\n  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>\n  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  </li>\n  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. </li>\n  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Generate encryption keys using secure random algorithms. </li>\n  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  </li>\n  <li> Regenerate the keys regularly. </li>\n  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>\n  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>\n  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. </li>\n  <li> When a nonce is used, generate it randomly every time. </li>\n  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>\n  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>\n  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    <ul>\n      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n    </ul> </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === javax.crypto ===\nimport javax.crypto.Cipher;\nCipher c = Cipher.getInstance(...);  // Questionable\n\n// === apache.commons.crypto ===\nimport java.util.Properties;\nimport org.apache.commons.crypto.utils.Utils;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;\n\nProperties properties = new Properties();\nproperties.setProperty(CryptoCipherFactory.CLASSES_KEY, CipherProvider.OPENSSL.getClassName());\nfinal String transform = \"AES/CBC/PKCS5Padding\";\nUtils.getCipherInstance(transform, properties);  // Questionable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/321.html\">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/322.html\">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/323.html\">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/324.html\">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/325.html\">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/522.html\">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>\n  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902\">CVE-2017-7902</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378\">CVE-2006-1378</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376\">CVE-2003-1376</a> </li>\n</ul>\n<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.</p>\n<p> </p>\n<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>\n  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>\n  <li> the key exchange is made without properly authenticating the receiver. </li>\n  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. </li>\n  <li> the chosen encryption library is deemed unsafe. </li>\n  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>\n  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  </li>\n  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. </li>\n  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Generate encryption keys using secure random algorithms. </li>\n  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  </li>\n  <li> Regenerate the keys regularly. </li>\n  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>\n  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>\n  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. </li>\n  <li> When a nonce is used, generate it randomly every time. </li>\n  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>\n  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>\n  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    <ul>\n      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n    </ul> </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === javax.crypto ===\nimport javax.crypto.Cipher;\nCipher c = Cipher.getInstance(...);  // Questionable\n\n// === apache.commons.crypto ===\nimport java.util.Properties;\nimport org.apache.commons.crypto.utils.Utils;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;\n\nProperties properties = new Properties();\nproperties.setProperty(CryptoCipherFactory.CLASSES_KEY, CipherProvider.OPENSSL.getClassName());\nfinal String transform = \"AES/CBC/PKCS5Padding\";\nUtils.getCipherInstance(transform, properties);  // Questionable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/321.html\">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/322.html\">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/323.html\">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/324.html\">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/325.html\">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/522.html\">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>\n  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3",
            "owasp-a6",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S4423",
        "repo": "squid",
        "name": "Weak SSL protocols should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>javax.net.ssl.SSLContext.getInstance</code> returns a SSLContext object that implements the specified secure socket protocol. However, not\nall protocols are created equal and some legacy ones like \"SSL\", have been proven to be insecure.</p>\n<p>This rule raises an issue when an <code>SSLContext</code> is created with an insecure protocol (ie: a protocol different from \"TLS\", \"DTLS\",\n\"TLSv1.2\", \"DTLSv1.2\", \"TLSv1.3\", \"DTLSv1.3\").</p>\n<p>The recommended value is \"TLS\" or \"DTLS\" as it will always use the latest version of the protocol. However an issue will be raised if the bytecode\nwas compiled with JDK7 or an even older version of JDK because they are not alias for TLSv1.2 and DTLSv1.2 but for weaker protocols.</p>\n<p>Note that calling <code>SSLContext.getInstance(...)</code> with \"TLSv1.2\" or \"DTLSv1.2\" doesn't prevent protocol version negotiation. For example,\nif a client connects with \"TLSv1.1\" and the server used <code>SSLContext.getInstance(\"TLSv1.2\")</code>, the connection will use \"TLSv1.1\". It is\npossible to enable only specific protocol versions by calling <code>setEnabledProtocols</code> on <code>SSLSocket</code>, <code>SSLServerSocket</code>\nor <code>SSLEngine</code>. However this should be rarely needed as clients usually ask for the most secure protocol supported.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncontext = SSLContext.getInstance(\"SSL\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncontext = SSLContext.getInstance(\"TLSv1.2\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https\">Diagnosing TLS, SSL, and HTTPS</a> </li>\n</ul>",
        "mdDesc": "<p><code>javax.net.ssl.SSLContext.getInstance</code> returns a SSLContext object that implements the specified secure socket protocol. However, not\nall protocols are created equal and some legacy ones like \"SSL\", have been proven to be insecure.</p>\n<p>This rule raises an issue when an <code>SSLContext</code> is created with an insecure protocol (ie: a protocol different from \"TLS\", \"DTLS\",\n\"TLSv1.2\", \"DTLSv1.2\", \"TLSv1.3\", \"DTLSv1.3\").</p>\n<p>The recommended value is \"TLS\" or \"DTLS\" as it will always use the latest version of the protocol. However an issue will be raised if the bytecode\nwas compiled with JDK7 or an even older version of JDK because they are not alias for TLSv1.2 and DTLSv1.2 but for weaker protocols.</p>\n<p>Note that calling <code>SSLContext.getInstance(...)</code> with \"TLSv1.2\" or \"DTLSv1.2\" doesn't prevent protocol version negotiation. For example,\nif a client connects with \"TLSv1.1\" and the server used <code>SSLContext.getInstance(\"TLSv1.2\")</code>, the connection will use \"TLSv1.1\". It is\npossible to enable only specific protocol versions by calling <code>setEnabledProtocols</code> on <code>SSLSocket</code>, <code>SSLServerSocket</code>\nor <code>SSLEngine</code>. However this should be rarely needed as clients usually ask for the most secure protocol supported.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncontext = SSLContext.getInstance(\"SSL\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncontext = SSLContext.getInstance(\"TLSv1.2\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https\">Diagnosing TLS, SSL, and HTTPS</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3",
            "owasp-a6",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4544",
        "repo": "squid",
        "name": "Using unsafe Jackson deserialization configuration is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution. </p>\n<p>This rule raises an issue when:</p>\n<p>- <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or\n<code>org.codehaus.jackson.map.ObjectMapper</code></p>\n<p>- or when the annotation <code>@JsonTypeInfo</code> is set at class or field levels and configured with <code>use = JsonTypeInfo.Id.CLASS)</code>\nor <code>use = Id.MINIMAL_CLASS</code></p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Consider using @JsonTypeInfo instead of enabling globally PTH </li>\n  <li> Use @JsonTypeInfo(use = Id.NAME) instead </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping(); // Noncompliant\n</pre>\n<pre>\n@JsonTypeInfo(use = Id.CLASS) // Noncompliant\nabstract class PhoneNumber {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>- use the latest patch versions of <code>jackson-databind</code> blocking the already discovered \"deserialization gadgets\"</p>\n<p>- avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code></p>\n<p>- use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use = Id.\nMINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code></p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Don’t\n  Panic</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15095\">CVE-2017-1509</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7525\">CVE-2017-7525</a> </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n</ul>",
        "mdDesc": "<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution. </p>\n<p>This rule raises an issue when:</p>\n<p>- <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or\n<code>org.codehaus.jackson.map.ObjectMapper</code></p>\n<p>- or when the annotation <code>@JsonTypeInfo</code> is set at class or field levels and configured with <code>use = JsonTypeInfo.Id.CLASS)</code>\nor <code>use = Id.MINIMAL_CLASS</code></p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Consider using @JsonTypeInfo instead of enabling globally PTH </li>\n  <li> Use @JsonTypeInfo(use = Id.NAME) instead </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping(); // Noncompliant\n</pre>\n<pre>\n@JsonTypeInfo(use = Id.CLASS) // Noncompliant\nabstract class PhoneNumber {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>- use the latest patch versions of <code>jackson-databind</code> blocking the already discovered \"deserialization gadgets\"</p>\n<p>- avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code></p>\n<p>- use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use = Id.\nMINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code></p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Don’t\n  Panic</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15095\">CVE-2017-1509</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7525\">CVE-2017-7525</a> </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1158",
        "repo": "squid",
        "name": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>",
        "mdDesc": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2127",
        "repo": "squid",
        "name": "\"Double.longBitsToDouble\" should not be used for \"int\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the\nmathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>",
        "mdDesc": "<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the\nmathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4426",
        "repo": "squid",
        "name": "Cryptographic keys should not be too short",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force attacks.\nFor the <code>Blowfish</code> algorithm the key should be at least 128 bits long, while for the <code>RSA</code> algorithm it should be at least 2048\nbits long.</p>\n<p>This rule raises an issue when a Blowfish key generator or RSA key-pair generator is initialized with too small a length parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nKeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(64); // Noncompliant\n\nKeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen.initialize(512); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nKeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(128);\n\nKeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen.initialize(2048);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE\">BLOWFISH_KEY_SIZE</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE\">RSA_KEY_SIZE</a> </li>\n</ul>",
        "mdDesc": "<p>When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force attacks.\nFor the <code>Blowfish</code> algorithm the key should be at least 128 bits long, while for the <code>RSA</code> algorithm it should be at least 2048\nbits long.</p>\n<p>This rule raises an issue when a Blowfish key generator or RSA key-pair generator is initialized with too small a length parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nKeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(64); // Noncompliant\n\nKeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen.initialize(512); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nKeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(128);\n\nKeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen.initialize(2048);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE\">BLOWFISH_KEY_SIZE</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE\">RSA_KEY_SIZE</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1157",
        "repo": "squid",
        "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>",
        "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2245",
        "repo": "squid",
        "name": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use generates a value which can be predicted (pseudo-random). </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>You are at risk if you answered yes to the first question and any of the following ones.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a cryptographically strong random number generator (RNG) like \"java.security.SecureRandom\" in place of this PRNG. </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\nRandom random = new Random(); // Questionable use of Random\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/338.html\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/310\">MITRE, CWE-310</a> - Cryptographic Issues </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mAFqAQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qw4\">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom\n  numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/WYIyAQ\">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom\n  numbers </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>",
        "mdDesc": "<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use generates a value which can be predicted (pseudo-random). </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>You are at risk if you answered yes to the first question and any of the following ones.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a cryptographically strong random number generator (RNG) like \"java.security.SecureRandom\" in place of this PRNG. </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\nRandom random = new Random(); // Questionable use of Random\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/338.html\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/310\">MITRE, CWE-310</a> - Cryptographic Issues </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mAFqAQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qw4\">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom\n  numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/WYIyAQ\">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom\n  numbers </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S3577",
        "repo": "squid",
        "name": "Test classes should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n}\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression against which test class names are checked.",
                "defaultValue": "^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4425",
        "repo": "squid",
        "name": "\"Integer.toHexString\" should not be used to build hexadecimal strings",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted\ninto <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>\n<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>\n<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704.html\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\">BAD_HEXA_CONVERSION</a> </li>\n</ul>",
        "mdDesc": "<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted\ninto <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>\n<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>\n<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704.html\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\">BAD_HEXA_CONVERSION</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:LabelsShouldNotBeUsedCheck",
        "repo": "squid",
        "name": "Labels should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>",
        "mdDesc": "<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1119",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1155",
        "repo": "squid",
        "name": "Collection.isEmpty() should be used to test for emptiness",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>",
        "mdDesc": "<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2122",
        "repo": "squid",
        "name": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>\nto zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>",
        "mdDesc": "<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>\nto zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1153",
        "repo": "squid",
        "name": "String.valueOf() should not be appended to a String",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>",
        "mdDesc": "<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2123",
        "repo": "squid",
        "name": "Values should not be uselessly incremented",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>",
        "mdDesc": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3330",
        "repo": "squid",
        "name": "\"HttpOnly\" should be set on cookies",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>HttpOnly</code> cookie attribute tells the browser to prevent client-side scripts from reading cookies with the attribute, and its use\ncan go a long way to defending against Cross-Site Scripting (XSS) attacks. Thus, as a precaution, the attribute should be set by default on all\ncookies set server-side, such as session id cookies.</p>\n<p>When implementing Cross Site Request Forgery (XSRF) protection, a JavaScript-readable session cookie, generally named XSRF-TOKEN, should be created\non the first HTTP GET request. For such a cookie, the <code>HttpOnly</code> attribute should be set to \"false\".</p>\n<p>Setting the attribute can be done either programmatically, or globally via configuration files. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie cookie = new Cookie(\"myCookieName\", value); // Noncompliant; by default cookie.isHttpOnly() is returning false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie cookie = new Cookie(\"myCookieName\", value);\ncookie.setHttpOnly(true); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79</a> - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1004.html\">CWE-1004</a> - Sensitive Cookie Without 'HttpOnly' Flag </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n</ul>",
        "mdDesc": "<p>The <code>HttpOnly</code> cookie attribute tells the browser to prevent client-side scripts from reading cookies with the attribute, and its use\ncan go a long way to defending against Cross-Site Scripting (XSS) attacks. Thus, as a precaution, the attribute should be set by default on all\ncookies set server-side, such as session id cookies.</p>\n<p>When implementing Cross Site Request Forgery (XSRF) protection, a JavaScript-readable session cookie, generally named XSRF-TOKEN, should be created\non the first HTTP GET request. For such a cookie, the <code>HttpOnly</code> attribute should be set to \"false\".</p>\n<p>Setting the attribute can be done either programmatically, or globally via configuration files. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie cookie = new Cookie(\"myCookieName\", value); // Noncompliant; by default cookie.isHttpOnly() is returning false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie cookie = new Cookie(\"myCookieName\", value);\ncookie.setHttpOnly(true); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79</a> - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1004.html\">CWE-1004</a> - Sensitive Cookie Without 'HttpOnly' Flag </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a7",
            "sans-top25-insecure"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3331",
        "repo": "squid",
        "name": "Cookie domains should be as narrow as possible",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A cookie's domain specifies which websites should be able to read it. Left blank, browsers are supposed to only send the cookie to sites that\nexactly match the sending domain. For example, if a cookie was set by <em>lovely.dream.com</em>, it should only be readable by that domain, and not by\n<em>nightmare.com</em> or even <em>strange.dream.com</em>. If you want to allow sub-domain access for a cookie, you can specify it by adding a dot in\nfront of the cookie's domain, like so: <em>.dream.com</em>. But cookie domains should always use at least two levels.</p>\n<p>Cookie domains can be set either programmatically or via configuration. This rule raises an issue when any cookie domain is set with a single\nlevel, as in <em>.com</em>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".com\"); // Noncompliant\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".com\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\"); // Compliant; by default, cookies are only returned to the server that sent them.\n\n// or\n\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".myDomain.com\"); // Compliant\n\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".myDomain.com\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
        "mdDesc": "<p>A cookie's domain specifies which websites should be able to read it. Left blank, browsers are supposed to only send the cookie to sites that\nexactly match the sending domain. For example, if a cookie was set by <em>lovely.dream.com</em>, it should only be readable by that domain, and not by\n<em>nightmare.com</em> or even <em>strange.dream.com</em>. If you want to allow sub-domain access for a cookie, you can specify it by adding a dot in\nfront of the cookie's domain, like so: <em>.dream.com</em>. But cookie domains should always use at least two levels.</p>\n<p>Cookie domains can be set either programmatically or via configuration. This rule raises an issue when any cookie domain is set with a single\nlevel, as in <em>.com</em>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".com\"); // Noncompliant\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".com\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\"); // Compliant; by default, cookies are only returned to the server that sent them.\n\n// or\n\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".myDomain.com\"); // Compliant\n\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".myDomain.com\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a7"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S4784",
        "repo": "squid",
        "name": "Using regular expressions is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021\">CVE-2017-16021</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863\">CVE-2018-13863</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926\">CVE-2018-8926</a> </li>\n</ul>\n<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>\n<p> </p>\n<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions\nsuch as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that\nwith every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>\n<p>Evaluating user-provided strings as regular expressions opens the door to <a\nhref=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service (ReDoS)</a> attacks. In the\ncontext of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the\nservice inaccessible to genuine users.</p>\n<p> </p>\n<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe\ninput by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting\ndangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags\nin some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=\"test\"&gt;</code>.</p>\n<p> </p>\n<p>This rule flags any regular expression execution or compilation for review.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>\n  <li> a user can provide a string which will be analyzed by a regular expression. </li>\n  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>\n  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>\n</ul>\n<p>You may be at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>\n<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine you're are using.</p>\n<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to\nmake complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the\ninput if no anchors are used. In PHP for example <code>preg_match(\"/[A-Za-z0-9]+/\", $text)</code> will accept any string containing at least one\nalphanumeric character because it has no anchors.</p>\n<h2>Questionable Code Example</h2>\n<pre>\nimport java.util.regex.Pattern;\n\nclass BasePattern {\n  String regex; // a regular expression\n  String input; // a user input\n\n  void foo(CharSequence htmlString) {\n    input.matches(regex);  // Questionable\n    Pattern.compile(regex);  // Questionable\n    Pattern.compile(regex, Pattern.CASE_INSENSITIVE);  // Questionable\n\n    String replacement = \"test\";\n    input.replaceAll(regex, replacement);  // Questionable\n    input.replaceFirst(regex, replacement);  // Questionable\n\n    if (!Pattern.matches(\".*&lt;script&gt;.*\", htmlString)) { // Questionable, even if the pattern is hard-coded\n    }\n  }\n}\n</pre>\n<p>This also applies for bean validation, where regexp can be specified:</p>\n<pre>\nimport java.io.Serializable;\nimport javax.validation.constraints.Pattern;\nimport javax.validation.constraints.Email;\nimport org.hibernate.validator.constraints.URL;\n\nclass BeansRegex implements Serializable {\n  @Pattern(regexp=\".+@.+\")  // Questionable\n  private String email;\n\n  @Email(regexp=\".+@.+\")  // Questionable\n  private String email2;\n\n  @URL(regexp=\".*\") // Questionable\n  private String url;\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calls to <code>java.util.regex.Pattern.matcher(...)</code>, <code>java.util.regex.Pattern.split(...)</code> and all methods of\n<code>java.util.regex.Matcher</code> are not highlighted as the pattern compilation is already highlighted.</p>\n<p>Calls to <code>String.split(regex)</code> and <code>String.split(regex, limit)</code> will not raise an exception despite their use of a regular\nexpression. These methods are used most of the time to split on a single character, which doesn't create any vulnerability.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">MITRA, CWE-624</a> - Executable Regular Expression Error\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/185.html\">MITRA, CWE-185</a> - Incorrect Regular Expression </li>\n  <li> OWASP Regular expression Denial of Service - ReDoS </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021\">CVE-2017-16021</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863\">CVE-2018-13863</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926\">CVE-2018-8926</a> </li>\n</ul>\n<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>\n<p> </p>\n<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions\nsuch as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that\nwith every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>\n<p>Evaluating user-provided strings as regular expressions opens the door to <a\nhref=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service (ReDoS)</a> attacks. In the\ncontext of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the\nservice inaccessible to genuine users.</p>\n<p> </p>\n<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe\ninput by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting\ndangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags\nin some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=\"test\"&gt;</code>.</p>\n<p> </p>\n<p>This rule flags any regular expression execution or compilation for review.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>\n  <li> a user can provide a string which will be analyzed by a regular expression. </li>\n  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>\n  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>\n</ul>\n<p>You may be at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>\n<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine you're are using.</p>\n<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to\nmake complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the\ninput if no anchors are used. In PHP for example <code>preg_match(\"/[A-Za-z0-9]+/\", $text)</code> will accept any string containing at least one\nalphanumeric character because it has no anchors.</p>\n<h2>Questionable Code Example</h2>\n<pre>\nimport java.util.regex.Pattern;\n\nclass BasePattern {\n  String regex; // a regular expression\n  String input; // a user input\n\n  void foo(CharSequence htmlString) {\n    input.matches(regex);  // Questionable\n    Pattern.compile(regex);  // Questionable\n    Pattern.compile(regex, Pattern.CASE_INSENSITIVE);  // Questionable\n\n    String replacement = \"test\";\n    input.replaceAll(regex, replacement);  // Questionable\n    input.replaceFirst(regex, replacement);  // Questionable\n\n    if (!Pattern.matches(\".*&lt;script&gt;.*\", htmlString)) { // Questionable, even if the pattern is hard-coded\n    }\n  }\n}\n</pre>\n<p>This also applies for bean validation, where regexp can be specified:</p>\n<pre>\nimport java.io.Serializable;\nimport javax.validation.constraints.Pattern;\nimport javax.validation.constraints.Email;\nimport org.hibernate.validator.constraints.URL;\n\nclass BeansRegex implements Serializable {\n  @Pattern(regexp=\".+@.+\")  // Questionable\n  private String email;\n\n  @Email(regexp=\".+@.+\")  // Questionable\n  private String email2;\n\n  @URL(regexp=\".*\") // Questionable\n  private String url;\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calls to <code>java.util.regex.Pattern.matcher(...)</code>, <code>java.util.regex.Pattern.split(...)</code> and all methods of\n<code>java.util.regex.Matcher</code> are not highlighted as the pattern compilation is already highlighted.</p>\n<p>Calls to <code>String.split(regex)</code> and <code>String.split(regex, limit)</code> will not raise an exception despite their use of a regular\nexpression. These methods are used most of the time to split on a single character, which doesn't create any vulnerability.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">MITRA, CWE-624</a> - Executable Regular Expression Error\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/185.html\">MITRA, CWE-185</a> - Incorrect Regular Expression </li>\n  <li> OWASP Regular expression Denial of Service - ReDoS </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2129",
        "repo": "squid",
        "name": "Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for\neverything else.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\n</pre>\n<h2>Exceptions</h2>\n<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting\nvalue. See <a href='/coding_rules#rule_key=squid%3AS2111'>S2111</a>.</p>",
        "mdDesc": "<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for\neverything else.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\n</pre>\n<h2>Exceptions</h2>\n<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting\nvalue. See {rule:squid:S2111}.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1150",
        "repo": "squid",
        "name": "Enumeration should not be implemented",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>",
        "mdDesc": "<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "obsolete"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1151",
        "repo": "squid",
        "name": "\"switch case\" clauses should not have too many lines of code",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>",
        "mdDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum number of lines",
                "defaultValue": "5",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00100",
        "repo": "squid",
        "name": "Method names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded. </p>\n<pre>\n@Override\npublic int Do_Something(){...}\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded. </p>\n<pre>\n@Override\npublic int Do_Something(){...}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S100",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the method names against.",
                "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S00101",
        "repo": "squid",
        "name": "Class names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>",
        "mdDesc": "<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S101",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the class names against.",
                "defaultValue": "^[A-Z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4435",
        "repo": "squid",
        "name": "XML transformers should be secured",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>An XML External Entity or XSLT External Entity (XXE) vulnerability can occur when a <code>javax.xml.transform.Transformer</code> is created without\nenabling \"Secure Processing\" or when one is created without disabling external DTDs. If that external entity is hijacked by an attacker it may lead to\nthe disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the\nparser is located, and other system impacts.</p>\n<p>This rule raises an issue when a <code>Transformer</code> is created without either of these settings.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTransformer transformer = TransformerFactory.newInstance().newTransformer();\ntransformer.transform(input, result);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);\n</pre>\n<p>or</p>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> Improper Restriction of XML External Entity Reference ('XXE') </li>\n  <li> OWASP Top 10 2017 Category A4 - XML External Entities </li>\n  <li> [OWASP XXE cheat sheet| https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet#TransformerFactory] </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_DTD_TRANSFORM_FACTORY\">XXE_DTD_TRANSFORM_FACTORY</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XSLT_TRANSFORM_FACTORY\">XXE_XSLT_TRANSFORM_FACTORY</a>\n  </li>\n</ul>",
        "mdDesc": "<p>An XML External Entity or XSLT External Entity (XXE) vulnerability can occur when a <code>javax.xml.transform.Transformer</code> is created without\nenabling \"Secure Processing\" or when one is created without disabling external DTDs. If that external entity is hijacked by an attacker it may lead to\nthe disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the\nparser is located, and other system impacts.</p>\n<p>This rule raises an issue when a <code>Transformer</code> is created without either of these settings.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTransformer transformer = TransformerFactory.newInstance().newTransformer();\ntransformer.transform(input, result);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);\n</pre>\n<p>or</p>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> Improper Restriction of XML External Entity Reference ('XXE') </li>\n  <li> OWASP Top 10 2017 Category A4 - XML External Entities </li>\n  <li> [OWASP XXE cheat sheet| https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet#TransformerFactory] </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_DTD_TRANSFORM_FACTORY\">XXE_DTD_TRANSFORM_FACTORY</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XSLT_TRANSFORM_FACTORY\">XXE_XSLT_TRANSFORM_FACTORY</a>\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a4"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S923",
        "repo": "squid",
        "name": "Functions should not be defined with a variable number of arguments",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>As stated per effective java : </p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>\n  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4CW\">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>\n</ul>",
        "mdDesc": "<p>As stated per effective java : </p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>\n  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4CW\">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>\n</ul>",
        "severity": "INFO",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2258",
        "repo": "squid",
        "name": "\"javax.crypto.NullCipher\" should not be used for anything other than testing",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>By contract, the <code>NullCipher</code> class provides an \"identity cipher\" <del></del> one that does not transform or encrypt the plaintext in\nany way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc = new NullCipher();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>By contract, the <code>NullCipher</code> class provides an \"identity cipher\" <del></del> one that does not transform or encrypt the plaintext in\nany way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc = new NullCipher();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4797",
        "repo": "squid",
        "name": "Handling files is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358\">CVE-2018-0358</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560\">CVE-2017-7560</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015\">CVE-2005-4015</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835\">CVE-2018-3835</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008\">CVE-2018-8008</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320\">CVE-2010-2320</a> </li>\n</ul>\n<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also\nextremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a\nfile content must be always done with caution as they could have been tampered with.</p>\n<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software\nfrom opening files. Filling the storage space will also prevent any additional write from happening.</p>\n<p>This rule flags code that initiates the use of files. It does not highlight how the files are used as this is often done in external libraries or\nvia abstractions like <code>InputStream</code>. It focuses instead on the creation of <code>java.io.File</code> or equivalent from a\n<code>String</code>. This action indicates that one or multiple files will be processed just after this code. The goal is to guide manual security\ncode reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>\n  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information\n  could be given by displaying an error if the file/directory does not exist or just by returning an \"Unauthorized\" error when the file/directory\n  exists but the person can't perform an action. </li>\n  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and\n  displaying the output. </li>\n  <li> a file or directory may be created with the wrong permissions. </li>\n  <li> an unvalidated user input is written into a file. </li>\n  <li> a file is read and its content is used without being validated. </li>\n  <li> a file is read and its content is exposed to an unauthorized person. </li>\n  <li> a file is open, created or written into each time a user performs an action. </li>\n  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming\n  language (example: C, C++). </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an\nunauthorized directory or file. See <a href=\"https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)\">OWASP\nrecommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>\n<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the\ncontent of unauthorized directories.</p>\n<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a\nvulnerability or at least expose file and directory names.</p>\n<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access\nthe files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be\nrestricted from the very beginning.</p>\n<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It\ncould also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated\nbefore being written.</p>\n<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input\nshould be performed on file content.</p>\n<p>Once a file is read, its content should only be exposed to authorized users.</p>\n<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of\nService attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file\ndescriptors by closing files as soon as possible.</p>\n<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>\n<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by\nthe parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a\nfile but is still able to modify it via the inherited file descriptor. Check your language documentation for \"file descriptor leak\" or the use of the\nflags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:\nC, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,\nRust, VB6 and VB.NET.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n// === java.io.File ===\nimport java.io.File;\n\nclass A {\n    void foo(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception {\n\n        // Questionable: check what is done with this file\n        new File(strPath);\n        new File(StrParent, StrChild);\n        new File(uri);\n        File.createTempFile(prefix, suffix);\n    }\n}\n</pre>\n<pre>\n// === java.nio.file ===\nimport java.nio.file.attribute.FileAttribute;\nimport java.nio.file.*;\n\nclass A {\n    void foo(FileSystem fileSystem, java.net.URI uri, String part1, String part2, String prefix, FileAttribute&lt;?&gt; attrs,\n            String suffix) throws Exception {\n        Path path = Paths.get(part1, part2); // Questionable\n        Path path2 = Paths.get(uri); // Questionable\n\n        Iterable&lt;Path&gt; paths = fileSystem.getRootDirectories(); // Questionable\n        Path path3 = fileSystem.getPath(part1, part2); // Questionable\n\n        Path path4 = Files.createTempDirectory(prefix, attrs); // Questionable\n        Path path5 = Files.createTempFile(prefix, suffix, attrs); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Opening file from a string path ===\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.RandomAccessFile;\n\nclass A {\n    void foo(String mode) throws Exception {\n        FileReader reader = new FileReader(\"test.txt\"); // Questionable\n        FileInputStream instream = new FileInputStream(\"test.txt\"); // Questionable\n        FileWriter writer = new FileWriter(\"out.txt\"); // Questionable\n        FileOutputStream outstream = new FileOutputStream(\"out2.txt\"); // Questionable\n        RandomAccessFile file = new RandomAccessFile(\"test.txt\", mode); // Questionable\n    }\n}\n</pre>\n<pre>\n// ===  org.apache.commons.io.FileUtils ===\nimport org.apache.commons.io.FileUtils;\n\nclass A {\n    void foo() {\n        FileUtils.getFile(\"test.txt\"); // Questionable\n        FileUtils.getTempDirectory(); // Questionable\n        FileUtils.getUserDirectory(); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Guava ===\nimport java.nio.charset.Charset;\n\nimport com.google.common.io.FileBackedOutputStream;\nimport com.google.common.io.MoreFiles;\nimport com.google.common.io.Resources;\nimport com.google.common.io.Files;\nimport com.google.common.io.LineProcessor;\n\nclass M {\n    void foo(java.net.URL url, Charset charset, java.io.OutputStream stream, String resourceName, Class&lt;?&gt; contextClass,\n            LineProcessor&lt;Object&gt; callback, int fileThreshold, boolean resetOnFinalize) throws Exception {\n\n        Files.createTempDir(); // Questionable\n        Files.fileTreeTraverser(); // Questionable (removed from public API in Guava 25.0)\n        Files.fileTraverser(); // Questionable\n        MoreFiles.directoryTreeTraverser(); // Questionable (removed from public API in Guava 25.0)\n        MoreFiles.fileTraverser(); // Questionable\n        Resources.asByteSource(url); // Questionable\n        Resources.asCharSource(url, charset); // Questionable\n        Resources.copy(url, stream); // Questionable\n        Resources.getResource(contextClass, resourceName); // Questionable\n        Resources.getResource(resourceName); // Questionable\n        Resources.readLines(url, charset); // Questionable\n        Resources.readLines(url, charset, callback); // Questionable\n        Resources.toByteArray(url); // Questionable\n        Resources.toString(url, charset); // Questionable\n\n        // these OutputStreams creates files\n        new FileBackedOutputStream(fileThreshold); // Questionable\n        new FileBackedOutputStream(fileThreshold, resetOnFinalize); // Questionable\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't highlight any function call receiving a <code>Path</code> or <code>File</code> arguments as the arguments themselves have been\nhighlighted before.</p>\n<p>For example we highlight new <code>File(String parent, String child)</code> but not new <code>File(File parent, String child)</code> as the parent\n<code>File</code> should have been flagged earlier.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/73\">MITRE, CWE-73</a> - External Control of File Name or Path </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/22\">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/538\">MITRE, CWE-538</a> - File and Directory Information Exposure </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/403\">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File\n  Descriptor Leak') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4HWAw\">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQU\">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes\">CERT, FIO22-C.</a> Close files before\n  spawning processes </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358\">CVE-2018-0358</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560\">CVE-2017-7560</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015\">CVE-2005-4015</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835\">CVE-2018-3835</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008\">CVE-2018-8008</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320\">CVE-2010-2320</a> </li>\n</ul>\n<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also\nextremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a\nfile content must be always done with caution as they could have been tampered with.</p>\n<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software\nfrom opening files. Filling the storage space will also prevent any additional write from happening.</p>\n<p>This rule flags code that initiates the use of files. It does not highlight how the files are used as this is often done in external libraries or\nvia abstractions like <code>InputStream</code>. It focuses instead on the creation of <code>java.io.File</code> or equivalent from a\n<code>String</code>. This action indicates that one or multiple files will be processed just after this code. The goal is to guide manual security\ncode reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>\n  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information\n  could be given by displaying an error if the file/directory does not exist or just by returning an \"Unauthorized\" error when the file/directory\n  exists but the person can't perform an action. </li>\n  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and\n  displaying the output. </li>\n  <li> a file or directory may be created with the wrong permissions. </li>\n  <li> an unvalidated user input is written into a file. </li>\n  <li> a file is read and its content is used without being validated. </li>\n  <li> a file is read and its content is exposed to an unauthorized person. </li>\n  <li> a file is open, created or written into each time a user performs an action. </li>\n  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming\n  language (example: C, C++). </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an\nunauthorized directory or file. See <a href=\"https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)\">OWASP\nrecommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>\n<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the\ncontent of unauthorized directories.</p>\n<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a\nvulnerability or at least expose file and directory names.</p>\n<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access\nthe files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be\nrestricted from the very beginning.</p>\n<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It\ncould also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated\nbefore being written.</p>\n<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input\nshould be performed on file content.</p>\n<p>Once a file is read, its content should only be exposed to authorized users.</p>\n<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of\nService attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file\ndescriptors by closing files as soon as possible.</p>\n<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>\n<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by\nthe parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a\nfile but is still able to modify it via the inherited file descriptor. Check your language documentation for \"file descriptor leak\" or the use of the\nflags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:\nC, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,\nRust, VB6 and VB.NET.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n// === java.io.File ===\nimport java.io.File;\n\nclass A {\n    void foo(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception {\n\n        // Questionable: check what is done with this file\n        new File(strPath);\n        new File(StrParent, StrChild);\n        new File(uri);\n        File.createTempFile(prefix, suffix);\n    }\n}\n</pre>\n<pre>\n// === java.nio.file ===\nimport java.nio.file.attribute.FileAttribute;\nimport java.nio.file.*;\n\nclass A {\n    void foo(FileSystem fileSystem, java.net.URI uri, String part1, String part2, String prefix, FileAttribute&lt;?&gt; attrs,\n            String suffix) throws Exception {\n        Path path = Paths.get(part1, part2); // Questionable\n        Path path2 = Paths.get(uri); // Questionable\n\n        Iterable&lt;Path&gt; paths = fileSystem.getRootDirectories(); // Questionable\n        Path path3 = fileSystem.getPath(part1, part2); // Questionable\n\n        Path path4 = Files.createTempDirectory(prefix, attrs); // Questionable\n        Path path5 = Files.createTempFile(prefix, suffix, attrs); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Opening file from a string path ===\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.RandomAccessFile;\n\nclass A {\n    void foo(String mode) throws Exception {\n        FileReader reader = new FileReader(\"test.txt\"); // Questionable\n        FileInputStream instream = new FileInputStream(\"test.txt\"); // Questionable\n        FileWriter writer = new FileWriter(\"out.txt\"); // Questionable\n        FileOutputStream outstream = new FileOutputStream(\"out2.txt\"); // Questionable\n        RandomAccessFile file = new RandomAccessFile(\"test.txt\", mode); // Questionable\n    }\n}\n</pre>\n<pre>\n// ===  org.apache.commons.io.FileUtils ===\nimport org.apache.commons.io.FileUtils;\n\nclass A {\n    void foo() {\n        FileUtils.getFile(\"test.txt\"); // Questionable\n        FileUtils.getTempDirectory(); // Questionable\n        FileUtils.getUserDirectory(); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Guava ===\nimport java.nio.charset.Charset;\n\nimport com.google.common.io.FileBackedOutputStream;\nimport com.google.common.io.MoreFiles;\nimport com.google.common.io.Resources;\nimport com.google.common.io.Files;\nimport com.google.common.io.LineProcessor;\n\nclass M {\n    void foo(java.net.URL url, Charset charset, java.io.OutputStream stream, String resourceName, Class&lt;?&gt; contextClass,\n            LineProcessor&lt;Object&gt; callback, int fileThreshold, boolean resetOnFinalize) throws Exception {\n\n        Files.createTempDir(); // Questionable\n        Files.fileTreeTraverser(); // Questionable (removed from public API in Guava 25.0)\n        Files.fileTraverser(); // Questionable\n        MoreFiles.directoryTreeTraverser(); // Questionable (removed from public API in Guava 25.0)\n        MoreFiles.fileTraverser(); // Questionable\n        Resources.asByteSource(url); // Questionable\n        Resources.asCharSource(url, charset); // Questionable\n        Resources.copy(url, stream); // Questionable\n        Resources.getResource(contextClass, resourceName); // Questionable\n        Resources.getResource(resourceName); // Questionable\n        Resources.readLines(url, charset); // Questionable\n        Resources.readLines(url, charset, callback); // Questionable\n        Resources.toByteArray(url); // Questionable\n        Resources.toString(url, charset); // Questionable\n\n        // these OutputStreams creates files\n        new FileBackedOutputStream(fileThreshold); // Questionable\n        new FileBackedOutputStream(fileThreshold, resetOnFinalize); // Questionable\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't highlight any function call receiving a <code>Path</code> or <code>File</code> arguments as the arguments themselves have been\nhighlighted before.</p>\n<p>For example we highlight new <code>File(String parent, String child)</code> but not new <code>File(File parent, String child)</code> as the parent\n<code>File</code> should have been flagged earlier.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/73\">MITRE, CWE-73</a> - External Control of File Name or Path </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/22\">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/538\">MITRE, CWE-538</a> - File and Directory Information Exposure </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/403\">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File\n  Descriptor Leak') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4HWAw\">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQU\">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes\">CERT, FIO22-C.</a> Close files before\n  spawning processes </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a1",
            "owasp-a3",
            "sans-top25-porous",
            "sans-top25-risky"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2259",
        "repo": "squid",
        "name": "Null pointers should not be dereferenced",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used\non the parameter to <code>equals</code>, which by contract should always work with null.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "mdDesc": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used\non the parameter to <code>equals</code>, which by contract should always work with null.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4434",
        "repo": "squid",
        "name": "LDAP deserialization should be disabled",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>JNDI supports the deserialization of objects from LDAP directories, which is fundamentally insecure and can lead to remote code execution.</p>\n<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, // Noncompliant; allows deserialization\n            deref));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false,\n            deref));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING\">LDAP_ENTRY_POISONING</a> </li>\n</ul>",
        "mdDesc": "<p>JNDI supports the deserialization of objects from LDAP directories, which is fundamentally insecure and can lead to remote code execution.</p>\n<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, // Noncompliant; allows deserialization\n            deref));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false,\n            deref));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING\">LDAP_ENTRY_POISONING</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1166",
        "repo": "squid",
        "name": "Exception handlers should preserve the original exceptions",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>\n</ul>",
        "mdDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "error-handling",
            "owasp-a10",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "exceptions",
                "htmlDesc": "List of exceptions which should not be checked",
                "defaultValue": "java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1168",
        "repo": "squid",
        "name": "Empty arrays and collections should be returned instead of null",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AgG7AQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zwHEAw\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>",
        "mdDesc": "<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AgG7AQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zwHEAw\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2133",
        "repo": "squid",
        "name": "Objects should not be created only to \"getClass\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>",
        "mdDesc": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2254",
        "repo": "squid",
        "name": "\"HttpServletRequest.getRequestedSessionId()\" should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged to prevent hijacking of active sessions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n</ul>",
        "mdDesc": "<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged to prevent hijacking of active sessions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a2",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2257",
        "repo": "squid",
        "name": "Using non-standard cryptographic algorithms is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>",
        "mdDesc": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1d",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1d",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1d",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1d",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S3346",
        "repo": "squid",
        "name": "Expressions used in \"assert\" should not produce side effects",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/vwG7AQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side\n  effects </li>\n</ul>",
        "mdDesc": "<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/vwG7AQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side\n  effects </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2134",
        "repo": "squid",
        "name": "Classes extending java.lang.Thread should override the \"run\" method",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Java API documentation:</p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the\n<code>Thread</code> class is not well understood.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call\n<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule\nconsequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a\nproper <code>Runnable</code> target.</p>\n<pre>\nclass MyThread extends Thread { // Compliant - calling super constructor with a Runnable\n  MyThread(Runnable target) {\n    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>According to the Java API documentation:</p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the\n<code>Thread</code> class is not well understood.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call\n<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule\nconsequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a\nproper <code>Runnable</code> target.</p>\n<pre>\nclass MyThread extends Thread { // Compliant - calling super constructor with a Runnable\n  MyThread(Runnable target) {\n    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed\n    // ...\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4551",
        "repo": "squid",
        "name": "Enum values should be compared with \"==\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows \"==\"\nshould not be used to compare the content of an Object. At the same time, using \"==\" on enums:</p>\n<p>- provides the same expected comparison (content) as <code>equals</code></p>\n<p>- is more null-safe than equals()</p>\n<p>- provides compile-time (static) checking rather than runtime checking</p>\n<p>For these reasons, use of \"==\" should be preferred to <code>equals</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html\">Use == (or !=) to Compare Java\n  Enums</a> </li>\n</ul>",
        "mdDesc": "<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows \"==\"\nshould not be used to compare the content of an Object. At the same time, using \"==\" on enums:</p>\n<p>- provides the same expected comparison (content) as <code>equals</code></p>\n<p>- is more null-safe than equals()</p>\n<p>- provides compile-time (static) checking rather than runtime checking</p>\n<p>For these reasons, use of \"==\" should be preferred to <code>equals</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html\">Use == (or !=) to Compare Java\n  Enums</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1165",
        "repo": "squid",
        "name": "Exception classes should be immutable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>",
        "mdDesc": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2131",
        "repo": "squid",
        "name": "Primitives should not be boxed just for \"String\" conversion",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>",
        "mdDesc": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2255",
        "repo": "squid",
        "name": "Using cookies is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772\">CVE-2018-7772</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085\">CVE-2018-10085</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537\">CVE-2016-6537</a> </li>\n</ul>\n<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>\n<ul>\n  <li> sensitive information written by the server will be exposed. </li>\n  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>\n</ul>\n<p>This rule flags code that reads or writes cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sensitive information is stored inside the cookie. </li>\n  <li> cookie values are used without being first sanitized. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the\nuser session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer\nthan the user session.</p>\n<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the\noriginal information will be exposed.</p>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> every information read from a cookie before using them.</p>\n<p>Using cookies only for session IDs doesn't make them secure. Follow <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">OWASP best practices</a> when you configure your cookies.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n// === javax.servlet ===\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JavaxServlet {\n    void aServiceMethodSettingCookie(HttpServletRequest request, HttpServletResponse response, String acctID) {\n        Cookie cookie = new Cookie(\"userAccountID\", acctID);  // Questionable\n        response.addCookie(cookie);  // Questionable\n\n        cookie.getValue();  // Questionable. Check how the value is used.\n    }\n}\n</pre>\n<pre>\n// === javax.ws ===\nimport java.util.Date;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.NewCookie;\n\nclass JavaxWs {\n    void jaxRsCookie(String comment, int maxAge, boolean secure, Date expiry, boolean httpOnly, String name,\n            String value, String path, String domain, int version) {\n        Cookie cookie= new Cookie(\"name\", \"value\");  // Questionable\n        cookie.getValue();  // Questionable\n\n        new NewCookie(cookie);  // Questionable\n        new NewCookie(cookie, comment, maxAge, secure);\n        new NewCookie(cookie, comment, maxAge, expiry, secure, httpOnly);\n        new NewCookie(name, value);\n        new NewCookie(name, value, path, domain, version, comment, maxAge, secure);\n        new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);\n        new NewCookie(name, value, path, domain, comment, maxAge, secure);\n        new NewCookie(name, value, path, domain, comment, maxAge, secure, httpOnly);\n    }\n}\n</pre>\n<pre>\n// === java.net ===\nimport java.net.HttpCookie;\n\nclass JavaNet {\n    void httpCookie(HttpCookie hc) {\n        HttpCookie cookie = new HttpCookie(\"name\", \"value\");  // Questionable\n        cookie.setValue(\"value\");  // Questionable\n        cookie.getValue();  // Questionable\n    }\n}\n</pre>\n<pre>\n// === apache.shiro ===\nimport org.apache.shiro.web.servlet.SimpleCookie;\n\nclass ApacheShiro {\n\n    void shiroCookie(SimpleCookie cookie) {\n        SimpleCookie sc = new SimpleCookie(cookie);  // Questionable\n        cookie.setValue(\"value\");  // Questionable\n        cookie.getValue();  // Questionable\n    }\n}\n</pre>\n<pre>\n// === spring ===\nimport org.springframework.security.web.savedrequest.SavedCookie;\nimport org.springframework.web.bind.annotation.CookieValue;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport javax.servlet.http.Cookie;\n\nclass Spring {\n    @RequestMapping(\"/mypage.html\")\n    // Questionable. “myCookie” value is read from a cookie.\n    public String myPage(@CookieValue(\"cookieName\") String myCookie) {\n        return \"test\";\n    }\n\n    void springCookie(Cookie cookie) {\n        SavedCookie savedCookie = new SavedCookie(cookie); // Questionable\n        cookie.getValue(); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Play ===\nimport play.mvc.Http.Cookie;\nimport play.mvc.Http.CookieBuilder;\nimport scala.language;\n\n\nclass Play {\n    void playCookie(Cookie cookie) {\n        cookie.value();  // Questionable\n\n        CookieBuilder builder = Cookie.builder(\"name\", \"value\");  // Questionable\n        builder.withName(\"name\")\n          .withValue(\"value\")  // Questionable\n          .build();\n\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/312.html\">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/315.html\">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/565.html\">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side\">CERT,\n  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE\">COOKIE_USAGE</a> </li>\n</ul>",
        "mdDesc": "<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772\">CVE-2018-7772</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085\">CVE-2018-10085</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537\">CVE-2016-6537</a> </li>\n</ul>\n<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>\n<ul>\n  <li> sensitive information written by the server will be exposed. </li>\n  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>\n</ul>\n<p>This rule flags code that reads or writes cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sensitive information is stored inside the cookie. </li>\n  <li> cookie values are used without being first sanitized. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the\nuser session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer\nthan the user session.</p>\n<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the\noriginal information will be exposed.</p>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> every information read from a cookie before using them.</p>\n<p>Using cookies only for session IDs doesn't make them secure. Follow <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">OWASP best practices</a> when you configure your cookies.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n// === javax.servlet ===\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JavaxServlet {\n    void aServiceMethodSettingCookie(HttpServletRequest request, HttpServletResponse response, String acctID) {\n        Cookie cookie = new Cookie(\"userAccountID\", acctID);  // Questionable\n        response.addCookie(cookie);  // Questionable\n\n        cookie.getValue();  // Questionable. Check how the value is used.\n    }\n}\n</pre>\n<pre>\n// === javax.ws ===\nimport java.util.Date;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.NewCookie;\n\nclass JavaxWs {\n    void jaxRsCookie(String comment, int maxAge, boolean secure, Date expiry, boolean httpOnly, String name,\n            String value, String path, String domain, int version) {\n        Cookie cookie= new Cookie(\"name\", \"value\");  // Questionable\n        cookie.getValue();  // Questionable\n\n        new NewCookie(cookie);  // Questionable\n        new NewCookie(cookie, comment, maxAge, secure);\n        new NewCookie(cookie, comment, maxAge, expiry, secure, httpOnly);\n        new NewCookie(name, value);\n        new NewCookie(name, value, path, domain, version, comment, maxAge, secure);\n        new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);\n        new NewCookie(name, value, path, domain, comment, maxAge, secure);\n        new NewCookie(name, value, path, domain, comment, maxAge, secure, httpOnly);\n    }\n}\n</pre>\n<pre>\n// === java.net ===\nimport java.net.HttpCookie;\n\nclass JavaNet {\n    void httpCookie(HttpCookie hc) {\n        HttpCookie cookie = new HttpCookie(\"name\", \"value\");  // Questionable\n        cookie.setValue(\"value\");  // Questionable\n        cookie.getValue();  // Questionable\n    }\n}\n</pre>\n<pre>\n// === apache.shiro ===\nimport org.apache.shiro.web.servlet.SimpleCookie;\n\nclass ApacheShiro {\n\n    void shiroCookie(SimpleCookie cookie) {\n        SimpleCookie sc = new SimpleCookie(cookie);  // Questionable\n        cookie.setValue(\"value\");  // Questionable\n        cookie.getValue();  // Questionable\n    }\n}\n</pre>\n<pre>\n// === spring ===\nimport org.springframework.security.web.savedrequest.SavedCookie;\nimport org.springframework.web.bind.annotation.CookieValue;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport javax.servlet.http.Cookie;\n\nclass Spring {\n    @RequestMapping(\"/mypage.html\")\n    // Questionable. “myCookie” value is read from a cookie.\n    public String myPage(@CookieValue(\"cookieName\") String myCookie) {\n        return \"test\";\n    }\n\n    void springCookie(Cookie cookie) {\n        SavedCookie savedCookie = new SavedCookie(cookie); // Questionable\n        cookie.getValue(); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Play ===\nimport play.mvc.Http.Cookie;\nimport play.mvc.Http.CookieBuilder;\nimport scala.language;\n\n\nclass Play {\n    void playCookie(Cookie cookie) {\n        cookie.value();  // Questionable\n\n        CookieBuilder builder = Cookie.builder(\"name\", \"value\");  // Questionable\n        builder.withName(\"name\")\n          .withValue(\"value\")  // Questionable\n          .build();\n\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/312.html\">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/315.html\">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/565.html\">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side\">CERT,\n  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE\">COOKIE_USAGE</a> </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a1",
            "owasp-a3",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2252",
        "repo": "squid",
        "name": "Loop conditions should be true at least once",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>",
        "mdDesc": "<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4432",
        "repo": "squid",
        "name": "AES encryption algorithm should be used with secured mode",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Some combinations are not secured:</p>\n<ul>\n  <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it does\n  not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic\n  protocols at all. </li>\n  <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n</ul>\n<p>In both cases, Galois/Counter Mode (GCM) with no padding should be preferred.</p>\n<p>This rule raises an issue when a <code>Cipher</code> instance is created with either ECB or CBC/PKCS5Padding mode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c1 = Cipher.getInstance(\"AES/ECB/NoPadding\"); // Noncompliant\nCipher c2 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">Recommendation for Block Cipher Modes of Operation</a>\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#ECB_MODE\">ECB_MODE</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE\">PADDING_ORACLE</a> </li>\n</ul>",
        "mdDesc": "<p>The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Some combinations are not secured:</p>\n<ul>\n  <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it does\n  not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic\n  protocols at all. </li>\n  <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n</ul>\n<p>In both cases, Galois/Counter Mode (GCM) with no padding should be preferred.</p>\n<p>This rule raises an issue when a <code>Cipher</code> instance is created with either ECB or CBC/PKCS5Padding mode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c1 = Cipher.getInstance(\"AES/ECB/NoPadding\"); // Noncompliant\nCipher c2 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">Recommendation for Block Cipher Modes of Operation</a>\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#ECB_MODE\">ECB_MODE</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE\">PADDING_ORACLE</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a6",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4433",
        "repo": "squid",
        "name": "LDAP connections should be authenticated",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>An un-authenticated LDAP connection can lead to transactions without access control. Authentication, and with it, access control, are the last line\nof defense against LDAP injections and should not be disabled.</p>\n<p>This rule raises an issue when an LDAP connection is created with <code>Context.SECURITY_AUTHENTICATION</code> set to <code>\"none\"</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use anonymous authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\"); // Noncompliant\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use simple authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"simple\");\nenv.put(Context.SECURITY_PRINCIPAL, \"cn=S. User, ou=NewHires, o=JNDITutorial\");\nenv.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521.html\">CWE-521</a> - Weak Password Requirements </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/jndi/ldap/authentication.html\">Modes of Authenticating to LDAP</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS\">LDAP_ANONYMOUS</a> </li>\n</ul>",
        "mdDesc": "<p>An un-authenticated LDAP connection can lead to transactions without access control. Authentication, and with it, access control, are the last line\nof defense against LDAP injections and should not be disabled.</p>\n<p>This rule raises an issue when an LDAP connection is created with <code>Context.SECURITY_AUTHENTICATION</code> set to <code>\"none\"</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use anonymous authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\"); // Noncompliant\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use simple authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"simple\");\nenv.put(Context.SECURITY_PRINCIPAL, \"cn=S. User, ou=NewHires, o=JNDITutorial\");\nenv.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521.html\">CWE-521</a> - Weak Password Requirements </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/jndi/ldap/authentication.html\">Modes of Authenticating to LDAP</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS\">LDAP_ANONYMOUS</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a2"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1163",
        "repo": "squid",
        "name": "Exceptions should not be thrown in finally blocks",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/soUbAQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n  </li>\n</ul>",
        "mdDesc": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/soUbAQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "error-handling",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2253",
        "repo": "squid",
        "name": "Track uses of disallowed methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>",
        "mdDesc": "<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": true,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "methodName",
                "htmlDesc": "Name of the forbidden method",
                "type": "STRING"
            },
            {
                "key": "className",
                "htmlDesc": "Name of the class whose method is forbidden",
                "type": "STRING"
            },
            {
                "key": "argumentTypes",
                "htmlDesc": "Comma-delimited list of argument types, E.G. java.lang.String, int[], int",
                "type": "STRING"
            },
            {
                "key": "allOverloads",
                "htmlDesc": "Set to true to flag all overloads regardless of parameter type",
                "defaultValue": "false",
                "type": "BOOLEAN"
            }
        ],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:LeftCurlyBraceEndLineCheck",
        "repo": "squid",
        "name": "An open curly brace should be located at the end of a line",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1105",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2139",
        "repo": "squid",
        "name": "Exceptions should be either logged or rethrown but not both",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or\nrethrown, not both.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<p>or </p>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n</pre>",
        "mdDesc": "<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or\nrethrown, not both.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<p>or </p>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S818",
        "repo": "squid",
        "name": "Literal suffixes should be upper case",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>\n  <li> MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
        "mdDesc": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>\n  <li> MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "convention",
            "misra",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "checkOnlyLong",
                "htmlDesc": "Set to &quot;true&quot; to ignore &quot;float&quot; and &quot;double&quot; declarations.",
                "defaultValue": "false",
                "type": "BOOLEAN"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1162",
        "repo": "squid",
        "name": "Checked exceptions should not be thrown",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>",
        "mdDesc": "<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2250",
        "repo": "squid",
        "name": "Collection methods with O(n) performance should be used carefully",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. </p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>",
        "mdDesc": "<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. </p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3340",
        "repo": "squid",
        "name": "Annotation arguments should appear in the order in which they were declared",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@interface Pet {\n    String name();\n    String surname();\n}\n\n@Pet(surname =\"\", name=\"\") // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@interface Pet {\n    String name();\n    String surname();\n}\n\n@Pet(name =\"\", surname=\"\") // Compliant\n</pre>",
        "mdDesc": "<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@interface Pet {\n    String name();\n    String surname();\n}\n\n@Pet(surname =\"\", name=\"\") // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@interface Pet {\n    String name();\n    String surname();\n}\n\n@Pet(name =\"\", surname=\"\") // Compliant\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4790",
        "repo": "squid",
        "name": "Hashing data is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233\">CVE-2018-9233</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097\">CVE-2013-5097</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051\">CVE-2007-1051</a> </li>\n</ul>\n<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can\nsteal the original information by guessing it (ex: with a <a href=\"https://en.wikipedia.org/wiki/Rainbow_table\">rainbow table</a>), or replace the\noriginal data with another one having the same hash.</p>\n<p>This rule flags code that initiates hashing.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the hashed value is used in a security context. </li>\n  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\">salts</a> are not automatically generated and applied by the hashing function.\n  </li>\n  <li> any generated salts are cryptographically weak or not credential-specific. </li>\n</ul>\n<p>You are at risk if you answered yes to the first question and any of the following ones.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> for security related purposes, use only hashing algorithms which are <a\n  href=\"https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet\">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1\n  completely in security contexts. </li>\n  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>\n  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and\n  dictionary based attacks. </li>\n  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically\n  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.\n  </li>\n  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be\n  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored\n  hash. </li>\n  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are\n  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === MessageDigest ===\nimport java.security.MessageDigest;\nimport java.security.Provider;\n\nclass A {\n    void foo(String algorithm, String providerStr, Provider provider) throws Exception {\n        MessageDigest.getInstance(algorithm); // Questionable\n        MessageDigest.getInstance(algorithm, providerStr); // Questionable\n        MessageDigest.getInstance(algorithm, provider); // Questionable\n    }\n}\n</pre>\n<p>Regarding <code>SecretKeyFactory</code>. Any call to <code>SecretKeyFactory.getInstance(\"...\")</code> with an argument starting by\n<code>\"PBKDF2\"</code> will be highlighted. See <a href=\"https://www.owasp.org/index.php/Hashing_Java\">OWASP guidelines</a>, list of <a\nhref=\"https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory\">standard algorithms</a> and <a\nhref=\"https://developer.android.com/reference/javax/crypto/SecretKeyFactory\">algorithms on android</a>.</p>\n<pre>\n// === javax.crypto ===\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.SecretKeyFactory;\n\nclass A {\n    void foo(char[] password, byte[] salt, int iterationCount, int keyLength) throws Exception {\n        // Questionable. Review this, even if it is the way recommended by OWASP\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA512\");\n        PBEKeySpec spec = new PBEKeySpec(password, salt, iterationCount, keyLength);\n        factory.generateSecret(spec).getEncoded();\n    }\n}\n</pre>\n<p>Regarding Guava, only the hashing functions which are usually misused for sensitive data will raise an issue, i.e. <code>md5</code> and\n<code>sha*</code>.</p>\n<pre>\n// === Guava ===\nimport com.google.common.hash.Hashing;\n\nclass A {\n    void foo() {\n        Hashing.md5(); // Questionable\n        Hashing.sha1(); // Questionable\n        Hashing.sha256(); // Questionable\n        Hashing.sha384(); // Questionable\n        Hashing.sha512(); // Questionable\n    }\n}\n</pre>\n<pre>\n// === org.apache.commons ===\nimport org.apache.commons.codec.digest.DigestUtils;\n\nclass A {\n    void foo(String strName, byte[] data, String str, java.io.InputStream stream) throws Exception {\n        new DigestUtils(strName); // Questionable\n        new DigestUtils(); // Questionable\n\n        DigestUtils.getMd2Digest(); // Questionable\n        DigestUtils.getMd5Digest(); // Questionable\n        DigestUtils.getShaDigest(); // Questionable\n        DigestUtils.getSha1Digest(); // Questionable\n        DigestUtils.getSha256Digest(); // Questionable\n        DigestUtils.getSha384Digest(); // Questionable\n        DigestUtils.getSha512Digest(); // Questionable\n\n\n        DigestUtils.md2(data); // Questionable\n        DigestUtils.md2(stream); // Questionable\n        DigestUtils.md2(str); // Questionable\n        DigestUtils.md2Hex(data); // Questionable\n        DigestUtils.md2Hex(stream); // Questionable\n        DigestUtils.md2Hex(str); // Questionable\n\n        DigestUtils.md5(data); // Questionable\n        DigestUtils.md5(stream); // Questionable\n        DigestUtils.md5(str); // Questionable\n        DigestUtils.md5Hex(data); // Questionable\n        DigestUtils.md5Hex(stream); // Questionable\n        DigestUtils.md5Hex(str); // Questionable\n\n        DigestUtils.sha(data); // Questionable\n        DigestUtils.sha(stream); // Questionable\n        DigestUtils.sha(str); // Questionable\n        DigestUtils.shaHex(data); // Questionable\n        DigestUtils.shaHex(stream); // Questionable\n        DigestUtils.shaHex(str); // Questionable\n\n        DigestUtils.sha1(data); // Questionable\n        DigestUtils.sha1(stream); // Questionable\n        DigestUtils.sha1(str); // Questionable\n        DigestUtils.sha1Hex(data); // Questionable\n        DigestUtils.sha1Hex(stream); // Questionable\n        DigestUtils.sha1Hex(str); // Questionable\n\n        DigestUtils.sha256(data); // Questionable\n        DigestUtils.sha256(stream); // Questionable\n        DigestUtils.sha256(str); // Questionable\n        DigestUtils.sha256Hex(data); // Questionable\n        DigestUtils.sha256Hex(stream); // Questionable\n        DigestUtils.sha256Hex(str); // Questionable\n\n        DigestUtils.sha384(data); // Questionable\n        DigestUtils.sha384(stream); // Questionable\n        DigestUtils.sha384(str); // Questionable\n        DigestUtils.sha384Hex(data); // Questionable\n        DigestUtils.sha384Hex(stream); // Questionable\n        DigestUtils.sha384Hex(str); // Questionable\n\n        DigestUtils.sha512(data); // Questionable\n        DigestUtils.sha512(stream); // Questionable\n        DigestUtils.sha512(str); // Questionable\n        DigestUtils.sha512Hex(data); // Questionable\n        DigestUtils.sha512Hex(stream); // Questionable\n        DigestUtils.sha512Hex(str); // Questionable\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/916.html\">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/759.html\">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/760.html\">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233\">CVE-2018-9233</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097\">CVE-2013-5097</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051\">CVE-2007-1051</a> </li>\n</ul>\n<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can\nsteal the original information by guessing it (ex: with a <a href=\"https://en.wikipedia.org/wiki/Rainbow_table\">rainbow table</a>), or replace the\noriginal data with another one having the same hash.</p>\n<p>This rule flags code that initiates hashing.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the hashed value is used in a security context. </li>\n  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\">salts</a> are not automatically generated and applied by the hashing function.\n  </li>\n  <li> any generated salts are cryptographically weak or not credential-specific. </li>\n</ul>\n<p>You are at risk if you answered yes to the first question and any of the following ones.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> for security related purposes, use only hashing algorithms which are <a\n  href=\"https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet\">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1\n  completely in security contexts. </li>\n  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>\n  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and\n  dictionary based attacks. </li>\n  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically\n  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.\n  </li>\n  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be\n  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored\n  hash. </li>\n  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are\n  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === MessageDigest ===\nimport java.security.MessageDigest;\nimport java.security.Provider;\n\nclass A {\n    void foo(String algorithm, String providerStr, Provider provider) throws Exception {\n        MessageDigest.getInstance(algorithm); // Questionable\n        MessageDigest.getInstance(algorithm, providerStr); // Questionable\n        MessageDigest.getInstance(algorithm, provider); // Questionable\n    }\n}\n</pre>\n<p>Regarding <code>SecretKeyFactory</code>. Any call to <code>SecretKeyFactory.getInstance(\"...\")</code> with an argument starting by\n<code>\"PBKDF2\"</code> will be highlighted. See <a href=\"https://www.owasp.org/index.php/Hashing_Java\">OWASP guidelines</a>, list of <a\nhref=\"https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory\">standard algorithms</a> and <a\nhref=\"https://developer.android.com/reference/javax/crypto/SecretKeyFactory\">algorithms on android</a>.</p>\n<pre>\n// === javax.crypto ===\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.SecretKeyFactory;\n\nclass A {\n    void foo(char[] password, byte[] salt, int iterationCount, int keyLength) throws Exception {\n        // Questionable. Review this, even if it is the way recommended by OWASP\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA512\");\n        PBEKeySpec spec = new PBEKeySpec(password, salt, iterationCount, keyLength);\n        factory.generateSecret(spec).getEncoded();\n    }\n}\n</pre>\n<p>Regarding Guava, only the hashing functions which are usually misused for sensitive data will raise an issue, i.e. <code>md5</code> and\n<code>sha*</code>.</p>\n<pre>\n// === Guava ===\nimport com.google.common.hash.Hashing;\n\nclass A {\n    void foo() {\n        Hashing.md5(); // Questionable\n        Hashing.sha1(); // Questionable\n        Hashing.sha256(); // Questionable\n        Hashing.sha384(); // Questionable\n        Hashing.sha512(); // Questionable\n    }\n}\n</pre>\n<pre>\n// === org.apache.commons ===\nimport org.apache.commons.codec.digest.DigestUtils;\n\nclass A {\n    void foo(String strName, byte[] data, String str, java.io.InputStream stream) throws Exception {\n        new DigestUtils(strName); // Questionable\n        new DigestUtils(); // Questionable\n\n        DigestUtils.getMd2Digest(); // Questionable\n        DigestUtils.getMd5Digest(); // Questionable\n        DigestUtils.getShaDigest(); // Questionable\n        DigestUtils.getSha1Digest(); // Questionable\n        DigestUtils.getSha256Digest(); // Questionable\n        DigestUtils.getSha384Digest(); // Questionable\n        DigestUtils.getSha512Digest(); // Questionable\n\n\n        DigestUtils.md2(data); // Questionable\n        DigestUtils.md2(stream); // Questionable\n        DigestUtils.md2(str); // Questionable\n        DigestUtils.md2Hex(data); // Questionable\n        DigestUtils.md2Hex(stream); // Questionable\n        DigestUtils.md2Hex(str); // Questionable\n\n        DigestUtils.md5(data); // Questionable\n        DigestUtils.md5(stream); // Questionable\n        DigestUtils.md5(str); // Questionable\n        DigestUtils.md5Hex(data); // Questionable\n        DigestUtils.md5Hex(stream); // Questionable\n        DigestUtils.md5Hex(str); // Questionable\n\n        DigestUtils.sha(data); // Questionable\n        DigestUtils.sha(stream); // Questionable\n        DigestUtils.sha(str); // Questionable\n        DigestUtils.shaHex(data); // Questionable\n        DigestUtils.shaHex(stream); // Questionable\n        DigestUtils.shaHex(str); // Questionable\n\n        DigestUtils.sha1(data); // Questionable\n        DigestUtils.sha1(stream); // Questionable\n        DigestUtils.sha1(str); // Questionable\n        DigestUtils.sha1Hex(data); // Questionable\n        DigestUtils.sha1Hex(stream); // Questionable\n        DigestUtils.sha1Hex(str); // Questionable\n\n        DigestUtils.sha256(data); // Questionable\n        DigestUtils.sha256(stream); // Questionable\n        DigestUtils.sha256(str); // Questionable\n        DigestUtils.sha256Hex(data); // Questionable\n        DigestUtils.sha256Hex(stream); // Questionable\n        DigestUtils.sha256Hex(str); // Questionable\n\n        DigestUtils.sha384(data); // Questionable\n        DigestUtils.sha384(stream); // Questionable\n        DigestUtils.sha384(str); // Questionable\n        DigestUtils.sha384Hex(data); // Questionable\n        DigestUtils.sha384Hex(stream); // Questionable\n        DigestUtils.sha384Hex(str); // Questionable\n\n        DigestUtils.sha512(data); // Questionable\n        DigestUtils.sha512(stream); // Questionable\n        DigestUtils.sha512(str); // Questionable\n        DigestUtils.sha512Hex(data); // Questionable\n        DigestUtils.sha512Hex(stream); // Questionable\n        DigestUtils.sha512Hex(str); // Questionable\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/916.html\">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/759.html\">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/760.html\">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1161",
        "repo": "squid",
        "name": "\"@Override\" should be used on overriding and implementing methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>",
        "mdDesc": "<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2130",
        "repo": "squid",
        "name": "Parsing should be used to convert \"Strings\" to primitives",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n</pre>",
        "mdDesc": "<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2251",
        "repo": "squid",
        "name": "A \"for\" loop update clause should move the counter in the right direction",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>",
        "mdDesc": "<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1160",
        "repo": "squid",
        "name": "Public methods should throw at most one checked exception",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>",
        "mdDesc": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4792",
        "repo": "squid",
        "name": "Configuring loggers is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<p>See</p>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/532.html\">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/117.html\">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>\n<pre>\n// === Log4J 2 ===\nimport org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.core.*;\nimport org.apache.logging.log4j.core.config.*;\n\n// Questionable: creating a new custom configuration\nabstract class CustomConfigFactory extends ConfigurationFactory {\n    // ...\n}\n\nclass A {\n    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,\n            Appender appender, java.io.InputStream stream, java.net.URI uri,\n            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)\n            throws java.io.IOException {\n        // Creating a new custom configuration\n        ConfigurationBuilderFactory.newConfigurationBuilder();  // Questionable\n\n        // Setting loggers level can result in writing sensitive information in production\n        Configurator.setAllLevels(\"com.example\", Level.DEBUG);  // Questionable\n        Configurator.setLevel(\"com.example\", Level.DEBUG);  // Questionable\n        Configurator.setLevel(levelMap);  // Questionable\n        Configurator.setRootLevel(Level.DEBUG);  // Questionable\n\n        config.addAppender(appender); // Questionable: this modifies the configuration\n\n        LoggerConfig loggerConfig = config.getRootLogger();\n        loggerConfig.addAppender(appender, level, filter); // Questionable\n        loggerConfig.setLevel(level); // Questionable\n\n        context.setConfigLocation(uri); // Questionable\n\n        // Load the configuration from a stream or file\n        new ConfigurationSource(stream);  // Questionable\n        new ConfigurationSource(stream, file);  // Questionable\n        new ConfigurationSource(stream, url);  // Questionable\n        ConfigurationSource.fromResource(source, loader);  // Questionable\n        ConfigurationSource.fromUri(uri);  // Questionable\n    }\n}\n\n\n\n</pre>\n<pre>\n// === java.util.logging ===\nimport java.util.logging.*;\n\nclass M {\n    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)\n            throws SecurityException, java.io.IOException {\n        logManager.readConfiguration(is); // Questionable\n\n        logger.setLevel(Level.FINEST); // Questionable\n        logger.addHandler(handler); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Logback ===\nimport ch.qos.logback.classic.util.ContextInitializer;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.*;\n\nclass M {\n    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {\n        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, \"config.xml\"); // Questionable\n        JoranConfigurator configurator = new JoranConfigurator(); // Questionable\n\n        logger.addAppender(fileAppender); // Questionable\n        logger.setLevel(Level.DEBUG); // Questionable\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Log4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.</p>",
        "mdDesc": "<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<p>See</p>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/532.html\">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/117.html\">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>\n<pre>\n// === Log4J 2 ===\nimport org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.core.*;\nimport org.apache.logging.log4j.core.config.*;\n\n// Questionable: creating a new custom configuration\nabstract class CustomConfigFactory extends ConfigurationFactory {\n    // ...\n}\n\nclass A {\n    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,\n            Appender appender, java.io.InputStream stream, java.net.URI uri,\n            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)\n            throws java.io.IOException {\n        // Creating a new custom configuration\n        ConfigurationBuilderFactory.newConfigurationBuilder();  // Questionable\n\n        // Setting loggers level can result in writing sensitive information in production\n        Configurator.setAllLevels(\"com.example\", Level.DEBUG);  // Questionable\n        Configurator.setLevel(\"com.example\", Level.DEBUG);  // Questionable\n        Configurator.setLevel(levelMap);  // Questionable\n        Configurator.setRootLevel(Level.DEBUG);  // Questionable\n\n        config.addAppender(appender); // Questionable: this modifies the configuration\n\n        LoggerConfig loggerConfig = config.getRootLogger();\n        loggerConfig.addAppender(appender, level, filter); // Questionable\n        loggerConfig.setLevel(level); // Questionable\n\n        context.setConfigLocation(uri); // Questionable\n\n        // Load the configuration from a stream or file\n        new ConfigurationSource(stream);  // Questionable\n        new ConfigurationSource(stream, file);  // Questionable\n        new ConfigurationSource(stream, url);  // Questionable\n        ConfigurationSource.fromResource(source, loader);  // Questionable\n        ConfigurationSource.fromUri(uri);  // Questionable\n    }\n}\n\n\n\n</pre>\n<pre>\n// === java.util.logging ===\nimport java.util.logging.*;\n\nclass M {\n    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)\n            throws SecurityException, java.io.IOException {\n        logManager.readConfiguration(is); // Questionable\n\n        logger.setLevel(Level.FINEST); // Questionable\n        logger.addHandler(handler); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Logback ===\nimport ch.qos.logback.classic.util.ContextInitializer;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.*;\n\nclass M {\n    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {\n        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, \"config.xml\"); // Questionable\n        JoranConfigurator configurator = new JoranConfigurator(); // Questionable\n\n        logger.addAppender(fileAppender); // Questionable\n        logger.setLevel(Level.DEBUG); // Questionable\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Log4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.</p>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a10",
            "owasp-a3",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:AssignmentInSubExpressionCheck",
        "repo": "squid",
        "name": "Assignments should not be made from within sub-expressions",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n</ul>",
        "mdDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1121",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1774",
        "repo": "squid",
        "name": "The ternary operator should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>",
        "mdDesc": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2864",
        "repo": "squid",
        "name": "\"entrySet()\" should be iterated when both the key and value are needed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2629",
        "repo": "squid",
        "name": "\"Preconditions\" and logging arguments should not require evaluation",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>",
        "mdDesc": "<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4926",
        "repo": "squid",
        "name": "\"serialVersionUID\" should not be declared blindly",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>\ndocumentation but blindly following that recommendation can be harmful.</p>\n<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what's wrong.</p>\n<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>\n<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field\ndeclared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is\nchallenged and validated by the team.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable {\n  private static final long serialVersionUID = 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID = 8582433437601788991L;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Vojtech Ruzicka's Programming Blog: <a href=\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\">Should I explicitly declare\n  serialVersionUID?</a> </li>\n</ul>",
        "mdDesc": "<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>\ndocumentation but blindly following that recommendation can be harmful.</p>\n<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what's wrong.</p>\n<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>\n<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field\ndeclared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is\nchallenged and validated by the team.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable {\n  private static final long serialVersionUID = 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID = 8582433437601788991L;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Vojtech Ruzicka's Programming Blog: <a href=\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\">Should I explicitly declare\n  serialVersionUID?</a> </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall",
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4929",
        "repo": "squid",
        "name": "\"read(byte[],int,int)\" should be overridden",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement\nthe method <code>read()</code>. However most uses for such streams don't read a single byte at a time and the default implementation for\n<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>read(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn't provide an\noverride of <code>read(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>",
        "mdDesc": "<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement\nthe method <code>read()</code>. However most uses for such streams don't read a single byte at a time and the default implementation for\n<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>read(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn't provide an\noverride of <code>read(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:ObjectFinalizeCheck",
        "repo": "squid",
        "name": "The Object.finalize() method should not be called",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/586.html\">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "mdDesc": "<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/586.html\">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1111",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1659",
        "repo": "squid",
        "name": "Multiple variables should not be declared on the same line",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Declaring multiple variables on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n</ul>",
        "mdDesc": "<p>Declaring multiple variables on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "convention",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3958",
        "repo": "squid",
        "name": "Intermediate Stream methods should not be left unused",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
        "mdDesc": "<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3959",
        "repo": "squid",
        "name": "Consumed Stream pipelines should not be reused",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
        "mdDesc": "<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:ParsingError",
        "repo": "squid",
        "name": "Java parser failure",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>",
        "mdDesc": "<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S2260",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1656",
        "repo": "squid",
        "name": "Variables should not be self-assigned",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "3min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "3min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "3min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "3min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4925",
        "repo": "squid",
        "name": "\"Class.forName()\" should not load JDBC 4.0+ drivers",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.</p>\n<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>\n<ul>\n  <li> <code>com.mysql.jdbc.Driver</code> </li>\n  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>\n  <li> <code>com.sybase.jdbc.SybDriver</code> </li>\n  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>\n  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>\n  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>\n  <li> <code>org.postgresql.Driver</code> </li>\n  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>\n  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>\n  <li> <code>org.h2.Driver</code> </li>\n  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>\n  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME = \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection = DriverManager.getConnection(serverURI);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection = DriverManager.getConnection(serverURI);\n    }\n}\n</pre>",
        "mdDesc": "<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.</p>\n<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>\n<ul>\n  <li> <code>com.mysql.jdbc.Driver</code> </li>\n  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>\n  <li> <code>com.sybase.jdbc.SybDriver</code> </li>\n  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>\n  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>\n  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>\n  <li> <code>org.postgresql.Driver</code> </li>\n  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>\n  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>\n  <li> <code>org.h2.Driver</code> </li>\n  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>\n  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME = \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection = DriverManager.getConnection(serverURI);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection = DriverManager.getConnection(serverURI);\n    }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "obsolete"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1301",
        "repo": "squid",
        "name": "\"switch\" statements should have at least 3 \"case\" clauses",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>",
        "mdDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4817",
        "repo": "squid",
        "name": "Executing XPath expressions is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272\">CVE-2016-6272</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149\">CVE-2016-9149</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837\">CVE-2012-4837</a> </li>\n</ul>\n<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from\ntainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath\ninjections attacks can read sensitive information from the XML document.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XPATH expression might contain some unsafe input coming from a user. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize any user input before using it in an XPATH expression.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n// === javax.xml.xpath.XPath ===\nimport javax.xml.namespace.QName;\nimport javax.xml.xpath.XPath;\n\nimport org.xml.sax.InputSource;\n\nclass M {\n    void foo(XPath xpath, String expression, InputSource source, QName returnType, Object item) throws Exception {\n        xpath.compile(expression); // Questionable\n        xpath.evaluate(expression, source); // Questionable\n        xpath.evaluate(expression, source, returnType); // Questionable\n        xpath.evaluate(expression, item); // Questionable\n        xpath.evaluate(expression, item, returnType); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Apache XML Security ===\nimport org.apache.xml.utils.PrefixResolver;\nimport org.apache.xml.security.utils.XPathAPI;\nimport org.w3c.dom.Node;\n\nclass M {\n    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver,\n            Node xpathnode) throws Exception {\n        api.evaluate(contextNode, xpathnode, str, namespaceNode); // Questionable\n        api.selectNodeList(contextNode, xpathnode, str, namespaceNode); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Apache Xalan ===\nimport org.apache.xml.utils.PrefixResolver;\nimport org.apache.xpath.XPathAPI;\nimport org.w3c.dom.Node;\n\nclass M {\n    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver)\n            throws Exception {\n        XPathAPI.eval(contextNode, str); // Questionable\n        XPathAPI.eval(contextNode, str, namespaceNode); // Questionable\n        XPathAPI.eval(contextNode, str, prefixResolver); // Questionable\n        XPathAPI.selectNodeIterator(contextNode, str); // Questionable\n        XPathAPI.selectNodeIterator(contextNode, str, namespaceNode); // Questionable\n        XPathAPI.selectNodeList(contextNode, str); // Questionable\n        XPathAPI.selectNodeList(contextNode, str, namespaceNode); // Questionable\n        XPathAPI.selectSingleNode(contextNode, str); // Questionable\n        XPathAPI.selectSingleNode(contextNode, str, namespaceNode); // Questionable\n    }\n}\n</pre>\n<pre>\n// === org.apache.commons.jxpath ===\nimport org.apache.commons.jxpath.JXPathContext;\n\nabstract class A extends JXPathContext{\n    A(JXPathContext compilationContext, Object contextBean) {\n        super(compilationContext, contextBean);\n    }\n\n\n    void foo(JXPathContext context, String str, Object obj, Class&lt;?&gt; requiredType) {\n        JXPathContext.compile(str); // Questionable\n        this.compilePath(str); // Questionable\n        context.createPath(str); // Questionable\n        context.createPathAndSetValue(str, obj); // Questionable\n        context.getPointer(str); // Questionable\n        context.getValue(str); // Questionable\n        context.getValue(str, requiredType); // Questionable\n        context.iterate(str); // Questionable\n        context.iteratePointers(str); // Questionable\n        context.removeAll(str); // Questionable\n        context.removePath(str); // Questionable\n        context.selectNodes(str); // Questionable\n        context.selectSingleNode(str); // Questionable\n        context.setValue(str, obj); // Questionable\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/643\">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BwLEAw\">CERT, IDS53-J.</a> - Prevent XPath Injection </li>\n</ul>",
        "mdDesc": "<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272\">CVE-2016-6272</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149\">CVE-2016-9149</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837\">CVE-2012-4837</a> </li>\n</ul>\n<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from\ntainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath\ninjections attacks can read sensitive information from the XML document.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XPATH expression might contain some unsafe input coming from a user. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize any user input before using it in an XPATH expression.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n// === javax.xml.xpath.XPath ===\nimport javax.xml.namespace.QName;\nimport javax.xml.xpath.XPath;\n\nimport org.xml.sax.InputSource;\n\nclass M {\n    void foo(XPath xpath, String expression, InputSource source, QName returnType, Object item) throws Exception {\n        xpath.compile(expression); // Questionable\n        xpath.evaluate(expression, source); // Questionable\n        xpath.evaluate(expression, source, returnType); // Questionable\n        xpath.evaluate(expression, item); // Questionable\n        xpath.evaluate(expression, item, returnType); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Apache XML Security ===\nimport org.apache.xml.utils.PrefixResolver;\nimport org.apache.xml.security.utils.XPathAPI;\nimport org.w3c.dom.Node;\n\nclass M {\n    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver,\n            Node xpathnode) throws Exception {\n        api.evaluate(contextNode, xpathnode, str, namespaceNode); // Questionable\n        api.selectNodeList(contextNode, xpathnode, str, namespaceNode); // Questionable\n    }\n}\n</pre>\n<pre>\n// === Apache Xalan ===\nimport org.apache.xml.utils.PrefixResolver;\nimport org.apache.xpath.XPathAPI;\nimport org.w3c.dom.Node;\n\nclass M {\n    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver)\n            throws Exception {\n        XPathAPI.eval(contextNode, str); // Questionable\n        XPathAPI.eval(contextNode, str, namespaceNode); // Questionable\n        XPathAPI.eval(contextNode, str, prefixResolver); // Questionable\n        XPathAPI.selectNodeIterator(contextNode, str); // Questionable\n        XPathAPI.selectNodeIterator(contextNode, str, namespaceNode); // Questionable\n        XPathAPI.selectNodeList(contextNode, str); // Questionable\n        XPathAPI.selectNodeList(contextNode, str, namespaceNode); // Questionable\n        XPathAPI.selectSingleNode(contextNode, str); // Questionable\n        XPathAPI.selectSingleNode(contextNode, str, namespaceNode); // Questionable\n    }\n}\n</pre>\n<pre>\n// === org.apache.commons.jxpath ===\nimport org.apache.commons.jxpath.JXPathContext;\n\nabstract class A extends JXPathContext{\n    A(JXPathContext compilationContext, Object contextBean) {\n        super(compilationContext, contextBean);\n    }\n\n\n    void foo(JXPathContext context, String str, Object obj, Class&lt;?&gt; requiredType) {\n        JXPathContext.compile(str); // Questionable\n        this.compilePath(str); // Questionable\n        context.createPath(str); // Questionable\n        context.createPathAndSetValue(str, obj); // Questionable\n        context.getPointer(str); // Questionable\n        context.getValue(str); // Questionable\n        context.getValue(str, requiredType); // Questionable\n        context.iterate(str); // Questionable\n        context.iteratePointers(str); // Questionable\n        context.removeAll(str); // Questionable\n        context.removePath(str); // Questionable\n        context.selectNodes(str); // Questionable\n        context.selectSingleNode(str); // Questionable\n        context.setValue(str, obj); // Questionable\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/643\">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BwLEAw\">CERT, IDS53-J.</a> - Prevent XPath Injection </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a1"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1309",
        "repo": "squid",
        "name": "Track uses of \"@SuppressWarnings\" annotations",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>",
        "mdDesc": "<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>",
        "severity": "INFO",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "listOfWarnings",
                "htmlDesc": "Comma separated list of warnings that can be suppressed (example: unchecked, cast, boxing). An empty list means that no warning can be suppressed.",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2638",
        "repo": "squid",
        "name": "Method overrides should not change contracts",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>",
        "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4818",
        "repo": "squid",
        "name": "Using Sockets is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785\">CVE-2011-178</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645\">CVE-2017-5645</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597\">CVE-2018-6597</a> </li>\n</ul>\n<p>Sockets are vulnerable in multiple ways:</p>\n<ul>\n  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive\n  sensitive information or inject dangerous input. </li>\n  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>\n</ul>\n<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the\nuse of http connections.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sockets are created without any limit every time a user performs an action. </li>\n  <li> input received from sockets is used without being sanitized. </li>\n  <li> sensitive data is sent via sockets without being encrypted. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>\n  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> any input read from the socket. </li>\n  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === java.net ===\nimport java.net.Socket;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.ServerSocket;\nimport javax.net.SocketFactory;\n\nclass A {\n    void foo(SocketFactory factory, String address, int port, InetAddress localAddr, int localPort, boolean stream,\n            String host, Proxy proxy, int backlog, InetAddress bindAddr)\n            throws Exception {\n        new Socket(); // Questionable.\n        new Socket(address, port); // Questionable.\n        new Socket(address, port, localAddr, localPort); // Questionable.\n        new Socket(host, port, stream); // Questionable.\n        new Socket(proxy); // Questionable.\n        new Socket(host, port); // Questionable.\n        new Socket(host, port, stream); // Questionable.\n        new Socket(host, port, localAddr, localPort); // Questionable.\n\n        new ServerSocket(); // Questionable.\n        new ServerSocket(port); // Questionable.\n        new ServerSocket(port, backlog); // Questionable.\n        new ServerSocket(port, backlog, bindAddr); // Questionable.\n\n        factory.createSocket(); // Questionable\n    }\n}\n\nabstract class mySocketFactory extends SocketFactory { // Questionable. Review how the sockets are created.\n    // ...\n}\n</pre>\n<pre>\n// === java.nio.channels ===\nimport java.net.SocketAddress;\nimport java.nio.channels.AsynchronousChannelGroup;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.channels.ServerSocketChannel;\n\nclass A {\n    void foo(AsynchronousChannelGroup group, SocketAddress remote) throws Exception {\n        AsynchronousServerSocketChannel.open(); // Questionable.\n        AsynchronousServerSocketChannel.open(group); // Questionable.\n        AsynchronousSocketChannel.open(); // Questionable.\n        AsynchronousSocketChannel.open(group); // Questionable.\n        SocketChannel.open(); // Questionable.\n        SocketChannel.open(remote); // Questionable.\n        ServerSocketChannel.open(); // Questionable.\n    }\n}\n</pre>\n<pre>\n// === Netty ===\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.SocketChannel;\n\nclass CustomChannelInitializer extends ChannelInitializer&lt;ServerSocketChannel&gt; { // Questionable. Review how the SocketChannel is used.\n    @Override\n    protected void initChannel(ServerSocketChannel ch) throws Exception {\n    }\n}\n\nclass A {\n    void foo() {\n        new ChannelInitializer&lt;SocketChannel&gt;() {  // Questionable\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                // ...\n            }\n        };\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Information Exposure </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785\">CVE-2011-178</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645\">CVE-2017-5645</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597\">CVE-2018-6597</a> </li>\n</ul>\n<p>Sockets are vulnerable in multiple ways:</p>\n<ul>\n  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive\n  sensitive information or inject dangerous input. </li>\n  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>\n</ul>\n<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the\nuse of http connections.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sockets are created without any limit every time a user performs an action. </li>\n  <li> input received from sockets is used without being sanitized. </li>\n  <li> sensitive data is sent via sockets without being encrypted. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>\n  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> any input read from the socket. </li>\n  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === java.net ===\nimport java.net.Socket;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.ServerSocket;\nimport javax.net.SocketFactory;\n\nclass A {\n    void foo(SocketFactory factory, String address, int port, InetAddress localAddr, int localPort, boolean stream,\n            String host, Proxy proxy, int backlog, InetAddress bindAddr)\n            throws Exception {\n        new Socket(); // Questionable.\n        new Socket(address, port); // Questionable.\n        new Socket(address, port, localAddr, localPort); // Questionable.\n        new Socket(host, port, stream); // Questionable.\n        new Socket(proxy); // Questionable.\n        new Socket(host, port); // Questionable.\n        new Socket(host, port, stream); // Questionable.\n        new Socket(host, port, localAddr, localPort); // Questionable.\n\n        new ServerSocket(); // Questionable.\n        new ServerSocket(port); // Questionable.\n        new ServerSocket(port, backlog); // Questionable.\n        new ServerSocket(port, backlog, bindAddr); // Questionable.\n\n        factory.createSocket(); // Questionable\n    }\n}\n\nabstract class mySocketFactory extends SocketFactory { // Questionable. Review how the sockets are created.\n    // ...\n}\n</pre>\n<pre>\n// === java.nio.channels ===\nimport java.net.SocketAddress;\nimport java.nio.channels.AsynchronousChannelGroup;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.channels.ServerSocketChannel;\n\nclass A {\n    void foo(AsynchronousChannelGroup group, SocketAddress remote) throws Exception {\n        AsynchronousServerSocketChannel.open(); // Questionable.\n        AsynchronousServerSocketChannel.open(group); // Questionable.\n        AsynchronousSocketChannel.open(); // Questionable.\n        AsynchronousSocketChannel.open(group); // Questionable.\n        SocketChannel.open(); // Questionable.\n        SocketChannel.open(remote); // Questionable.\n        ServerSocketChannel.open(); // Questionable.\n    }\n}\n</pre>\n<pre>\n// === Netty ===\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.SocketChannel;\n\nclass CustomChannelInitializer extends ChannelInitializer&lt;ServerSocketChannel&gt; { // Questionable. Review how the SocketChannel is used.\n    @Override\n    protected void initChannel(ServerSocketChannel ch) throws Exception {\n    }\n}\n\nclass A {\n    void foo() {\n        new ChannelInitializer&lt;SocketChannel&gt;() {  // Questionable\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                // ...\n            }\n        };\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Information Exposure </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a3",
            "sans-top25-porous",
            "sans-top25-risky"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2639",
        "repo": "squid",
        "name": "Inappropriate regular expressions should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n\nString clean4 = str.replaceFirst(\".\",\"\"); // Noncompliant;\nString clean5 = str.replaceFirst(\"|\",\"_\"); // Noncompliant;\nString clean6 = str.replaceFirst(File.separator,\"\"); // Noncompliant;\n</pre>",
        "mdDesc": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n\nString clean4 = str.replaceFirst(\".\",\"\"); // Noncompliant;\nString clean5 = str.replaceFirst(\"|\",\"_\"); // Noncompliant;\nString clean6 = str.replaceFirst(File.separator,\"\"); // Noncompliant;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2757",
        "repo": "squid",
        "name": "\"=+\" should not be used instead of \"+=\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>",
        "mdDesc": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2637",
        "repo": "squid",
        "name": "\"@NonNull\" values should not be set to null",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "mdDesc": "<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2755",
        "repo": "squid",
        "name": "Untrusted XML should be parsed with a local, static DTD",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Allowing external entities in untrusted documents to be processed could lay your systems bare to attackers. Imagine if these entities were\nparsed:</p>\n<pre>\n&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n&lt;!ENTITY xxe SYSTEM \"http://www.attacker.com/text.txt\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</pre>\n<p>If you must parse untrusted XML, the best way to protect yourself is to use a local, static DTD during parsing and igore any DTD's included in\nincluded in the document.</p>\n<p>This rule raises an issue when any of the following are used without first disabling external entity processing:\n<code>javax.xml.validation.Validator</code>, JAXP's <code>DocumentBuilderFactory</code>, <code>SAXParserFactory</code>, Xerces 1 and Xerces 2 StAX's\n<code>XMLInputFactory</code> and <code>XMLReaderFactory</code>.</p>\n<p>To disable external entity processing for <code>XMLInputFactory</code>, configure one of the properties\n<code>XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES</code> or <code>XMLInputFactory.SUPPORT_DTD</code> to false.</p>\n<p>To disable external entity processing for <code>SAXParserFactory</code>, <code>XMLReader</code> or <code>DocumentBuilderFactory</code> configure\none of the properties <code>XMLConstants.FEATURE_SECURE_PROCESSING</code> or <code>\"http://apache.org/xml/features/disallow-doctype-decl\"</code> to\ntrue.</p>\n<p>To disable external entity processing for <code>Validator</code> , configure both properties <code>XMLConstants.ACCESS_EXTERNAL_DTD</code>,\n<code>XMLConstants.ACCESS_EXTERNAL_SCHEMA</code> to the empty string <code>\"\"</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/* Load XML stream and display content */\nString maliciousSample = \"xxe.xml\";\nXMLInputFactory factory = XMLInputFactory.newInstance();\n\ntry (FileInputStream fis = new FileInputStream(malicousSample)) {\n  // Load XML stream\n  XMLStreamReader xmlStreamReader = factory.createXMLStreamReader(fis);  // Noncompliant; reader is vulnerable\n\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/* Load XML stream and display content */\nString maliciousSample = \"xxe.xml\";\nXMLInputFactory factory = XMLInputFactory.newInstance();\n\n// disable external entities\nfactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\nfactory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\n\ntry (FileInputStream fis = new FileInputStream(malicousSample)) {\n    // Load XML stream\n    XMLStreamReader xmlStreamReader = factory.createXMLStreamReader(fis);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/827.html\">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A4 - XML External Entities (XXE) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet\">OWASP XXE Prevention Cheat Sheet</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XMLSTREAMREADER\">XXE_XMLSTREAMREADER</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_SAXPARSER\">XXE_SAXPARSER</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XMLREADER\">XXE_XMLREADER</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_DOCUMENT\">XXE_DOCUMENT</a> </li>\n</ul>",
        "mdDesc": "<p>Allowing external entities in untrusted documents to be processed could lay your systems bare to attackers. Imagine if these entities were\nparsed:</p>\n<pre>\n&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n&lt;!ENTITY xxe SYSTEM \"http://www.attacker.com/text.txt\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</pre>\n<p>If you must parse untrusted XML, the best way to protect yourself is to use a local, static DTD during parsing and igore any DTD's included in\nincluded in the document.</p>\n<p>This rule raises an issue when any of the following are used without first disabling external entity processing:\n<code>javax.xml.validation.Validator</code>, JAXP's <code>DocumentBuilderFactory</code>, <code>SAXParserFactory</code>, Xerces 1 and Xerces 2 StAX's\n<code>XMLInputFactory</code> and <code>XMLReaderFactory</code>.</p>\n<p>To disable external entity processing for <code>XMLInputFactory</code>, configure one of the properties\n<code>XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES</code> or <code>XMLInputFactory.SUPPORT_DTD</code> to false.</p>\n<p>To disable external entity processing for <code>SAXParserFactory</code>, <code>XMLReader</code> or <code>DocumentBuilderFactory</code> configure\none of the properties <code>XMLConstants.FEATURE_SECURE_PROCESSING</code> or <code>\"http://apache.org/xml/features/disallow-doctype-decl\"</code> to\ntrue.</p>\n<p>To disable external entity processing for <code>Validator</code> , configure both properties <code>XMLConstants.ACCESS_EXTERNAL_DTD</code>,\n<code>XMLConstants.ACCESS_EXTERNAL_SCHEMA</code> to the empty string <code>\"\"</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/* Load XML stream and display content */\nString maliciousSample = \"xxe.xml\";\nXMLInputFactory factory = XMLInputFactory.newInstance();\n\ntry (FileInputStream fis = new FileInputStream(malicousSample)) {\n  // Load XML stream\n  XMLStreamReader xmlStreamReader = factory.createXMLStreamReader(fis);  // Noncompliant; reader is vulnerable\n\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/* Load XML stream and display content */\nString maliciousSample = \"xxe.xml\";\nXMLInputFactory factory = XMLInputFactory.newInstance();\n\n// disable external entities\nfactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\nfactory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\n\ntry (FileInputStream fis = new FileInputStream(malicousSample)) {\n    // Load XML stream\n    XMLStreamReader xmlStreamReader = factory.createXMLStreamReader(fis);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/827.html\">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A4 - XML External Entities (XXE) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet\">OWASP XXE Prevention Cheat Sheet</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XMLSTREAMREADER\">XXE_XMLSTREAMREADER</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_SAXPARSER\">XXE_SAXPARSER</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XMLREADER\">XXE_XMLREADER</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_DOCUMENT\">XXE_DOCUMENT</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a4"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3725",
        "repo": "squid",
        "name": "Java 8's \"Files.exists\" should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. </p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8154077\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>",
        "mdDesc": "<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. </p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8154077\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8",
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1751",
        "repo": "squid",
        "name": "Loops with at most one iteration should be refactored",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  printf(\"i is %d\", i);\n  break;\n}\n...\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  printf(\"i is %d\", i);\n}\n...\nfor (int i = 0; i &lt; 10; i++) {\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n  }\n}\n</pre>",
        "mdDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  printf(\"i is %d\", i);\n  break;\n}\n...\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  printf(\"i is %d\", i);\n}\n...\nfor (int i = 0; i &lt; 10; i++) {\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1872",
        "repo": "squid",
        "name": "Classes should not be compared by name",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LAFlAQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>",
        "mdDesc": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LAFlAQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1994",
        "repo": "squid",
        "name": "\"for\" loop increment clauses should modify the loops' counters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or </p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>",
        "mdDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or </p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:CommentedOutCodeLine",
        "repo": "squid",
        "name": "Sections of code should not be commented out",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>",
        "mdDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S125",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "misra",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1871",
        "repo": "squid",
        "name": "Two branches in a conditional structure should not have exactly the same implementation",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif(a == 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule <a href='/coding_rules#rule_key=squid%3AS3923'>S3923</a> raises a bug. </p>\n<pre>\nif(a == 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a == 2) {\n  doSomething();\n}\n</pre>",
        "mdDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif(a == 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule {rule:squid:S3923} raises a bug. </p>\n<pre>\nif(a == 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a == 2) {\n  doSomething();\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1996",
        "repo": "squid",
        "name": "Files should contain only one top-level class or interface each",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>",
        "mdDesc": "<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "per extra type",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "per extra type",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3937",
        "repo": "squid",
        "name": "Number patterns should be regular",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint duos = 1_00_00;\nint million = 1_000_00_000;  // Noncompliant\nint thousand = 1000;\nint tenThousand = 100_00;  // Noncompliant\n</pre>",
        "mdDesc": "<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint duos = 1_00_00;\nint million = 1_000_00_000;  // Noncompliant\nint thousand = 1000;\nint tenThousand = 100_00;  // Noncompliant\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1643",
        "repo": "squid",
        "name": "Strings should not be concatenated using '+' in a loop",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>",
        "mdDesc": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1764",
        "repo": "squid",
        "name": "Identical expressions should not be used on both sides of a binary operator",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>",
        "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2973",
        "repo": "squid",
        "name": "Escaped Unicode characters should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = \"n\\u00E9e\"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = \"née\";\n</pre>",
        "mdDesc": "<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = \"n\\u00E9e\"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = \"née\";\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1641",
        "repo": "squid",
        "name": "Sets with elements that are enum values should be replaced with EnumSet",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>",
        "mdDesc": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2974",
        "repo": "squid",
        "name": "Classes without \"public\" constructors should be \"final\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>",
        "mdDesc": "<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1640",
        "repo": "squid",
        "name": "Maps with keys that are enum values should be replaced with EnumMap",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);\n  }\n}\n</pre>",
        "mdDesc": "<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2970",
        "repo": "squid",
        "name": "Assertions should be complete",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>",
        "mdDesc": "<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2972",
        "repo": "squid",
        "name": "Inner classes should not have too many lines of code",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>",
        "mdDesc": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "Max",
                "htmlDesc": "The maximum number of lines allowed",
                "defaultValue": "25",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2737",
        "repo": "squid",
        "name": "\"catch\" clauses should do more than rethrow",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>",
        "mdDesc": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "error-handling",
            "finding",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3822",
        "repo": "squid",
        "name": "Hibernate should not update database schemas",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of any value but <code>\"validate\"</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to\nbe changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the\n<code>\"validate\"</code> option, if it is used at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<p>or</p>\n<pre>\n&lt;session-factory&gt;\n  &lt;!-- Property deleted --&gt;\n&lt;/session-factory&gt;\n</pre>",
        "mdDesc": "<p>The use of any value but <code>\"validate\"</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to\nbe changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the\n<code>\"validate\"</code> option, if it is used at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<p>or</p>\n<pre>\n&lt;session-factory&gt;\n  &lt;!-- Property deleted --&gt;\n&lt;/session-factory&gt;\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "hibernate",
            "sql"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3824",
        "repo": "squid",
        "name": "\"Map.get\" and value test should be replaced with single method call",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> before proceeding with adding or changing\nthe value in the map. However the <code>java.util.Map</code> API offers a significantly better alternative in the form of the\n<code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these instead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>",
        "mdDesc": "<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> before proceeding with adding or changing\nthe value in the map. However the <code>java.util.Map</code> API offers a significantly better alternative in the form of the\n<code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these instead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1523",
        "repo": "squid",
        "name": "Dynamically executing code is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807\">CVE-2017-9807</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802\">CVE-2017-9802</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182\">CVE-2016-9182</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210\">CVE-2018-1000210</a> </li>\n</ul>\n<p>It is dangerous to let external sources either:</p>\n<ul>\n  <li> execute unknown code in your process. Such <a href=\"https://www.owasp.org/index.php/Code_Injection\">Injected Code</a> can either run on the\n  server or in the client (exemple: XSS attack). </li>\n  <li> select the code which will be executed via reflection. </li>\n</ul>\n<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>\n  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could\n  be retrieved by its name and this name comes from a user input. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a <a href=\"https://en.wikipedia.org/wiki/Sandbox_(computer_security)\">sandboxed</a> environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).</p>\n<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>\n<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what\ncode to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>\n<h2>Questionable Code Example</h2>\n<pre>\npublic class Reflection {\n\n    public static void run(java.lang.ClassLoader loader, String className, String methodName, String fieldName,\n            Class&lt;?&gt; parameterTypes)\n            throws NoSuchMethodException, SecurityException, ClassNotFoundException, NoSuchFieldException {\n\n        Class&lt;?&gt; clazz = Class.forName(className); // Questionable\n        clazz.getMethod(methodName, parameterTypes); // Questionable\n        clazz.getMethods(); // Questionable\n        clazz.getField(fieldName); // Questionable\n        clazz.getFields(); // Questionable\n        clazz.getDeclaredField(fieldName); // Questionable\n        clazz.getDeclaredFields(); // Questionable\n        clazz.getDeclaredClasses(); // Questionable\n\n        loader.loadClass(className); // Questionable\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calling reflection methods with a hard-coded type name, method name or field name will not raise an issue.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/470.html\">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code\n  ('Unsafe Reflection') </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
        "mdDesc": "<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807\">CVE-2017-9807</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802\">CVE-2017-9802</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182\">CVE-2016-9182</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210\">CVE-2018-1000210</a> </li>\n</ul>\n<p>It is dangerous to let external sources either:</p>\n<ul>\n  <li> execute unknown code in your process. Such <a href=\"https://www.owasp.org/index.php/Code_Injection\">Injected Code</a> can either run on the\n  server or in the client (exemple: XSS attack). </li>\n  <li> select the code which will be executed via reflection. </li>\n</ul>\n<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>\n  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could\n  be retrieved by its name and this name comes from a user input. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a <a href=\"https://en.wikipedia.org/wiki/Sandbox_(computer_security)\">sandboxed</a> environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).</p>\n<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>\n<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what\ncode to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>\n<h2>Questionable Code Example</h2>\n<pre>\npublic class Reflection {\n\n    public static void run(java.lang.ClassLoader loader, String className, String methodName, String fieldName,\n            Class&lt;?&gt; parameterTypes)\n            throws NoSuchMethodException, SecurityException, ClassNotFoundException, NoSuchFieldException {\n\n        Class&lt;?&gt; clazz = Class.forName(className); // Questionable\n        clazz.getMethod(methodName, parameterTypes); // Questionable\n        clazz.getMethods(); // Questionable\n        clazz.getField(fieldName); // Questionable\n        clazz.getFields(); // Questionable\n        clazz.getDeclaredField(fieldName); // Questionable\n        clazz.getDeclaredFields(); // Questionable\n        clazz.getDeclaredClasses(); // Questionable\n\n        loader.loadClass(className); // Questionable\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calling reflection methods with a hard-coded type name, method name or field name will not raise an issue.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/470.html\">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code\n  ('Unsafe Reflection') </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a7"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2975",
        "repo": "squid",
        "name": "\"clone\" should not be overridden",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS2157'>S2157</a> - \"Cloneables\" should implement \"clone\" </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>",
        "mdDesc": "<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> {rule:squid:S2157} - \"Cloneables\" should implement \"clone\" </li>\n  <li> {rule:squid:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2976",
        "repo": "squid",
        "name": "\"File.createTempFile\" should not be used to create a directory",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li> call to <code>File.createTempFile</code> </li>\n  <li> delete resulting file </li>\n  <li> call <code>mkdir</code> on the File object </li>\n</ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>\n</ul>",
        "mdDesc": "<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li> call to <code>File.createTempFile</code> </li>\n  <li> delete resulting file </li>\n  <li> call <code>mkdir</code> on the File object </li>\n</ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a9"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:EmptyFile",
        "repo": "squid",
        "name": "Files should not be empty",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>",
        "mdDesc": "<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S2309",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck",
        "repo": "squid",
        "name": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "mdDesc": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "internalKey": "S1114",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1698",
        "repo": "squid",
        "name": "\"==\" and \"!=\" should not be used when \"equals\" is overridden",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>Exceptions</h2>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>\n<pre>\nClass c;\nif(c == Integer.class) { // No issue raised\n}\n</pre>\n<p>Comparing <code>Enum</code> will not raise an issue:</p>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==\n}\n</pre>\n<p>Comparing with <code>final</code> reference will not raise an issue:</p>\n<pre>\nprivate static final Type DEFAULT = new Type();\n\nvoid foo(Type other) {\n  if (other == DEFAULT) { // Compliant\n  //...\n  }\n}\n</pre>\n<p>Comparing with <code>this</code> will not raise an issue:</p>\n<pre>\n  public boolean equals(Object other) {\n    if (this == other) {  // Compliant\n      return false;\n    }\n }\n</pre>\n<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>\n<h2>See</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS4973'>S4973</a> - Strings and Boxed types should be compared using \"equals()\" </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>",
        "mdDesc": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>Exceptions</h2>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>\n<pre>\nClass c;\nif(c == Integer.class) { // No issue raised\n}\n</pre>\n<p>Comparing <code>Enum</code> will not raise an issue:</p>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==\n}\n</pre>\n<p>Comparing with <code>final</code> reference will not raise an issue:</p>\n<pre>\nprivate static final Type DEFAULT = new Type();\n\nvoid foo(Type other) {\n  if (other == DEFAULT) { // Compliant\n  //...\n  }\n}\n</pre>\n<p>Comparing with <code>this</code> will not raise an issue:</p>\n<pre>\n  public boolean equals(Object other) {\n    if (this == other) {  // Compliant\n      return false;\n    }\n }\n</pre>\n<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>\n<h2>See</h2>\n<ul>\n  <li> {rule:squid:S4973} - Strings and Boxed types should be compared using \"equals()\" </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2786",
        "repo": "squid",
        "name": "Nested \"enum\"s should not be declared static",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>",
        "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4721",
        "repo": "squid",
        "name": "Executing OS commands is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465\">CVE-2018-12465</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187\">CVE-2018-7187</a> </li>\n</ul>\n<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any\nexternally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,\npotentially leading to loss of confidentiality, integrity or availability.</p>\n<p> </p>\n<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>\n  <li> the command execution is not restricted to the right users. (*) </li>\n  <li> the application can be redesigned to not rely on external input to execute the command. </li>\n</ul>\n<p>(*) You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Restrict the control given to the user over the executed command:</p>\n<ul>\n  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>\n  <li> sanitize the user input. </li>\n</ul>\n<p> </p>\n<p>Restrict which users can have access to the command:</p>\n<ul>\n  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>\n  <li> authenticate the user and allow only some users to run the command. </li>\n</ul>\n<p>Reduce the damage the command can do:</p>\n<ul>\n  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a \"jail\".\n  </li>\n  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as \"root\". </li>\n</ul>\n<p> </p>\n<h2>Questionable Code Example</h2>\n<pre>\nRuntime.getRuntime().exec(...);  // Questionable. Validate the executed command.\n\nProcessBuilder pb = new ProcessBuilder(command);  // Questionable.\npb.command(command);  // Questionable.\n\n// === apache.commons ===\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\n\nCommandLine cmdLine = CommandLine.parse(\"bad.exe\");\nDefaultExecutor executor = new DefaultExecutor();\nexecutor.execute(cmdLine); // Questionable\n\n</pre>\n<h2>Exceptions</h2>\n<p>The following code will not raise any issue.</p>\n<pre>\nProcessBuilder pb = new ProcessBuilder();\npb.command();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/78\">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
        "mdDesc": "<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465\">CVE-2018-12465</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187\">CVE-2018-7187</a> </li>\n</ul>\n<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any\nexternally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,\npotentially leading to loss of confidentiality, integrity or availability.</p>\n<p> </p>\n<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>\n  <li> the command execution is not restricted to the right users. (*) </li>\n  <li> the application can be redesigned to not rely on external input to execute the command. </li>\n</ul>\n<p>(*) You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Restrict the control given to the user over the executed command:</p>\n<ul>\n  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>\n  <li> sanitize the user input. </li>\n</ul>\n<p> </p>\n<p>Restrict which users can have access to the command:</p>\n<ul>\n  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>\n  <li> authenticate the user and allow only some users to run the command. </li>\n</ul>\n<p>Reduce the damage the command can do:</p>\n<ul>\n  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a \"jail\".\n  </li>\n  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as \"root\". </li>\n</ul>\n<p> </p>\n<h2>Questionable Code Example</h2>\n<pre>\nRuntime.getRuntime().exec(...);  // Questionable. Validate the executed command.\n\nProcessBuilder pb = new ProcessBuilder(command);  // Questionable.\npb.command(command);  // Questionable.\n\n// === apache.commons ===\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\n\nCommandLine cmdLine = CommandLine.parse(\"bad.exe\");\nDefaultExecutor executor = new DefaultExecutor();\nexecutor.execute(cmdLine); // Questionable\n\n</pre>\n<h2>Exceptions</h2>\n<p>The following code will not raise any issue.</p>\n<pre>\nProcessBuilder pb = new ProcessBuilder();\npb.command();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/78\">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "sans-top25-insecure"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1213",
        "repo": "squid",
        "name": "The members of an interface or class declaration should appear in a pre-defined order",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class and instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>",
        "mdDesc": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class and instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1214",
        "repo": "squid",
        "name": "Constants should not be defined in interfaces",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. </p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>",
        "mdDesc": "<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. </p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1697",
        "repo": "squid",
        "name": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2259'>S2259</a> instead.</p>",
        "mdDesc": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2259} instead.</p>",
        "severity": "MAJOR",
        "status": "DEPRECATED",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3510",
        "repo": "squid",
        "name": "\"HostnameVerifier.verify\" should not always return true",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>To prevent URL spoofing, <code>HostnameVerifier.verify()</code> methods should do more than simply <code>return true</code>. Doing so may get you\nquickly past an exception, but that comes at the cost of opening a security hole in your application. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLS\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return true;  // Noncompliant\n  }\n}).build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLSv1.2\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  @Override\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return requestedHost.equalsIgnoreCase(remoteServerSession.getPeerHost()); // Compliant\n  }\n}).build();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER\">WEAK_HOSTNAME_VERIFIER</a> </li>\n</ul>",
        "mdDesc": "<p>To prevent URL spoofing, <code>HostnameVerifier.verify()</code> methods should do more than simply <code>return true</code>. Doing so may get you\nquickly past an exception, but that comes at the cost of opening a security hole in your application. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLS\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return true;  // Noncompliant\n  }\n}).build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLSv1.2\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  @Override\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return requestedHost.equalsIgnoreCase(remoteServerSession.getPeerHost()); // Compliant\n  }\n}).build();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER\">WEAK_HOSTNAME_VERIFIER</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4602",
        "repo": "squid",
        "name": "\"@SpringBootApplication\" and \"@ComponentScan\" should not be used in the default package",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be\nconfigured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither\nparameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>\nis used on a class belonging to the default package, the entire classpath will be scanned.</p>\n<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an\n<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>\n<p>This rule raises an issue when:</p>\n<p>- <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the\ndefault package</p>\n<p>- <code>@ComponentScan</code> is explicitly configured with the default package</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package\npublic class RootBootApp {\n...\n}\n</pre>\n<pre>\n@ComponentScan(\"\")\npublic class Application {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage hello;\n\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Compliant; RootBootApp belongs to the \"hello\" package\npublic class RootBootApp {\n...\n}\n</pre>",
        "mdDesc": "<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be\nconfigured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither\nparameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>\nis used on a class belonging to the default package, the entire classpath will be scanned.</p>\n<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an\n<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>\n<p>This rule raises an issue when:</p>\n<p>- <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the\ndefault package</p>\n<p>- <code>@ComponentScan</code> is explicitly configured with the default package</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package\npublic class RootBootApp {\n...\n}\n</pre>\n<pre>\n@ComponentScan(\"\")\npublic class Application {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage hello;\n\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Compliant; RootBootApp belongs to the \"hello\" package\npublic class RootBootApp {\n...\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1696",
        "repo": "squid",
        "name": "\"NullPointerException\" should not be caught",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/395.html\">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>",
        "mdDesc": "<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/395.html\">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3631",
        "repo": "squid",
        "name": "\"Arrays.stream\" should be used for primitive arrays",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>",
        "mdDesc": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3752",
        "repo": "squid",
        "name": "\"@RequestMapping\" methods should specify HTTP method",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A <code>@RequestMapping</code> method handles all matching requests by default. That means that a method you intended only to be\n<code>POST</code>-ed to could also be called by a <code>GET</code>, thereby allowing hackers to call the method inappropriately. For example a\n\"transferFunds\" method might be invoked like so: <code>&lt;img\nsrc=\"http://bank.com/actions/transferFunds?reciepientRouting=000000&amp;receipientAccount=11111111&amp;amount=200.00\" width=\"1\"\nheight=\"1\"/&gt;</code></p>\n<p>For that reason, you should always explicitly list the single HTTP method with which you expect your <code>@RequestMapping</code> Java method to be\ncalled. This rule raises an issue when <code>method</code> is missing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\")  // Noncompliant\npublic String greet(String greetee) {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>",
        "mdDesc": "<p>A <code>@RequestMapping</code> method handles all matching requests by default. That means that a method you intended only to be\n<code>POST</code>-ed to could also be called by a <code>GET</code>, thereby allowing hackers to call the method inappropriately. For example a\n\"transferFunds\" method might be invoked like so: <code>&lt;img\nsrc=\"http://bank.com/actions/transferFunds?reciepientRouting=000000&amp;receipientAccount=11111111&amp;amount=200.00\" width=\"1\"\nheight=\"1\"/&gt;</code></p>\n<p>For that reason, you should always explicitly list the single HTTP method with which you expect your <code>@RequestMapping</code> Java method to be\ncalled. This rule raises an issue when <code>method</code> is missing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\")  // Noncompliant\npublic String greet(String greetee) {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6",
            "sans-top25-insecure",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3753",
        "repo": "squid",
        "name": "\"@Controller\" classes that use \"@SessionAttributes\" must call \"setComplete\" on their \"SessionStatus\" objects",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such\n<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned\nup when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a\n<code>@RequestMapping</code> method, neither Spring nor the JVM will know it's time to do that. Note that the <code>SessionStatus</code> object must\nbe passed to that method as a parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")  // Noncompliant; this doesn't get cleaned up\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n\n  @RequestMapping(\"/goodbye\", method = POST)\n  public String goodbye(SessionStatus status) {\n    //...\n    status.setComplete();\n  }\n\n}\n</pre>",
        "mdDesc": "<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such\n<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned\nup when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a\n<code>@RequestMapping</code> method, neither Spring nor the JVM will know it's time to do that. Note that the <code>SessionStatus</code> object must\nbe passed to that method as a parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")  // Noncompliant; this doesn't get cleaned up\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n\n  @RequestMapping(\"/goodbye\", method = POST)\n  public String goodbye(SessionStatus status) {\n    //...\n    status.setComplete();\n  }\n\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4601",
        "repo": "squid",
        "name": "\"HttpSecurity\" URL patterns should be correctly ordered",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>URL patterns configured on a <code>HttpSecurity.authorizeRequests()</code> method are considered in the order they were declared. It's easy to do a\nmistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it's required to review the order of the\n\"antMatchers\" declarations. The <code>/**</code> one should be the last one if it is declared.</p>\n<p>This rule raises an issue when:</p>\n<p>- A pattern is preceded by another that ends with <code>**</code> and has the same beginning. E.g.: <code>/page*-admin/db/**</code> is after\n<code>/page*-admin/**</code></p>\n<p>- A pattern without wildcard characters is preceded by another that matches. E.g.: <code>/page-index/db</code> is after <code>/page*/**</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/admin/login\").permitAll() // Noncompliant; the pattern \"/admin/login\" should occurs before \"/admin/**\"\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\") // Noncompliant; the pattern \"/db/**\" should occurs before \"/**\"\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/login\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\") // Compliant\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\")\n      .antMatchers(\"/**\", \"/home\").permitAll() // Compliant; \"/**\" is the last one\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "mdDesc": "<p>URL patterns configured on a <code>HttpSecurity.authorizeRequests()</code> method are considered in the order they were declared. It's easy to do a\nmistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it's required to review the order of the\n\"antMatchers\" declarations. The <code>/**</code> one should be the last one if it is declared.</p>\n<p>This rule raises an issue when:</p>\n<p>- A pattern is preceded by another that ends with <code>**</code> and has the same beginning. E.g.: <code>/page*-admin/db/**</code> is after\n<code>/page*-admin/**</code></p>\n<p>- A pattern without wildcard characters is preceded by another that matches. E.g.: <code>/page-index/db</code> is after <code>/page*/**</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/admin/login\").permitAll() // Noncompliant; the pattern \"/admin/login\" should occurs before \"/admin/**\"\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\") // Noncompliant; the pattern \"/db/**\" should occurs before \"/**\"\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/login\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\") // Compliant\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\")\n      .antMatchers(\"/**\", \"/home\").permitAll() // Compliant; \"/**\" is the last one\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a6",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1695",
        "repo": "squid",
        "name": "\"NullPointerException\" should not be explicitly thrown",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>",
        "mdDesc": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2301",
        "repo": "squid",
        "name": "Public methods should not contain selector arguments",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>",
        "mdDesc": "<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3750",
        "repo": "squid",
        "name": "Spring \"@Controller\" classes should not use \"@Scope\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>",
        "mdDesc": "<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1452",
        "repo": "squid",
        "name": "Generic wildcard types should not be used in return parameters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly. </p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.</p>\n<p>This rule raises an issue when a method returns a wildcard type. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;Animal&gt; getAnimals(){...}\n</pre>\n<p>or</p>\n<pre>\nList&lt;Dog&gt; getAnimals(){...}\n</pre>",
        "mdDesc": "<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly. </p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.</p>\n<p>This rule raises an issue when a method returns a wildcard type. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;Animal&gt; getAnimals(){...}\n</pre>\n<p>or</p>\n<pre>\nList&lt;Dog&gt; getAnimals(){...}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1694",
        "repo": "squid",
        "name": "An abstract class should have both abstract and concrete methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1210",
        "repo": "squid",
        "name": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>",
        "mdDesc": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3751",
        "repo": "squid",
        "name": "\"@RequestMapping\" methods should be \"public\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a\nmeta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "mdDesc": "<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a\nmeta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a6",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S1450",
        "repo": "squid",
        "name": "Private fields only used as local variables in methods should become local variables",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>",
        "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1451",
        "repo": "squid",
        "name": "Track lack of copyright and license headers",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>",
        "mdDesc": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "headerFormat",
                "htmlDesc": "Expected copyright and license header",
                "type": "TEXT"
            },
            {
                "key": "isRegularExpression",
                "htmlDesc": "Whether the headerFormat is a regular expression",
                "defaultValue": "false",
                "type": "BOOLEAN"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3518",
        "repo": "squid",
        "name": "Zero should not be a possible denominator",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/369.html\">MITRE, CWE-369</a> - Divide by zero </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KAGyAw\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not\n  result in divide-by-zero errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cAI\">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result\n  in divide-by-zero errors </li>\n</ul>",
        "mdDesc": "<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/369.html\">MITRE, CWE-369</a> - Divide by zero </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KAGyAw\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not\n  result in divide-by-zero errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cAI\">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result\n  in divide-by-zero errors </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "denial-of-service"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1219",
        "repo": "squid",
        "name": "\"switch\" statements should not contain non-case labels",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>",
        "mdDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "misra",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3516",
        "repo": "squid",
        "name": "Methods returns should not be invariant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>",
        "mdDesc": "<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "Per number of return statements",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "Per number of return statements",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4603",
        "repo": "squid",
        "name": "\"@Import\"s should be preferred to \"@ComponentScan\"s",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>@ComponentScan</code> is used to find which Spring <code>@Component</code> beans (<code>@Service</code> or <code>@Repository</code> or\n<code>Controller</code>) are available in the classpath so they can be used in the application context. This is a convenient feature especially when\nyou begin a new project but it comes with the drawback of slowing down the application start-up time especially when the application becomes bigger\n(ie: it references a large JAR file, or it references a significant number of JAR files, or the base-package refers to a large amount of .class\nfiles).</p>\n<p><code>@ComponentScan</code> should be replaced by an explicit list of Spring beans loaded by <code>@Import</code>.</p>\n<p>The interface <code>@SpringBootApplication</code> is also considered by this rule because it is annotated with <code>@ComponentScan</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@ComponentScan\npublic class MyApplication {\n...\n}\n\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        MultipartAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cloud.google.com/appengine/articles/spring_optimization\">Optimizing Spring Framework for App Engine Applications</a> </li>\n</ul>",
        "mdDesc": "<p><code>@ComponentScan</code> is used to find which Spring <code>@Component</code> beans (<code>@Service</code> or <code>@Repository</code> or\n<code>Controller</code>) are available in the classpath so they can be used in the application context. This is a convenient feature especially when\nyou begin a new project but it comes with the drawback of slowing down the application start-up time especially when the application becomes bigger\n(ie: it references a large JAR file, or it references a significant number of JAR files, or the base-package refers to a large amount of .class\nfiles).</p>\n<p><code>@ComponentScan</code> should be replaced by an explicit list of Spring beans loaded by <code>@Import</code>.</p>\n<p>The interface <code>@SpringBootApplication</code> is also considered by this rule because it is annotated with <code>@ComponentScan</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@ComponentScan\npublic class MyApplication {\n...\n}\n\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        MultipartAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cloud.google.com/appengine/articles/spring_optimization\">Optimizing Spring Framework for App Engine Applications</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4604",
        "repo": "squid",
        "name": "\"@EnableAutoConfiguration\" should be fine-tuned",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the\n<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>\n<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SpringBootApplication(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>",
        "mdDesc": "<p>\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the\n<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>\n<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SpringBootApplication(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1217",
        "repo": "squid",
        "name": "\"Thread.run()\" should not be called directly",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/572.html\">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQAiAg\">CERT THI00-J.</a> - Do not invoke Thread.run() </li>\n</ul>",
        "mdDesc": "<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/572.html\">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQAiAg\">CERT THI00-J.</a> - Do not invoke Thread.run() </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3878",
        "repo": "squid",
        "name": "Arrays should not be created for varargs parameters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4605",
        "repo": "squid",
        "name": "Spring beans should be considered by \"@ComponentScan\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring\nApplication Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. <strong>Note:</strong> the\n<code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot will auto scan for components\nin the package containing the Spring Boot main class and its sub-packages.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Compliant; \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n</pre>",
        "mdDesc": "<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring\nApplication Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. <strong>Note:</strong> the\n<code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot will auto scan for components\nin the package containing the Spring Boot main class and its sub-packages.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Compliant; \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1215",
        "repo": "squid",
        "name": "Execution of the Garbage Collector should be triggered only by the JVM",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> ... </li>\n</ul>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should\nbe left exclusively to the JVM.</p>",
        "mdDesc": "<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> ... </li>\n</ul>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should\nbe left exclusively to the JVM.</p>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1699",
        "repo": "squid",
        "name": "Constructors should only call non-overridable methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MYYbAQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/TQBi\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or\n  destructors </li>\n</ul>",
        "mdDesc": "<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MYYbAQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/TQBi\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or\n  destructors </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2789",
        "repo": "squid",
        "name": "\"null\" should not be used with \"Optional\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>",
        "mdDesc": "<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2676",
        "repo": "squid",
        "name": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and\n<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods\nis similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and\n<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods\nis similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2677",
        "repo": "squid",
        "name": "\"read\" and \"readLine\" return values should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,\n<code>Reader.read()</code>, and these methods in any child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,\n<code>Reader.read()</code>, and these methods in any child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4973",
        "repo": "squid",
        "name": "Strings and Boxed types should be compared using \"equals()\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>",
        "mdDesc": "<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1223",
        "repo": "squid",
        "name": "Non-constructor methods should not have the same name as the enclosing class",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>",
        "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2674",
        "repo": "squid",
        "name": "The value returned from a stream read should be checked",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/XACSAQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an\n  array </li>\n</ul>",
        "mdDesc": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/XACSAQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an\n  array </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3400",
        "repo": "squid",
        "name": "Methods should not return constants",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>",
        "mdDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1220",
        "repo": "squid",
        "name": "The default unnamed package should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>",
        "mdDesc": "<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1221",
        "repo": "squid",
        "name": "Methods should not be named \"tostring\", \"hashcode\" or \"equal\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Naming a method <code>tostring</code>, <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>toString</code>, <code>Object.hashCode()</code> (note the camelCasing) or\n  <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic String tostring() { /* ... */ } // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\n@Override\npublic String toString() { /* ... */ }\n\n@Override\npublic boolean equals(Object obj) { /* ... */ }\n</pre>",
        "mdDesc": "<p>Naming a method <code>tostring</code>, <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>toString</code>, <code>Object.hashCode()</code> (note the camelCasing) or\n  <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic String tostring() { /* ... */ } // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\n@Override\npublic String toString() { /* ... */ }\n\n@Override\npublic boolean equals(Object obj) { /* ... */ }\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2675",
        "repo": "squid",
        "name": "\"readObject\" should not be \"synchronized\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>",
        "mdDesc": "<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1228",
        "repo": "squid",
        "name": "Packages should have a javadoc file 'package-info.java'",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>",
        "mdDesc": "<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2438",
        "repo": "squid",
        "name": "\"Threads\" should not be used where \"Runnables\" are expected",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>",
        "mdDesc": "<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4738",
        "repo": "squid",
        "name": "Java 8 features should be preferred to Guava",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed these limitations.\nWhen migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease its\nmaintenance: developers don't need to learn how to use two APIs and can stick to the standard one.</p>\n<p>This rule raises an issue when the following Guava APIs are used:</p>\n<table>\n  <tbody>\n    <tr>\n      <th> Guava API </th>\n      <th> Java 8 API </th>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64Url() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Joiner.on() </td>\n      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#of() </td>\n      <td> java.util.Optional#of() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#absent() </td>\n      <td> java.util.Optional#empty() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#fromNullable() </td>\n      <td> java.util.Optional#ofNullable() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional </td>\n      <td> java.util.Optional </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Predicate </td>\n      <td> java.util.function.Predicate </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Function </td>\n      <td> java.util.function.Function </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Supplier </td>\n      <td> java.util.function.Supplier </td>\n    </tr>\n  </tbody>\n</table>",
        "mdDesc": "<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed these limitations.\nWhen migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease its\nmaintenance: developers don't need to learn how to use two APIs and can stick to the standard one.</p>\n<p>This rule raises an issue when the following Guava APIs are used:</p>\n<table>\n  <tbody>\n    <tr>\n      <th> Guava API </th>\n      <th> Java 8 API </th>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64Url() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Joiner.on() </td>\n      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#of() </td>\n      <td> java.util.Optional#of() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#absent() </td>\n      <td> java.util.Optional#empty() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#fromNullable() </td>\n      <td> java.util.Optional#ofNullable() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional </td>\n      <td> java.util.Optional </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Predicate </td>\n      <td> java.util.function.Predicate </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Function </td>\n      <td> java.util.function.Function </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Supplier </td>\n      <td> java.util.function.Supplier </td>\n    </tr>\n  </tbody>\n</table>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "guava",
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:ForLoopCounterChangedCheck",
        "repo": "squid",
        "name": "\"for\" loop stop conditions should be invariant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>",
        "mdDesc": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S127",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "misra",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1226",
        "repo": "squid",
        "name": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i); // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\"; // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>",
        "mdDesc": "<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i); // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\"; // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2437",
        "repo": "squid",
        "name": "Silly bit operations should not be performed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>",
        "mdDesc": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:ObjectFinalizeOverridenCheck",
        "repo": "squid",
        "name": "The Object.finalize() method should not be overriden",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "mdDesc": "<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "internalKey": "S1113",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1313",
        "repo": "squid",
        "name": "Using hardcoded IP addresses is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always\npossible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> make the IP address configurable. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = \"192.168.12.42\"; // Noncompliant\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>",
        "mdDesc": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always\npossible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> make the IP address configurable. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = \"192.168.12.42\"; // Noncompliant\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2885",
        "repo": "squid",
        "name": "Non-thread-safe fields should not be static",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>",
        "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2886",
        "repo": "squid",
        "name": "Getters and setters should be synchronized in pairs",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/I4BoAg\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable\n  objects </li>\n</ul>",
        "mdDesc": "<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/I4BoAg\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable\n  objects </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1312",
        "repo": "squid",
        "name": "Loggers should be \"private static final\" and should share a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: be created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>",
        "mdDesc": "<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: be created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the logger names against.",
                "defaultValue": "LOG(?:GER)?",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3972",
        "repo": "squid",
        "name": "Conditionals should start on new lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>",
        "mdDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3973",
        "repo": "squid",
        "name": "A conditionally executed single line should be denoted by indentation",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>",
        "mdDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1310",
        "repo": "squid",
        "name": "Track uses of \"NOPMD\" suppression comments",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>",
        "mdDesc": "<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1319",
        "repo": "squid",
        "name": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>",
        "mdDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2761",
        "repo": "squid",
        "name": "Unary prefix operators should not be repeated",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The needless repetition of an operator is usually a typo. There is no reason to write <code>!!!i</code> when <code>!i</code> will do.</p>\n<p>On the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and\nshould be simplified.</p>\n<p>This rule raises an issue for sequences of: <code>!</code>, <code>~</code>, <code>-</code>, and <code>+</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 1;\n\nint j = - - -i;  // Noncompliant; just use -i\nint k = ~~~i;    // Noncompliant; same as i\nint m = + +i;    // Noncompliant; operators are useless here\n\nboolean b = false;\nboolean c = !!!b;   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i =  1;\n\nint j = -i;\nint k = ~i;\nint m =  i;\n\nboolean b = false;\nboolean c = !b;\n</pre>\n<h2>Exceptions</h2>\n<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>",
        "mdDesc": "<p>The needless repetition of an operator is usually a typo. There is no reason to write <code>!!!i</code> when <code>!i</code> will do.</p>\n<p>On the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and\nshould be simplified.</p>\n<p>This rule raises an issue for sequences of: <code>!</code>, <code>~</code>, <code>-</code>, and <code>+</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 1;\n\nint j = - - -i;  // Noncompliant; just use -i\nint k = ~~~i;    // Noncompliant; same as i\nint m = + +i;    // Noncompliant; operators are useless here\n\nboolean b = false;\nboolean c = !!!b;   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i =  1;\n\nint j = -i;\nint k = ~i;\nint m =  i;\n\nboolean b = false;\nboolean c = !b;\n</pre>\n<h2>Exceptions</h2>\n<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1317",
        "repo": "squid",
        "name": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>",
        "mdDesc": "<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2647",
        "repo": "squid",
        "name": "Basic authentication should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the\nthinnest veil of protection to your users, and should not be used. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Using HttpPost from Apache HttpClient\nString encoding = Base64Encoder.encode (\"login:passwd\");\norg.apache.http.client.methods.HttpPost httppost = new HttpPost(url);\nhttppost.setHeader(\"Authorization\", \"Basic \" + encoding);  // Noncompliant\n\nor\n\n// Using HttpURLConnection\nString encoding = Base64.getEncoder().encodeToString((\"login:passwd\").getBytes(‌\"UTF‌​-8\"​));\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Basic \" + encoding); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/522\">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Basic_Authentication\">OWASP Basic Authentication</a> </li>\n</ul>",
        "mdDesc": "<p>Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the\nthinnest veil of protection to your users, and should not be used. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Using HttpPost from Apache HttpClient\nString encoding = Base64Encoder.encode (\"login:passwd\");\norg.apache.http.client.methods.HttpPost httppost = new HttpPost(url);\nhttppost.setHeader(\"Authorization\", \"Basic \" + encoding);  // Noncompliant\n\nor\n\n// Using HttpURLConnection\nString encoding = Base64.getEncoder().encodeToString((\"login:passwd\").getBytes(‌\"UTF‌​-8\"​));\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Basic \" + encoding); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/522\">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Basic_Authentication\">OWASP Basic Authentication</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4829",
        "repo": "squid",
        "name": "Reading the Standard Input is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337\">CVE-2005-2337</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449\">CVE-2017-11449</a> </li>\n</ul>\n<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.</p>\n<p>This rule flags code that reads from the standard input.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> data read from the standard input is not sanitized before being used. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all data read from the standard input before using it.</p>\n<h2>Questionable Code Example</h2>\n<pre>\nclass A {\n    void foo(String fmt, Object args) throws Exception {\n        // Questionable. Check how the standard input is used.\n        System.in.read();\n\n        // Questionable. Check how safe this new InputStream is.\n        System.setIn(new java.io.FileInputStream(\"test.txt\"));\n\n        java.io.Console console = System.console();\n        // Questionable. All the following calls should be reviewed as they use the standard input.\n        console.reader();\n        console.readLine();\n        console.readLine(fmt, args);\n        console.readPassword();\n        console.readPassword(fmt, args);\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>All references to <code>System.in</code> will create issues except direct calls to <code>System.in.close()</code>.</p>\n<p>Command line parsing libraries such as JCommander often read standard input when asked for passwords. However this rule doesn't raise any issue in\nthis case as another hotspot rule covers command line arguments.</p>\n<h2>See:</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n</ul>",
        "mdDesc": "<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337\">CVE-2005-2337</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449\">CVE-2017-11449</a> </li>\n</ul>\n<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.</p>\n<p>This rule flags code that reads from the standard input.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> data read from the standard input is not sanitized before being used. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all data read from the standard input before using it.</p>\n<h2>Questionable Code Example</h2>\n<pre>\nclass A {\n    void foo(String fmt, Object args) throws Exception {\n        // Questionable. Check how the standard input is used.\n        System.in.read();\n\n        // Questionable. Check how safe this new InputStream is.\n        System.setIn(new java.io.FileInputStream(\"test.txt\"));\n\n        java.io.Console console = System.console();\n        // Questionable. All the following calls should be reviewed as they use the standard input.\n        console.reader();\n        console.readLine();\n        console.readLine(fmt, args);\n        console.readPassword();\n        console.readPassword(fmt, args);\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>All references to <code>System.in</code> will create issues except direct calls to <code>System.in.close()</code>.</p>\n<p>Command line parsing libraries such as JCommander often read standard input when asked for passwords. However this rule doesn't raise any issue in\nthis case as another hotspot rule covers command line arguments.</p>\n<h2>See:</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1314",
        "repo": "squid",
        "name": "Octal values should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
        "mdDesc": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1315",
        "repo": "squid",
        "name": "Track uses of \"CHECKSTYLE:OFF\" suppression comments",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>",
        "mdDesc": "<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4823",
        "repo": "squid",
        "name": "Using command line arguments is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281\">CVE-2018-7281</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326\">CVE-2018-12326</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198\">CVE-2011-3198</a> </li>\n</ul>\n<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>\n<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.</p>\n<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide\nsecurity code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> any of the command line arguments are used without being sanitized first. </li>\n  <li> your application accepts sensitive information via command line arguments. </li>\n</ul>\n<p>If you answered yes to any of these questions you are at risk.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all command line arguments before using them.</p>\n<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the\npath to a file containing the information.</p>\n<h2>Questionable Code Example</h2>\n<p>This rule raises an issue as soon as there is a reference to argv, be it for direct use or via a CLI library like JCommander, GetOpt or Apache\nCLI.</p>\n<pre>\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp; &nbsp; &nbsp; &nbsp; String option = argv[0]; &nbsp;// Questionable: check how the argument is used\n&nbsp;&nbsp;&nbsp; }\n}\n</pre>\n<pre>\n// === JCommander ===\nimport&nbsp;com.beust.jcommander.*;\n\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Main main = new Main();\n&nbsp; &nbsp; &nbsp; &nbsp; JCommander.newBuilder()\n&nbsp; &nbsp; &nbsp; &nbsp; .addObject(main)\n&nbsp; &nbsp; &nbsp; &nbsp; .build()\n&nbsp; &nbsp; &nbsp; &nbsp; .parse(argv); // Questionable\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;main.run();\n&nbsp;&nbsp; &nbsp;}\n}\n</pre>\n<pre>\n// === GNU Getopt ===\nimport gnu.getopt.Getopt;\n\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Getopt g = new Getopt(\"myprog\", argv, \"ab\"); // Questionable\n&nbsp;&nbsp;&nbsp; }\n}\n</pre>\n<pre>\n// === Apache CLI ===\nimport org.apache.commons.cli.*;\n\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Options options = new Options();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; CommandLineParser parser = new DefaultParser();\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  CommandLine line = parser.parse(options, argv); // Questionable\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; }\n&nbsp;&nbsp;&nbsp; }\n}\n</pre>\n<p>In the case of Args4J, an issue is created on the <code>public void run</code> method of any class using <code>org.kohsuke.args4j.Option</code> or\n<code>org.kohsuke.args4j.Argument</code>.</p>\n<p>Such a class is called directly by <code>org.kohsuke.args4j.Starter</code> outside of any <code>public static void main</code> method. If the class\nhas no <code>run</code> method, no issue will be raised as there must be a <code>public static void main</code> and its argument is already\nhighlighted.</p>\n<pre>\n// === argv4J ===\nimport org.kohsuke.args4j.Option;\nimport org.kohsuke.args4j.Argument;\n\npublic class Main {\n    @Option(name=\"-myopt\",usage=\"An option\")\n    public String myopt;\n\n    @Argument(usage = \"An argument\", metaVar = \"&lt;myArg&gt;\")\n    String myarg;\n\n    String file;\n\n    @Option(name=\"-file\")\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    String arg2;\n\n    @Argument(index=1)\n    public void setArg2(String arg2) {\n        this.arg2 = arg2;\n    }\n\n&nbsp;&nbsp; &nbsp;public void run() { // Questionable: This function\n        myarg; // check how this argument is used\n&nbsp;&nbsp; &nbsp;}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The support of Argv4J without the use of <code>org.kohsuke.argv4j.Option</code> is out of scope as there is no way to know which Bean will be used\nas the mainclass.</p>\n<p>No issue will be raised on <code>public static void main(String[] argv)</code> if <code>argv</code> is not referenced in the method.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/88.html\">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/214.html\">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
        "mdDesc": "<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281\">CVE-2018-7281</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326\">CVE-2018-12326</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198\">CVE-2011-3198</a> </li>\n</ul>\n<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>\n<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.</p>\n<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide\nsecurity code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> any of the command line arguments are used without being sanitized first. </li>\n  <li> your application accepts sensitive information via command line arguments. </li>\n</ul>\n<p>If you answered yes to any of these questions you are at risk.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all command line arguments before using them.</p>\n<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the\npath to a file containing the information.</p>\n<h2>Questionable Code Example</h2>\n<p>This rule raises an issue as soon as there is a reference to argv, be it for direct use or via a CLI library like JCommander, GetOpt or Apache\nCLI.</p>\n<pre>\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp; &nbsp; &nbsp; &nbsp; String option = argv[0]; &nbsp;// Questionable: check how the argument is used\n&nbsp;&nbsp;&nbsp; }\n}\n</pre>\n<pre>\n// === JCommander ===\nimport&nbsp;com.beust.jcommander.*;\n\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Main main = new Main();\n&nbsp; &nbsp; &nbsp; &nbsp; JCommander.newBuilder()\n&nbsp; &nbsp; &nbsp; &nbsp; .addObject(main)\n&nbsp; &nbsp; &nbsp; &nbsp; .build()\n&nbsp; &nbsp; &nbsp; &nbsp; .parse(argv); // Questionable\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;main.run();\n&nbsp;&nbsp; &nbsp;}\n}\n</pre>\n<pre>\n// === GNU Getopt ===\nimport gnu.getopt.Getopt;\n\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Getopt g = new Getopt(\"myprog\", argv, \"ab\"); // Questionable\n&nbsp;&nbsp;&nbsp; }\n}\n</pre>\n<pre>\n// === Apache CLI ===\nimport org.apache.commons.cli.*;\n\npublic class Main {\n&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Options options = new Options();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; CommandLineParser parser = new DefaultParser();\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  CommandLine line = parser.parse(options, argv); // Questionable\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; }\n&nbsp;&nbsp;&nbsp; }\n}\n</pre>\n<p>In the case of Args4J, an issue is created on the <code>public void run</code> method of any class using <code>org.kohsuke.args4j.Option</code> or\n<code>org.kohsuke.args4j.Argument</code>.</p>\n<p>Such a class is called directly by <code>org.kohsuke.args4j.Starter</code> outside of any <code>public static void main</code> method. If the class\nhas no <code>run</code> method, no issue will be raised as there must be a <code>public static void main</code> and its argument is already\nhighlighted.</p>\n<pre>\n// === argv4J ===\nimport org.kohsuke.args4j.Option;\nimport org.kohsuke.args4j.Argument;\n\npublic class Main {\n    @Option(name=\"-myopt\",usage=\"An option\")\n    public String myopt;\n\n    @Argument(usage = \"An argument\", metaVar = \"&lt;myArg&gt;\")\n    String myarg;\n\n    String file;\n\n    @Option(name=\"-file\")\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    String arg2;\n\n    @Argument(index=1)\n    public void setArg2(String arg2) {\n        this.arg2 = arg2;\n    }\n\n&nbsp;&nbsp; &nbsp;public void run() { // Questionable: This function\n        myarg; // check how this argument is used\n&nbsp;&nbsp; &nbsp;}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The support of Argv4J without the use of <code>org.kohsuke.argv4j.Option</code> is out of scope as there is no way to know which Bean will be used\nas the mainclass.</p>\n<p>No issue will be raised on <code>public static void main(String[] argv)</code> if <code>argv</code> is not referenced in the method.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/88.html\">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/214.html\">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "sans-top25-insecure"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S4825",
        "repo": "squid",
        "name": "Sending HTTP requests is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150\">CVE-2014-8150</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007\">CVE-2018-1000007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660\">CVE-2010-0660</a> </li>\n</ul>\n<p>An HTTP request has different kinds of vulnerabilities:</p>\n<ul>\n  <li> it sends data which might be intercepted or dangerous. </li>\n  <li> it receives a response which might have been crafted by an attacker. </li>\n  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides\n  by sending too many requests. </li>\n</ul>\n<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the http connection is encrypted or not. </li>\n  <li> the recipient is not allowed to receive some of the data you send. </li>\n  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>\n  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is\n  not limited. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>\n  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack\n  other services. </li>\n  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user\n  input, sanitize it beforehand. </li>\n  <li> Validate and sanitize the response before using it in any way. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === Java URL connection ===\nimport java.net.URL;\nimport java.net.HttpURLConnection;\n\nabstract class URLConnection {\n    void foo() throws Exception {\n        URL url = new URL(\"http://example.com\");\n        HttpURLConnection con = (HttpURLConnection) url.openConnection(); // Questionable: review how the http connection is used\n\n        doSomething((HttpURLConnection) url.openConnection()); // Questionable: review how the http connection is used\n    }\n\n    abstract void doSomething(HttpURLConnection httpUrlConnection);\n}\n</pre>\n<pre>\n// === HttpClient Java 9 ===\nimport jdk.incubator.http.HttpClient;\nimport jdk.incubator.http.HttpRequest;\nimport jdk.incubator.http.HttpResponse;\n\nclass JavaNet9 {\n    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiProcessor&lt;?,?&gt; multiProcessor) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        client.send(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, multiProcessor); // Questionable\n    }\n}\n</pre>\n<pre>\n// === HttpClient Java 10 ===\nimport jdk.incubator.http.HttpClient;\nimport jdk.incubator.http.HttpRequest;\nimport jdk.incubator.http.HttpResponse;\n\nclass JavaNet10 {\n    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiSubscriber&lt;?,?&gt; multiSubscriber) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        client.send(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, multiSubscriber); // Questionable\n    }\n}\n</pre>\n<pre>\n// === HttpClient Java 11 ===\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\nclass JavaNet11 {\n    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.PushPromiseHandler&lt;Object&gt; pushPromiseHandler) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        client.send(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler, pushPromiseHandler); // Questionable\n    }\n}\n</pre>\n<pre>\n// === apache ===\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.ResponseHandler;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.HttpClientConnection;\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpHost;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.protocol.HttpContext;\n\nclass ApacheHttpClient {\n    void foo(HttpClientConnection con, HttpHost target, HttpRequest request, HttpContext context,\n            ResponseHandler&lt;?&gt; responseHandler, HttpUriRequest uriRequest, HttpEntityEnclosingRequest eeRequest)\n            throws Exception {\n        HttpClient client = HttpClientBuilder.create().build();\n\n        // All the following are Questionable\n        client.execute(target, request);\n        client.execute(target, request, context);\n        client.execute(target, request, responseHandler);\n        client.execute(target, request, responseHandler, context);\n        client.execute(uriRequest);\n        client.execute(uriRequest, context);\n        client.execute(uriRequest, responseHandler);\n        client.execute(uriRequest, responseHandler, context);\n        con.sendRequestEntity(eeRequest);\n        con.sendRequestHeader(request);\n    }\n}\n</pre>\n<pre>\n// === google-http-java-client ===\nimport java.util.concurrent.Executor;\nimport com.google.api.client.http.GenericUrl;\nimport com.google.api.client.http.HttpRequest;\nimport com.google.api.client.http.HttpRequestFactory;\nimport com.google.api.client.http.javanet.NetHttpTransport;\n\nclass GoogleHttpClient {\n    void foo(Executor executor) throws Exception {\n        HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();\n        HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(\"http://example.com\"));\n\n        // All the following are Questionable\n        request.execute();\n        request.executeAsync();\n        request.executeAsync(executor);\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/200.html\">MITRE, CWE-200</a> - Information Exposure </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150\">CVE-2014-8150</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007\">CVE-2018-1000007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660\">CVE-2010-0660</a> </li>\n</ul>\n<p>An HTTP request has different kinds of vulnerabilities:</p>\n<ul>\n  <li> it sends data which might be intercepted or dangerous. </li>\n  <li> it receives a response which might have been crafted by an attacker. </li>\n  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides\n  by sending too many requests. </li>\n</ul>\n<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the http connection is encrypted or not. </li>\n  <li> the recipient is not allowed to receive some of the data you send. </li>\n  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>\n  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is\n  not limited. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>\n  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack\n  other services. </li>\n  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user\n  input, sanitize it beforehand. </li>\n  <li> Validate and sanitize the response before using it in any way. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === Java URL connection ===\nimport java.net.URL;\nimport java.net.HttpURLConnection;\n\nabstract class URLConnection {\n    void foo() throws Exception {\n        URL url = new URL(\"http://example.com\");\n        HttpURLConnection con = (HttpURLConnection) url.openConnection(); // Questionable: review how the http connection is used\n\n        doSomething((HttpURLConnection) url.openConnection()); // Questionable: review how the http connection is used\n    }\n\n    abstract void doSomething(HttpURLConnection httpUrlConnection);\n}\n</pre>\n<pre>\n// === HttpClient Java 9 ===\nimport jdk.incubator.http.HttpClient;\nimport jdk.incubator.http.HttpRequest;\nimport jdk.incubator.http.HttpResponse;\n\nclass JavaNet9 {\n    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiProcessor&lt;?,?&gt; multiProcessor) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        client.send(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, multiProcessor); // Questionable\n    }\n}\n</pre>\n<pre>\n// === HttpClient Java 10 ===\nimport jdk.incubator.http.HttpClient;\nimport jdk.incubator.http.HttpRequest;\nimport jdk.incubator.http.HttpResponse;\n\nclass JavaNet10 {\n    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiSubscriber&lt;?,?&gt; multiSubscriber) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        client.send(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, multiSubscriber); // Questionable\n    }\n}\n</pre>\n<pre>\n// === HttpClient Java 11 ===\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\nclass JavaNet11 {\n    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.PushPromiseHandler&lt;Object&gt; pushPromiseHandler) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        client.send(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler); // Questionable\n        client.sendAsync(request, responseBodyHandler, pushPromiseHandler); // Questionable\n    }\n}\n</pre>\n<pre>\n// === apache ===\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.ResponseHandler;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.HttpClientConnection;\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpHost;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.protocol.HttpContext;\n\nclass ApacheHttpClient {\n    void foo(HttpClientConnection con, HttpHost target, HttpRequest request, HttpContext context,\n            ResponseHandler&lt;?&gt; responseHandler, HttpUriRequest uriRequest, HttpEntityEnclosingRequest eeRequest)\n            throws Exception {\n        HttpClient client = HttpClientBuilder.create().build();\n\n        // All the following are Questionable\n        client.execute(target, request);\n        client.execute(target, request, context);\n        client.execute(target, request, responseHandler);\n        client.execute(target, request, responseHandler, context);\n        client.execute(uriRequest);\n        client.execute(uriRequest, context);\n        client.execute(uriRequest, responseHandler);\n        client.execute(uriRequest, responseHandler, context);\n        con.sendRequestEntity(eeRequest);\n        con.sendRequestHeader(request);\n    }\n}\n</pre>\n<pre>\n// === google-http-java-client ===\nimport java.util.concurrent.Executor;\nimport com.google.api.client.http.GenericUrl;\nimport com.google.api.client.http.HttpRequest;\nimport com.google.api.client.http.HttpRequestFactory;\nimport com.google.api.client.http.javanet.NetHttpTransport;\n\nclass GoogleHttpClient {\n    void foo(Executor executor) throws Exception {\n        HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();\n        HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(\"http://example.com\"));\n\n        // All the following are Questionable\n        request.execute();\n        request.executeAsync();\n        request.executeAsync(executor);\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/200.html\">MITRE, CWE-200</a> - Information Exposure </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:MaximumInheritanceDepth",
        "repo": "squid",
        "name": "Inheritance tree of classes should not be too deep",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>",
        "mdDesc": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S110",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum depth of the inheritance tree. (Number)",
                "defaultValue": "5",
                "type": "INTEGER"
            },
            {
                "key": "filteredClasses",
                "htmlDesc": "Classes to be filtered out of the count of inheritance. Ex : java.fwk.AbstractFwkClass, java.fwkPackage.*",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "30min",
        "defaultDebtRemFnOffset": "4h",
        "effortToFixDescription": "Number of parents above the defined threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "30min",
        "debtRemFnOffset": "4h",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "30min",
        "defaultRemFnBaseEffort": "4h",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "30min",
        "remFnBaseEffort": "4h",
        "remFnOverloaded": false,
        "gapDescription": "Number of parents above the defined threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3864",
        "repo": "squid",
        "name": "\"Stream.peek\" should be used with caution",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to its JavaDocs, <code>java.util.Stream.peek()</code> “exists mainly to support debugging” purposes. Although this does not mean that\nusing it for other purposes is discouraged, relying on <code>peek()</code> without careful consideration can lead to error-prone code such as:</p>\n<ul>\n  <li> If the stream pipeline does not include a terminal operation, no elements will be consumed and the <code>peek()</code> action will not be\n  invoked at all. </li>\n  <li> As long as a stream implementation can reach the final step, it can freely optimize processing by only producing some elements or even none at\n  all (e.g. relying on other collection methods for counting elements). Accordingly, the <code>peek()</code> action will be invoked for fewer elements\n  or not at all. </li>\n</ul>\n<p>This rule raises an issue for each use of <code>peek()</code> to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .peek(e -&gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\">Java 8 API Documentation</a>\n  </li>\n  <li> 4comprehension: <a href=\"https://4comprehension.com/idiomatic-peeking/\">Idiomatic Peeking with Java Stream API</a> </li>\n  <li> Data Geekery: <a href=\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n</ul>",
        "mdDesc": "<p>According to its JavaDocs, <code>java.util.Stream.peek()</code> “exists mainly to support debugging” purposes. Although this does not mean that\nusing it for other purposes is discouraged, relying on <code>peek()</code> without careful consideration can lead to error-prone code such as:</p>\n<ul>\n  <li> If the stream pipeline does not include a terminal operation, no elements will be consumed and the <code>peek()</code> action will not be\n  invoked at all. </li>\n  <li> As long as a stream implementation can reach the final step, it can freely optimize processing by only producing some elements or even none at\n  all (e.g. relying on other collection methods for counting elements). Accordingly, the <code>peek()</code> action will be invoked for fewer elements\n  or not at all. </li>\n</ul>\n<p>This rule raises an issue for each use of <code>peek()</code> to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .peek(e -&gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\">Java 8 API Documentation</a>\n  </li>\n  <li> 4comprehension: <a href=\"https://4comprehension.com/idiomatic-peeking/\">Idiomatic Peeking with Java Stream API</a> </li>\n  <li> Data Geekery: <a href=\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1201",
        "repo": "squid",
        "name": "\"equals\" method overrides should accept \"Object\" parameters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>",
        "mdDesc": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1444",
        "repo": "squid",
        "name": "\"public static\" fields should be constant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>",
        "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3985",
        "repo": "squid",
        "name": "Unused \"private\" classes should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>",
        "mdDesc": "<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3986",
        "repo": "squid",
        "name": "Week Year (\"YYYY\") should not be used for date formatting",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first\nor last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the last week of December and the first week of\nJanuary, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\n</pre>\n<h2>Exceptions</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\n</pre>",
        "mdDesc": "<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first\nor last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the last week of December and the first week of\nJanuary, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\n</pre>\n<h2>Exceptions</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1200",
        "repo": "squid",
        "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>",
        "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum number of classes a single class is allowed to depend upon",
                "defaultValue": "20",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2653",
        "repo": "squid",
        "name": "Web applications should not have a \"main\" method",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoB8Bw\">CERT, ENV06-J.</a> - Production code must not contain debugging entry points\n  </li>\n</ul>",
        "mdDesc": "<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoB8Bw\">CERT, ENV06-J.</a> - Production code must not contain debugging entry points\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "jee",
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3984",
        "repo": "squid",
        "name": "Exception should not be created without being thrown",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>",
        "mdDesc": "<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:IndentationCheck",
        "repo": "squid",
        "name": "Source code should be indented consistently",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1120",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "style"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "indentationLevel",
                "htmlDesc": "Number of white-spaces of an indent.",
                "defaultValue": "2",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3981",
        "repo": "squid",
        "name": "Collection sizes and array length comparisons should make sense",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myList.size() &gt;= 0) { ... }\n\nif (myList.size() &lt; 0) { ... }\n\nboolean result = myArray.length &gt;= 0;\n\nif (0 &gt; myArray.length) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!myList.isEmpty()) { ... }\n\nif (myArray.length &gt;= 42) { ... }\n</pre>",
        "mdDesc": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myList.size() &gt;= 0) { ... }\n\nif (myList.size() &lt; 0) { ... }\n\nboolean result = myArray.length &gt;= 0;\n\nif (0 &gt; myArray.length) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!myList.isEmpty()) { ... }\n\nif (myArray.length &gt;= 42) { ... }\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3749",
        "repo": "squid",
        "name": "Members of Spring components should be injected",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations: <code>@Resource</code>,\n<code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>\n<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. </p>\n<p>This rule raises an issue when a singleton <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code> has non-<code>static</code>\nmembers that are not annotated with one of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations: <code>@Resource</code>,\n<code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>\n<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. </p>\n<p>This rule raises an issue when a singleton <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code> has non-<code>static</code>\nmembers that are not annotated with one of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a3",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "customInjectionAnnotations",
                "htmlDesc": "comma-separated list of FQDN annotation names to consider as valid",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4719",
        "repo": "squid",
        "name": "\"StandardCharsets\" constants should be preferred",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.</p>\n<ul>\n  <li> ISO_8859_1 </li>\n  <li> US_ASCII </li>\n  <li> UTF_16 </li>\n  <li> UTF_16BE </li>\n  <li> UTF_16LE </li>\n  <li> UTF_8 </li>\n</ul>\n<p>These constants should be preferred to:</p>\n<p>- the use of a String such as \"UTF-8\" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an\n<code>UnsupportedEncodingException</code> that will never actually happen</p>\n<p>- the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  byte[] bytes = string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nbyte[] bytes = string.getBytes(StandardCharsets.UTF_8)\n</pre>",
        "mdDesc": "<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.</p>\n<ul>\n  <li> ISO_8859_1 </li>\n  <li> US_ASCII </li>\n  <li> UTF_16 </li>\n  <li> UTF_16BE </li>\n  <li> UTF_16LE </li>\n  <li> UTF_8 </li>\n</ul>\n<p>These constants should be preferred to:</p>\n<p>- the use of a String such as \"UTF-8\" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an\n<code>UnsupportedEncodingException</code> that will never actually happen</p>\n<p>- the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  byte[] bytes = string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nbyte[] bytes = string.getBytes(StandardCharsets.UTF_8)\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "java7"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4838",
        "repo": "squid",
        "name": "An iteration on a Collection should be performed on the type handled by the Collection",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the\n<code>Collection</code>.</p>\n<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not\nrecommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Collection&lt;Person&gt; getPersons() { ... }\n\nfor (Object item : getPersons()) { // Noncompliant\n  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use \"item\"\n  person.getAdress();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress() ;\n}\n</pre>",
        "mdDesc": "<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the\n<code>Collection</code>.</p>\n<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not\nrecommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Collection&lt;Person&gt; getPersons() { ... }\n\nfor (Object item : getPersons()) { // Noncompliant\n  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use \"item\"\n  person.getAdress();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress() ;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1449",
        "repo": "squid",
        "name": "Locale should be used in String operations",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwAiAg\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing\n  locale-dependent data </li>\n</ul>",
        "mdDesc": "<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwAiAg\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing\n  locale-dependent data </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2658",
        "repo": "squid",
        "name": "Classes should not be loaded dynamically",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n</ul>",
        "mdDesc": "<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "45min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "45min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "45min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "45min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3626",
        "repo": "squid",
        "name": "Jump statements should not be redundant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1448",
        "repo": "squid",
        "name": "Classes should not have too many methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
        "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "countNonpublicMethods",
                "htmlDesc": "Whether or not to include non-public methods in the count.",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "maximumMethodThreshold",
                "htmlDesc": "The maximum number of methods authorized in a class.",
                "defaultValue": "35",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1206",
        "repo": "squid",
        "name": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>",
        "mdDesc": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4087",
        "repo": "squid",
        "name": "\"close()\" calls should not be redundant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>",
        "mdDesc": "<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4834",
        "repo": "squid",
        "name": "Controlling permissions is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999\">CVE-2018-12999</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285\">CVE-2018-10285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455\">CVE-2017-7455</a> </li>\n</ul>\n<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be\ndone properly.</p>\n<p>This rule flags code that controls the access to resources and actions. The goal is to guide security code reviews.</p>\n<p>More specifically it will raise issues on the following Spring code:</p>\n<ul>\n  <li> The definition of any class implementing interfaces </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionVoter</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionManager</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AfterInvocationProvider</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.PermissionEvaluator</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.SecurityExpressionOperations</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.method.MethodSecurityExpressionHandler</code></p>\n<p> <strong></strong> <code>org.springframework.security.core.GrantedAuthority</code></p>\n<p> <strong></strong> <code>org.springframework.security.acls.model.PermissionGrantingStrategy</code></p>\n<ul>\n  <li> The definition of any class extending class </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration</code></p>\n<ul>\n  <li> Any method annotated with </li>\n</ul>\n<p> <strong></strong> Pre-post annotations: <code>@PreAuthorize</code>, <code>@PreFilter</code>, <code>@PostAuthorize</code> or\n<code>@PostFilter</code> from <code>org.springframework.security.access.prepost</code> package.</p>\n<p> <strong></strong> <code>@org.springframework.security.access.annotation.Secured</code></p>\n<ul>\n  <li> Calls to any of the following methods </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.acls.model.MutableAclService</code>: <code>createAcl</code>, <code>deleteAcl</code>,\n<code>updateAcl</code></p>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>: <code>authorizeRequests</code></p>\n<ul>\n  <li> The instantiation of an anonymous class implementing <code>org.springframework.security.core.GrantedAuthority</code> or of any class\n  implementing this interface directly. </li>\n</ul>\n<p>It will also raise issue on JSR-250 annotations <code>@RolesAllowed</code>, <code>@PermitAll</code> and <code>@DenyAll</code> from\n<code>javax.annotation.security</code> package.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> at least one accessed action or resource is security-sensitive. </li>\n  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>\n  <li> users have permissions they don't need. </li>\n  <li> the access control is based on a user input or on some other unsafe data. </li>\n  <li> permissions are difficult to remove or take a long time to be updated. </li>\n</ul>\n<p>You are at risk if you answered yes to the first question and any of the following ones.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The first step is to restrict all sensitive actions to authenticated users.</p>\n<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The\nmore sensitive it is, the less people should have access to it. </p>\n<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a\nuser's permissions from an HTTP cookie as it can be modified client-side.</p>\n<p>Check that the access to each action and resource is properly restricted.</p>\n<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your\nsystems when a breach occurs.</p>\n<p>Log and monitor refused access requests as they can reveal an attack.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999\">CVE-2018-12999</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285\">CVE-2018-10285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455\">CVE-2017-7455</a> </li>\n</ul>\n<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be\ndone properly.</p>\n<p>This rule flags code that controls the access to resources and actions. The goal is to guide security code reviews.</p>\n<p>More specifically it will raise issues on the following Spring code:</p>\n<ul>\n  <li> The definition of any class implementing interfaces </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionVoter</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionManager</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AfterInvocationProvider</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.PermissionEvaluator</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.SecurityExpressionOperations</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.method.MethodSecurityExpressionHandler</code></p>\n<p> <strong></strong> <code>org.springframework.security.core.GrantedAuthority</code></p>\n<p> <strong></strong> <code>org.springframework.security.acls.model.PermissionGrantingStrategy</code></p>\n<ul>\n  <li> The definition of any class extending class </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration</code></p>\n<ul>\n  <li> Any method annotated with </li>\n</ul>\n<p> <strong></strong> Pre-post annotations: <code>@PreAuthorize</code>, <code>@PreFilter</code>, <code>@PostAuthorize</code> or\n<code>@PostFilter</code> from <code>org.springframework.security.access.prepost</code> package.</p>\n<p> <strong></strong> <code>@org.springframework.security.access.annotation.Secured</code></p>\n<ul>\n  <li> Calls to any of the following methods </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.acls.model.MutableAclService</code>: <code>createAcl</code>, <code>deleteAcl</code>,\n<code>updateAcl</code></p>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>: <code>authorizeRequests</code></p>\n<ul>\n  <li> The instantiation of an anonymous class implementing <code>org.springframework.security.core.GrantedAuthority</code> or of any class\n  implementing this interface directly. </li>\n</ul>\n<p>It will also raise issue on JSR-250 annotations <code>@RolesAllowed</code>, <code>@PermitAll</code> and <code>@DenyAll</code> from\n<code>javax.annotation.security</code> package.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> at least one accessed action or resource is security-sensitive. </li>\n  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>\n  <li> users have permissions they don't need. </li>\n  <li> the access control is based on a user input or on some other unsafe data. </li>\n  <li> permissions are difficult to remove or take a long time to be updated. </li>\n</ul>\n<p>You are at risk if you answered yes to the first question and any of the following ones.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The first step is to restrict all sensitive actions to authenticated users.</p>\n<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The\nmore sensitive it is, the less people should have access to it. </p>\n<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a\nuser's permissions from an HTTP cookie as it can be modified client-side.</p>\n<p>Check that the access to each action and resource is properly restricted.</p>\n<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your\nsystems when a breach occurs.</p>\n<p>Log and monitor refused access requests as they can reveal an attack.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a5",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:RightCurlyBraceStartLineCheck",
        "repo": "squid",
        "name": "A close curly brace should be located at the beginning of a line",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
        "mdDesc": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1109",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1940",
        "repo": "squid",
        "name": "Boolean checks should not be inverted",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>",
        "mdDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1943",
        "repo": "squid",
        "name": "Classes and methods that rely on the default system encoding should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul> </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul> </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul> </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FoL5AQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating\n  string data between JVMs </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JgAWCQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a\n  string </li>\n</ul>",
        "mdDesc": "<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul> </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul> </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul> </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FoL5AQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating\n  string data between JVMs </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JgAWCQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a\n  string </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "i18n",
            "unpredictable"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1948",
        "repo": "squid",
        "name": "Fields in a \"Serializable\" class should either be transient or serializable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>",
        "mdDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2912",
        "repo": "squid",
        "name": "\"indexOf\" checks should use a start position",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus\nthe target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>",
        "mdDesc": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus\nthe target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1821",
        "repo": "squid",
        "name": "\"switch\" statements should not be nested",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as\nbelonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving\nthe inner <code>switch</code> to another function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as\nbelonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving\nthe inner <code>switch</code> to another function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1942",
        "repo": "squid",
        "name": "Simple class names should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>",
        "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing",
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1700",
        "repo": "squid",
        "name": "A field should not duplicate the name of its containing class",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>",
        "mdDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1820",
        "repo": "squid",
        "name": "Classes should not have too many fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
        "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "countNonpublicFields",
                "htmlDesc": "Whether or not to include non-public fields in the count",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "maximumFieldThreshold",
                "htmlDesc": "The maximum number of fields",
                "defaultValue": "20",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1941",
        "repo": "squid",
        "name": "Variables should not be declared before they are relevant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>",
        "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:RightCurlyBraceSameLineAsNextBlockCheck",
        "repo": "squid",
        "name": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>",
        "mdDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1107",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1905",
        "repo": "squid",
        "name": "Redundant casts should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>",
        "mdDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1939",
        "repo": "squid",
        "name": "Extensions and implementations should not be redundant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>",
        "mdDesc": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4065",
        "repo": "squid",
        "name": "\"ThreadLocal.withInitial\" should be preferred",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>",
        "mdDesc": "<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:CallToDeprecatedMethod",
        "repo": "squid",
        "name": "\"@Deprecated\" code should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>",
        "mdDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1874",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "obsolete"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:CallToFileDeleteOnExitMethod",
        "repo": "squid",
        "name": "\"deleteOnExit\" should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>",
        "mdDesc": "<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S2308",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:SwitchLastCaseIsDefaultCheck",
        "repo": "squid",
        "name": "\"switch\" statements should have \"default\" clauses",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>",
        "mdDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "internalKey": "S131",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1610",
        "repo": "squid",
        "name": "Abstract classes without fields should be converted to interfaces",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>",
        "mdDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1850",
        "repo": "squid",
        "name": "\"instanceof\" operators that always return \"true\" or \"false\" should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2589'>S2589</a> instead.</p>",
        "mdDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2589} instead.</p>",
        "severity": "MAJOR",
        "status": "DEPRECATED",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1858",
        "repo": "squid",
        "name": "\"toString()\" should never be called on a String object",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>",
        "mdDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "finding"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S5042",
        "repo": "squid",
        "name": "Expanding archive files is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263\">CVE-2018-1263</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131\">CVE-2018-16131</a> </li>\n</ul>\n<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust\nblindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.\nAlso, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use\na specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors\nor memory of the operating system where the archive is expanded making the target OS completely unusable.</p>\n<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> there is no validation of the name of the archive entry </li>\n  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>\n  <li> there is no validation of the size of the expanded archive entry </li>\n  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Validate the full path of the extracted file against the full path of the directory where files are uncompressed.\n    <ul>\n      <li> the canonical path of the uncompressed file must start with the canonical path of the directory where files are extracted. </li>\n      <li> the name of the archive entry must not contain \"..\", i.e. reference to a parent directory. </li>\n    </ul> </li>\n</ul>\n<pre>\nString canonicalDirPath = outputDir.getCanonicalPath();\nString canonicalDestPath = targetFile.getCanonicalPath();\n\nif (!canonicalDestPath.startsWith(canonicalDirPath + File.separator)) { // Sanitizer\n  throw new ArchiverException(\"Entry is trying to leave the target dir: \" + zipEntry.getName());\n}\n</pre>\n<ul>\n  <li> Stop extracting the archive if any of its entries has been tainted with a directory traversal path. </li>\n  <li> Define and control the ratio between compressed and uncompress bytes. </li>\n  <li> Define and control the maximum allowed uncompressed file size. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.\n  </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\njava.util.zip.ZipFile zipFile = new ZipFile(zipFileName);\n\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\nwhile (entries.hasMoreElements()) {\n  ZipEntry e = entries.nextElement(); // Questionable\n  File f = new File(outputDir, e.getName());\n  InputStream input = zipFile.getInputStream(e);\n  extractFile(new ZipInputStream(input), outputDir, e.getName());\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when a ZipEntry or a ArchiveEntry:</p>\n<ul>\n  <li> is declared as a class field </li>\n  <li> is a parameter of an abstract method of an <code>interface</code> or <code>abstract</code> class </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/409.html\">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream\">CERT, IDS04-J.</a> - Safely\n  extract files from ZipInputStream </li>\n  <li> Snyk Research Team: <a href=\"https://snyk.io/research/zip-slip-vulnerability\">Zip Slip Vulnerability</a> </li>\n</ul>",
        "mdDesc": "<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263\">CVE-2018-1263</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131\">CVE-2018-16131</a> </li>\n</ul>\n<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust\nblindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.\nAlso, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use\na specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors\nor memory of the operating system where the archive is expanded making the target OS completely unusable.</p>\n<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> there is no validation of the name of the archive entry </li>\n  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>\n  <li> there is no validation of the size of the expanded archive entry </li>\n  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Validate the full path of the extracted file against the full path of the directory where files are uncompressed.\n    <ul>\n      <li> the canonical path of the uncompressed file must start with the canonical path of the directory where files are extracted. </li>\n      <li> the name of the archive entry must not contain \"..\", i.e. reference to a parent directory. </li>\n    </ul> </li>\n</ul>\n<pre>\nString canonicalDirPath = outputDir.getCanonicalPath();\nString canonicalDestPath = targetFile.getCanonicalPath();\n\nif (!canonicalDestPath.startsWith(canonicalDirPath + File.separator)) { // Sanitizer\n  throw new ArchiverException(\"Entry is trying to leave the target dir: \" + zipEntry.getName());\n}\n</pre>\n<ul>\n  <li> Stop extracting the archive if any of its entries has been tainted with a directory traversal path. </li>\n  <li> Define and control the ratio between compressed and uncompress bytes. </li>\n  <li> Define and control the maximum allowed uncompressed file size. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.\n  </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\njava.util.zip.ZipFile zipFile = new ZipFile(zipFileName);\n\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\nwhile (entries.hasMoreElements()) {\n  ZipEntry e = entries.nextElement(); // Questionable\n  File f = new File(outputDir, e.getName());\n  InputStream input = zipFile.getInputStream(e);\n  extractFile(new ZipInputStream(input), outputDir, e.getName());\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when a ZipEntry or a ArchiveEntry:</p>\n<ul>\n  <li> is declared as a class field </li>\n  <li> is a parameter of an abstract method of an <code>interface</code> or <code>abstract</code> class </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/409.html\">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream\">CERT, IDS04-J.</a> - Safely\n  extract files from ZipInputStream </li>\n  <li> Snyk Research Team: <a href=\"https://snyk.io/research/zip-slip-vulnerability\">Zip Slip Vulnerability</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S1611",
        "repo": "squid",
        "name": "Parentheses should be removed from a single lambda input parameter when its type is inferred",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>",
        "mdDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1612",
        "repo": "squid",
        "name": "Lambdas should be replaced with method references",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null</code> checks\ncan be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>",
        "mdDesc": "<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null</code> checks\ncan be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1854",
        "repo": "squid",
        "name": "Dead stores should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a + b; // Noncompliant; calculation result not used before value is overwritten\ni = compute();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ni = a + b;\ni += compute();\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>\"\"</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n</ul>",
        "mdDesc": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a + b; // Noncompliant; calculation result not used before value is overwritten\ni = compute();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ni = a + b;\ni += compute();\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>\"\"</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2701",
        "repo": "squid",
        "name": "Literal boolean values should not be used in assertions",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(true).isTrue(); // Noncompliant\n</pre>",
        "mdDesc": "<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(true).isTrue(); // Noncompliant\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "junit",
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1609",
        "repo": "squid",
        "name": "@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as\n<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and\n<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or\nMethod references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would\nbreak the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
        "mdDesc": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as\n<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and\n<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or\nMethod references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would\nbreak the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
        "severity": "CRITICAL",
        "status": "DEPRECATED",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1860",
        "repo": "squid",
        "name": "Synchronization should not be based on Strings or boxed primitives",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of\n<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\ntwo.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rQGeAQ\">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>\n</ul>",
        "mdDesc": "<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of\n<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\ntwo.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rQGeAQ\">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1862",
        "repo": "squid",
        "name": "Related \"if/else if\" statements should not have the same condition",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "mdDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "pitfall",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2959",
        "repo": "squid",
        "name": "Unnecessary semicolons should be omitted",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>",
        "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:HiddenFieldCheck",
        "repo": "squid",
        "name": "Local variables should not shadow class fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>",
        "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1117",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1989",
        "repo": "squid",
        "name": "Exceptions should not be thrown from servlet methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/600.html\">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/s4EVAQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information\n  </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/600.html\">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/s4EVAQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information\n  </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "error-handling",
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2718",
        "repo": "squid",
        "name": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>\nclass from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant = truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n</pre>",
        "mdDesc": "<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>\nclass from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant = truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8",
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3923",
        "repo": "squid",
        "name": "All branches in a conditional structure should not have exactly the same implementation",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>",
        "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S134",
        "repo": "squid",
        "name": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum allowed control flow statement nesting depth.",
                "defaultValue": "3",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2924",
        "repo": "squid",
        "name": "JUnit rules should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>",
        "mdDesc": "<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "tests",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2925",
        "repo": "squid",
        "name": "\"Thread.sleep\" should not be used in tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>",
        "mdDesc": "<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1710",
        "repo": "squid",
        "name": "Annotation repetitions should not be wrapped",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>",
        "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1711",
        "repo": "squid",
        "name": "Standard functional interfaces should not be redefined",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>",
        "mdDesc": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S124",
        "repo": "squid",
        "name": "Track comments matching a regular expression",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>",
        "mdDesc": "<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": true,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "regularExpression",
                "htmlDesc": "The regular expression",
                "type": "STRING"
            },
            {
                "key": "message",
                "htmlDesc": "The issue message",
                "defaultValue": "The regular expression matches this comment.",
                "type": "STRING"
            }
        ],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S126",
        "repo": "squid",
        "name": "\"if ... else if\" constructs should end with \"else\" clauses",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>",
        "mdDesc": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:MethodCyclomaticComplexity",
        "repo": "squid",
        "name": "Methods should not be too complex",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>",
        "mdDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>",
        "severity": "CRITICAL",
        "status": "READY",
        "internalKey": "S1541",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "Threshold",
                "htmlDesc": "The maximum authorized complexity.",
                "defaultValue": "10",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "1min",
        "defaultDebtRemFnOffset": "10min",
        "effortToFixDescription": "per complexity point above the threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "1min",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "1min",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "1min",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "gapDescription": "per complexity point above the threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S128",
        "repo": "squid",
        "name": "Switch cases should end with an unconditional \"break\" statement",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>",
        "mdDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1607",
        "repo": "squid",
        "name": "Tests should not be ignored",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't raise an issue if there is a comment in the @Ignore annotation</p>",
        "mdDesc": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't raise an issue if there is a comment in the @Ignore annotation</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious",
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1604",
        "repo": "squid",
        "name": "Anonymous inner classes containing only one method should become lambdas",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>",
        "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1845",
        "repo": "squid",
        "name": "Methods and field names should not be the same or differ only by capitalization",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>",
        "mdDesc": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1849",
        "repo": "squid",
        "name": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the\n<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>",
        "mdDesc": "<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the\n<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:MissingDeprecatedCheck",
        "repo": "squid",
        "name": "Deprecated elements should have both the annotation and the Javadoc tag",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>",
        "mdDesc": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1123",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "obsolete"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1602",
        "repo": "squid",
        "name": "Lamdbas containing only one statement should not nest this statement in a block",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>",
        "mdDesc": "<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "java8"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1844",
        "repo": "squid",
        "name": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>",
        "mdDesc": "<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S135",
        "repo": "squid",
        "name": "Loops should not contain more than a single \"break\" or \"continue\" statement",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>",
        "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "20min",
        "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "20min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "20min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "20min",
        "remFnOverloaded": false,
        "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S138",
        "repo": "squid",
        "name": "Methods should not have too many lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>",
        "mdDesc": "<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum authorized lines in a method",
                "defaultValue": "75",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2188",
        "repo": "squid",
        "name": "JUnit test cases should call super methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>",
        "mdDesc": "<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3038",
        "repo": "squid",
        "name": "Abstract methods should not be redundant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>",
        "mdDesc": "<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4248",
        "repo": "squid",
        "name": "Regex patterns should not be created needlessly",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>\n<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or\n<code>String.split()</code>.</p>\n<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>\n  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a\n  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting\n  the previous rule. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doingSomething(String stringToMatch) {\n  Pattern regex = Pattern.compile(\"myRegex\");  // Noncompliant\n  Matcher matcher = regex.matcher(\"s\");\n  // ...\n  if (stringToMatch.matches(\"myRegex2\")) {  // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Pattern myRegex = Pattern.compile(\"myRegex\");\nprivate static final Pattern myRegex2 = Pattern.compile(\"myRegex2\");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher = myRegex.matcher(\"s\");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>String.split</code> doesn't create a regex when the string passed as argument meets either of these 2 conditions:</p>\n<ul>\n  <li> It is a one-char String and this character is not one of the RegEx's meta characters \".$|()[{^?*+\\\" </li>\n  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>\n</ul>\n<p>In which case no issue will be raised.</p>",
        "mdDesc": "<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>\n<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or\n<code>String.split()</code>.</p>\n<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>\n  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a\n  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting\n  the previous rule. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doingSomething(String stringToMatch) {\n  Pattern regex = Pattern.compile(\"myRegex\");  // Noncompliant\n  Matcher matcher = regex.matcher(\"s\");\n  // ...\n  if (stringToMatch.matches(\"myRegex2\")) {  // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Pattern myRegex = Pattern.compile(\"myRegex\");\nprivate static final Pattern myRegex2 = Pattern.compile(\"myRegex2\");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher = myRegex.matcher(\"s\");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>String.split</code> doesn't create a regex when the string passed as argument meets either of these 2 conditions:</p>\n<ul>\n  <li> It is a one-char String and this character is not one of the RegEx's meta characters \".$|()[{^?*+\\\" </li>\n  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>\n</ul>\n<p>In which case no issue will be raised.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance",
            "regex"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2189",
        "repo": "squid",
        "name": "Loops should not be infinite",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>",
        "mdDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3398",
        "repo": "squid",
        "name": "\"private\" methods called only by inner classes should be moved to those classes",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2068",
        "repo": "squid",
        "name": "Credentials should not be hard-coded",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<p>It's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=steve&amp;password=blue\"); // Noncompliant\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); // Noncompliant\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(\"userName\", \"1234\".toCharArray());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>",
        "mdDesc": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<p>It's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=steve&amp;password=blue\"); // Noncompliant\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); // Noncompliant\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(\"userName\", \"1234\".toCharArray());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a2",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "credentialWords",
                "htmlDesc": "Comma separated list of words identifying potential credentials",
                "defaultValue": "password,passwd,pwd,passphrase,java.naming.security.credentials",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2186",
        "repo": "squid",
        "name": "JUnit assertions should not be used in \"run\" methods",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>",
        "mdDesc": "<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "tests"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4488",
        "repo": "squid",
        "name": "Composed \"@RequestMapping\" variants should be preferred",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.\nThe use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>\nshould be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n@RequestMapping(path = \"/greeting\", method = RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>\n<h1>Compliant Solution</h1>\n<pre>\n@GetMapping(path = \"/greeting\") // Compliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>",
        "mdDesc": "<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.\nThe use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>\nshould be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n@RequestMapping(path = \"/greeting\", method = RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>\n<h1>Compliant Solution</h1>\n<pre>\n@GetMapping(path = \"/greeting\") // Compliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2065",
        "repo": "squid",
        "name": "Fields in non-serializable classes should not be \"transient\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>",
        "mdDesc": "<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "serialization",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2187",
        "repo": "squid",
        "name": "TestCases should contain tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with\n\"Test\" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory have \"Test\" in the name or implement <code>TestCase</code> but don't contain any\ntests.</p>",
        "mdDesc": "<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with\n\"Test\" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory have \"Test\" in the name or implement <code>TestCase</code> but don't contain any\ntests.</p>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing",
            "tests",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3034",
        "repo": "squid",
        "name": "Raw byte values should not be used in bitwise operations in combination with shifts",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are\nautomatically promoted, but that promotion can have unexpected results.</p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of\n(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,\n-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>\n<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of\nthe bytes without taking care of the sign will not produce the expected result. </p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>\n(255) and turn all the higher bits back off.</p>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); // Noncompliant\n    }\n    return result;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SAHEAw\">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>\n</ul>",
        "mdDesc": "<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are\nautomatically promoted, but that promotion can have unexpected results.</p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of\n(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,\n-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>\n<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of\nthe bytes without taking care of the sign will not produce the expected result. </p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>\n(255) and turn all the higher bits back off.</p>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); // Noncompliant\n    }\n    return result;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SAHEAw\">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2063",
        "repo": "squid",
        "name": "Comparators should be \"Serializable\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the\noverhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>",
        "mdDesc": "<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the\noverhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall",
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2066",
        "repo": "squid",
        "name": "\"Serializable\" inner classes of non-serializable classes should be \"static\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not\nserializable, then serialization will fail, resulting in a runtime error. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant; serialization will fail\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>",
        "mdDesc": "<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not\nserializable, then serialization will fail, resulting in a runtime error. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant; serialization will fail\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2184",
        "repo": "squid",
        "name": "Math operands should be cast before assignment",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect. </p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/190\">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/woIyAQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point\n  operations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AxE\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>",
        "mdDesc": "<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect. </p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/190\">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/woIyAQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point\n  operations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AxE\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra",
            "overflow",
            "sans-top25-risky"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3032",
        "repo": "squid",
        "name": "JEE applications should not \"getClassLoader\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using the standard <code>getClassLoader()</code> may not return the <em>right</em> class loader in a JEE context. Instead, go through the\n<code>currentThread</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nClassLoader cl = this.getClass().getClassLoader();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClassLoader cl = Thread.currentThread().getContextClassLoader();\n</pre>",
        "mdDesc": "<p>Using the standard <code>getClassLoader()</code> may not return the <em>right</em> class loader in a JEE context. Instead, go through the\n<code>currentThread</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nClassLoader cl = this.getClass().getClassLoader();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClassLoader cl = Thread.currentThread().getContextClassLoader();\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "jee"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2061",
        "repo": "squid",
        "name": "Custom serialization method signatures should meet requirements",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can\nchoose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they\nwill be ignored and the default serialization mechanisms will kick back in. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  // Noncompliant; not private\n  {...}\n\n  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  private void writeObject(java.io.ObjectOutputStream out)\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/4gAMAg\">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization\n  methods </li>\n</ul>",
        "mdDesc": "<p>Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can\nchoose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they\nwill be ignored and the default serialization mechanisms will kick back in. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  // Noncompliant; not private\n  {...}\n\n  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  private void writeObject(java.io.ObjectOutputStream out)\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/4gAMAg\">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization\n  methods </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2185",
        "repo": "squid",
        "name": "Silly math should not be performed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>",
        "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3030",
        "repo": "squid",
        "name": "Classes should not have too many \"static\" imports",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value: 4</p>\n<pre>\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n</pre>",
        "mdDesc": "<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value: 4</p>\n<pre>\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "threshold",
                "htmlDesc": "The maximum number of static imports allowed",
                "defaultValue": "4",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S106",
        "repo": "squid",
        "name": "Standard outputs should not be used directly to log anything",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\"My Message\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\"My Message\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RoElAQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>",
        "mdDesc": "<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\"My Message\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\"My Message\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RoElAQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2060",
        "repo": "squid",
        "name": "\"Externalizable\" classes should have no-arguments constructors",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first\nstep in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a\nno-arg constructor cannot be deserialized.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>",
        "mdDesc": "<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first\nstep in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a\nno-arg constructor cannot be deserialized.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2062",
        "repo": "squid",
        "name": "\"readResolve\" methods should be inheritable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>",
        "mdDesc": "<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2183",
        "repo": "squid",
        "name": "Ints and longs should not be shifted by zero or more than their number of bits-1",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts\n32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an <code>int</code> by 32 is the same as shifting it\nby 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting <code>long</code> by 64 is the\nsame as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int shift(int a) {\n  int x = a &gt;&gt; 32; // Noncompliant\n  return a &lt;&lt; 48;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int shift(int a) {\n  int x = a &gt;&gt; 31;\n  return a &lt;&lt; 16;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>\n<ul>\n  <li> When the value shifted is a literal. </li>\n  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>\n</ul>\n<pre>\nbytes[loc+0] = (byte)(value &gt;&gt; 8);\nbytes[loc+1] = (byte)(value &gt;&gt; 0);\n</pre>",
        "mdDesc": "<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts\n32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an <code>int</code> by 32 is the same as shifting it\nby 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting <code>long</code> by 64 is the\nsame as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int shift(int a) {\n  int x = a &gt;&gt; 32; // Noncompliant\n  return a &lt;&lt; 48;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int shift(int a) {\n  int x = a &gt;&gt; 31;\n  return a &lt;&lt; 16;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>\n<ul>\n  <li> When the value shifted is a literal. </li>\n  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>\n</ul>\n<pre>\nbytes[loc+0] = (byte)(value &gt;&gt; 8);\nbytes[loc+1] = (byte)(value &gt;&gt; 0);\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S109",
        "repo": "squid",
        "name": "Magic numbers should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>",
        "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "Authorized numbers",
                "htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2",
                "defaultValue": "-1,0,1",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3046",
        "repo": "squid",
        "name": "\"wait\" should not be called when multiple locks are held",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}\n</pre>",
        "mdDesc": "<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "deadlock",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2197",
        "repo": "squid",
        "name": "Modulus results should not be checked for direct equality",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 != 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/xAHAAQ\">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQBi\">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n  </li>\n</ul>",
        "mdDesc": "<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 != 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/xAHAAQ\">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQBi\">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3047",
        "repo": "squid",
        "name": "Multiple loops over the same set should be combined",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>",
        "mdDesc": "<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4499",
        "repo": "squid",
        "name": "SMTP SSL connection should check server identity",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule raises an issue when:</p>\n<p>- a JavaMail's <code>javax.mail.Session</code> is created with a <code>Properties</code> object having no\n<code>mail.smtp.ssl.checkserveridentity</code> or <code>mail.smtps.ssl.checkserveridentity</code> not configured to <code>true</code></p>\n<p>- a Apache Common Emails's <code>org.apache.commons.mail.SimpleEmail</code> is used with <code>setSSLOnConnect(true)</code> or\n<code>setStartTLSEnabled(true)</code> or <code>setStartTLSRequired(true)</code> without a call to <code>setSSLCheckServerIdentity(true)</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email\nemail.send();\n</pre>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); // Noncompliant; Session is created without having \"mail.smtp.ssl.checkserveridentity\" set to true\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true);\nemail.setSSLCheckServerIdentity(true); // Compliant\nemail.send();\n</pre>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nprops.put(\"mail.smtp.ssl.checkserveridentity\", true); // Compliant\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/297.html\">CWE-297</a> - Improper Validation of Certificate with Host Mismatch </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p>This rule raises an issue when:</p>\n<p>- a JavaMail's <code>javax.mail.Session</code> is created with a <code>Properties</code> object having no\n<code>mail.smtp.ssl.checkserveridentity</code> or <code>mail.smtps.ssl.checkserveridentity</code> not configured to <code>true</code></p>\n<p>- a Apache Common Emails's <code>org.apache.commons.mail.SimpleEmail</code> is used with <code>setSSLOnConnect(true)</code> or\n<code>setStartTLSEnabled(true)</code> or <code>setStartTLSRequired(true)</code> without a call to <code>setSSLCheckServerIdentity(true)</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email\nemail.send();\n</pre>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); // Noncompliant; Session is created without having \"mail.smtp.ssl.checkserveridentity\" set to true\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true);\nemail.setSSLCheckServerIdentity(true); // Compliant\nemail.send();\n</pre>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nprops.put(\"mail.smtp.ssl.checkserveridentity\", true); // Compliant\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/297.html\">CWE-297</a> - Improper Validation of Certificate with Host Mismatch </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:EmptyStatementUsageCheck",
        "repo": "squid",
        "name": "Empty statements should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>",
        "mdDesc": "<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1116",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2077",
        "repo": "squid",
        "name": "Executing SQL queries is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019\">CVE-2018-9019</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318\">CVE-2018-7318</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611\">CVE-2017-5611</a> </li>\n</ul>\n<p><a href=\"https://www.owasp.org/index.php/SQL_Injection\">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that\nexecute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include\ninput that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL\nbinding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>\n<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are\ncovered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. Any SQL query built by concatenating or\nformatting Strings is considered susceptible. The goal is to guide security code reviews.</p>\n<ul>\n  <li> <code>org.hibernate.Session.createQuery</code> </li>\n  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>\n  <li> <code>java.sql.Statement.executeQuery</code> </li>\n  <li> <code>java.sql.Statement.execute</code> </li>\n  <li> <code>java.sql.Statement.executeUpdate</code> </li>\n  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>\n  <li> <code>java.sql.Statement.addBatch</code> </li>\n  <li> <code>java.sql.Connection.prepareStatement</code> </li>\n  <li> <code>java.sql.Connection.prepareCall</code> </li>\n  <li> <code>java.sql.Connection.nativeSQL</code> </li>\n  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>\n  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>\n  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>\n  <li> <code>javax.jdo.Query.setFilter</code> </li>\n  <li> <code>javax.jdo.Query.setGrouping</code> </li>\n</ul>\n<p>If a method is defined in an interface, implementations are also tested. For example this is the case for\n<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.\n  </li>\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> whenever possible. </li>\n  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>\n  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> every unsafe input. </li>\n</ul>\n<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); // Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  // Compliant\n            \"FROM students where fname = \" + userInput);  // Noncompliant; parameter binding should be used instead\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,userInput);  // Parameter binding escapes all input\n  // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>",
        "mdDesc": "<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019\">CVE-2018-9019</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318\">CVE-2018-7318</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611\">CVE-2017-5611</a> </li>\n</ul>\n<p><a href=\"https://www.owasp.org/index.php/SQL_Injection\">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that\nexecute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include\ninput that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL\nbinding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>\n<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are\ncovered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. Any SQL query built by concatenating or\nformatting Strings is considered susceptible. The goal is to guide security code reviews.</p>\n<ul>\n  <li> <code>org.hibernate.Session.createQuery</code> </li>\n  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>\n  <li> <code>java.sql.Statement.executeQuery</code> </li>\n  <li> <code>java.sql.Statement.execute</code> </li>\n  <li> <code>java.sql.Statement.executeUpdate</code> </li>\n  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>\n  <li> <code>java.sql.Statement.addBatch</code> </li>\n  <li> <code>java.sql.Connection.prepareStatement</code> </li>\n  <li> <code>java.sql.Connection.prepareCall</code> </li>\n  <li> <code>java.sql.Connection.nativeSQL</code> </li>\n  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>\n  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>\n  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>\n  <li> <code>javax.jdo.Query.setFilter</code> </li>\n  <li> <code>javax.jdo.Query.setGrouping</code> </li>\n</ul>\n<p>If a method is defined in an interface, implementations are also tested. For example this is the case for\n<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.\n  </li>\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> whenever possible. </li>\n  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>\n  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> every unsafe input. </li>\n</ul>\n<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); // Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  // Compliant\n            \"FROM students where fname = \" + userInput);  // Noncompliant; parameter binding should be used instead\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,userInput);  // Parameter binding escapes all input\n  // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "hibernate",
            "owasp-a1",
            "sans-top25-insecure",
            "sql"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2196",
        "repo": "squid",
        "name": "Switches should be used for sequences of simple \"String\" tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or\nmore values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (\"red\".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (\"blue\".equals(choice)) {\n  dispenseBlue();\n} else if (\"yellow\".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(choice) {\n  case \"Red\":\n    dispenseRed();\n    break;\n  case \"Blue\":\n    dispenseBlue():\n    break;\n  case \"Yellow\":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n</pre>",
        "mdDesc": "<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or\nmore values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (\"red\".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (\"blue\".equals(choice)) {\n  dispenseBlue();\n} else if (\"yellow\".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(choice) {\n  case \"Red\":\n    dispenseRed();\n    break;\n  case \"Blue\":\n    dispenseBlue():\n    break;\n  case \"Yellow\":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3042",
        "repo": "squid",
        "name": "\"writeObject\" should not be the only \"synchronized\" code in a class",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking\n<code>writeObject</code> <code>synchronized</code>, but it's highly suspicious if this serialization-related method is the only\n<code>synchronized</code> code in a <code>class</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking\n<code>writeObject</code> <code>synchronized</code>, but it's highly suspicious if this serialization-related method is the only\n<code>synchronized</code> code in a <code>class</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3282",
        "repo": "squid",
        "name": "EJB interceptor exclusions should be declared as annotations",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they\nare preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;assembly-descriptor&gt;\n      &lt;interceptor-binding&gt;\n         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;\n         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;\n         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;\n         &lt;method&gt;\n           &lt;method-name&gt;doTheThing&lt;/method-name&gt;\n         &lt;/method&gt;\n      &lt;/interceptor-binding&gt;\n\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ExcludeDefaultInterceptors\npublic class MyExcludedClass implements MessageListener\n{\n\n  @ExcludeClassInterceptors\n  @ExcludeDefaultInterceptors\n  public void doTheThing() {\n    // ...\n  }\n</pre>",
        "mdDesc": "<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they\nare preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;assembly-descriptor&gt;\n      &lt;interceptor-binding&gt;\n         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;\n         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;\n         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;\n         &lt;method&gt;\n           &lt;method-name&gt;doTheThing&lt;/method-name&gt;\n         &lt;/method&gt;\n      &lt;/interceptor-binding&gt;\n\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ExcludeDefaultInterceptors\npublic class MyExcludedClass implements MessageListener\n{\n\n  @ExcludeClassInterceptors\n  @ExcludeDefaultInterceptors\n  public void doTheThing() {\n    // ...\n  }\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4011",
        "repo": "squid",
        "name": "Track uses of disallowed constructors",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule allows banning usage of certain constructors.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className: java.util.Date </li>\n  <li> argumentTypes: java.lang.String </li>\n</ul>\n<pre>\nDate birthday;\nbirthday = new Date(\"Sat Sep 27 05:42:21 EDT 1986\");  // Noncompliant\nbirthday = new Date(528176541000L); // Compliant\n</pre>",
        "mdDesc": "<p>This rule allows banning usage of certain constructors.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className: java.util.Date </li>\n  <li> argumentTypes: java.lang.String </li>\n</ul>\n<pre>\nDate birthday;\nbirthday = new Date(\"Sat Sep 27 05:42:21 EDT 1986\");  // Noncompliant\nbirthday = new Date(528176541000L); // Compliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": true,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "className",
                "htmlDesc": "Name of the class whose constructor is forbidden. This parameter is mandatory, if absent the rule is disabled.",
                "type": "STRING"
            },
            {
                "key": "argumentTypes",
                "htmlDesc": "Comma-delimited list of argument types, E.G. java.lang.String, int[], int",
                "type": "STRING"
            },
            {
                "key": "allOverloads",
                "htmlDesc": "Set to true to flag all overloads regardless of parameter type",
                "defaultValue": "false",
                "type": "BOOLEAN"
            }
        ],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2070",
        "repo": "squid",
        "name": "SHA-1 and Message-Digest hash algorithms should not be used in secure contexts",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>\n<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>\n<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>\n<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>\n<p> * <code>java.security.MessageDigest</code> (JDK)</p>\n<p> * <code>java.security.KeyFactory</code> (JDK)</p>\n<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>\n<p> * <code>java.security.Signature</code> (JDK)</p>\n<p> * <code>javax.crypto.Mac</code> (JDK)</p>\n<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>\n<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>\n<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>\n<p> * <code>org.springframework.security.authentication.encoding.ShaPasswordEncoder</code> (Spring Security 4.2.x)</p>\n<p> * <code>org.springframework.security.authentication.encoding.Md5PasswordEncoder</code> (Spring Security 4.2.x)</p>\n<p> * <code>org.springframework.security.crypto.password.LdapShaPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.Md4PasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.MessageDigestPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.NoOpPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.StandardPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p>Consider using safer alternatives, such as SHA-256, SHA-3 or adaptive one way functions like bcrypt or PBKDF2.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA1\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"http://shattered.io/\">SHAttered</a> - The first concrete collision attack against SHA-1. </li>\n</ul>",
        "mdDesc": "<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>\n<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>\n<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>\n<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>\n<p> * <code>java.security.MessageDigest</code> (JDK)</p>\n<p> * <code>java.security.KeyFactory</code> (JDK)</p>\n<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>\n<p> * <code>java.security.Signature</code> (JDK)</p>\n<p> * <code>javax.crypto.Mac</code> (JDK)</p>\n<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>\n<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>\n<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>\n<p> * <code>org.springframework.security.authentication.encoding.ShaPasswordEncoder</code> (Spring Security 4.2.x)</p>\n<p> * <code>org.springframework.security.authentication.encoding.Md5PasswordEncoder</code> (Spring Security 4.2.x)</p>\n<p> * <code>org.springframework.security.crypto.password.LdapShaPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.Md4PasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.MessageDigestPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.NoOpPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p> * <code>org.springframework.security.crypto.password.StandardPasswordEncoder</code> (Spring Security 5.0.x)</p>\n<p>Consider using safer alternatives, such as SHA-256, SHA-3 or adaptive one way functions like bcrypt or PBKDF2.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA1\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"http://shattered.io/\">SHAttered</a> - The first concrete collision attack against SHA-1. </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6",
            "sans-top25-porous",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3281",
        "repo": "squid",
        "name": "Default EJB interceptors should be declared in \"ejb-jar.xml\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated\nas default. </p>\n<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,\n<code>Stateless</code> or <code>Stateful</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt; &lt;!-- should be declared in ejb-jar.xml --&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will NOT be treated as default --&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "mdDesc": "<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated\nas default. </p>\n<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,\n<code>Stateless</code> or <code>Stateful</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt; &lt;!-- should be declared in ejb-jar.xml --&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will NOT be treated as default --&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a6"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4347",
        "repo": "squid",
        "name": "\"SecureRandom\" seeds should not be predictable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>java.security.SecureRandom</code> class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it\nwith a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the\n<code>SecureRandom</code> implementation.</p>\n<p>This rule raises an issue when <code>SecureRandom.setSeed()</code> or <code>SecureRandom(byte[])</code> are called with a seed that is either\nof:</p>\n<ul>\n  <li> a constant </li>\n  <li> <code>System.currentTimeMillis()</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSecureRandom sr = new SecureRandom();\nsr.setSeed(123456L); // Noncompliant\nint v = sr.next(32);\n\nsr = new SecureRandom(\"abcdefghijklmnop\".getBytes(\"us-ascii\")); // Noncompliant\nv = sr.next(32);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom sr = new SecureRandom();\nint v = sr.next(32);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/332.html\">MITRE, CWE-332</a> - Insufficient Entropy in PRNG </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/336.html\">MITRE, CWE-336</a> - Same Seed in Pseudo-Random Number Generator (PRNG) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/337.html\">MITRE, CWE-337</a> - Predictable Seed in Pseudo-Random Number Generator (PRNG) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded\">CERT, MSC63J.</a> - Ensure that\n  SecureRandom is properly seeded </li>\n</ul>",
        "mdDesc": "<p>The <code>java.security.SecureRandom</code> class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it\nwith a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the\n<code>SecureRandom</code> implementation.</p>\n<p>This rule raises an issue when <code>SecureRandom.setSeed()</code> or <code>SecureRandom(byte[])</code> are called with a seed that is either\nof:</p>\n<ul>\n  <li> a constant </li>\n  <li> <code>System.currentTimeMillis()</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSecureRandom sr = new SecureRandom();\nsr.setSeed(123456L); // Noncompliant\nint v = sr.next(32);\n\nsr = new SecureRandom(\"abcdefghijklmnop\".getBytes(\"us-ascii\")); // Noncompliant\nv = sr.next(32);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom sr = new SecureRandom();\nint v = sr.next(32);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/332.html\">MITRE, CWE-332</a> - Insufficient Entropy in PRNG </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/336.html\">MITRE, CWE-336</a> - Same Seed in Pseudo-Random Number Generator (PRNG) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/337.html\">MITRE, CWE-337</a> - Predictable Seed in Pseudo-Random Number Generator (PRNG) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded\">CERT, MSC63J.</a> - Ensure that\n  SecureRandom is properly seeded </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a6",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2047",
        "repo": "squid",
        "name": "The names of methods with boolean return values should start with \"is\" or \"has\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic boolean getFoo(){\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic boolean getFoo(){\n  // ...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2168",
        "repo": "squid",
        "name": "Double-checked locking should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized</code> block is\nentered to determine whether or not to initialize the object.</p>\n<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than\n<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object\nrisks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the\nprogram.</p>\n<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.\nWith early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>\nperformance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,\nyou can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@NotThreadSafe\npublic class DoubleCheckedLocking {\n    private static Resource resource;\n\n    public static Resource getInstance() {\n        if (resource == null) {\n            synchronized (DoubleCheckedLocking.class) {\n                if (resource == null)\n                    resource = new Resource();\n            }\n        }\n        return resource;\n    }\n\n    static class Resource {\n\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ThreadSafe\npublic class SafeLazyInitialization {\n    private static Resource resource;\n\n    public synchronized static Resource getInstance() {\n        if (resource == null)\n            resource = new Resource();\n        return resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<p>With inner static holder:</p>\n<pre>\n@ThreadSafe\npublic class ResourceFactory {\n    private static class ResourceHolder {\n        public static Resource resource = new Resource(); // This will be lazily initialised\n    }\n\n    public static Resource getResource() {\n        return ResourceFactory.ResourceHolder.resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<p>Using \"volatile\":</p>\n<pre>\nclass ResourceFactory {\n  private volatile Resource resource;\n\n  public Resource getResource() {\n    Resource localResource = resource;\n    if (localResource == null) {\n      synchronized (this) {\n        localResource = resource;\n        if (localResource == null) {\n          resource = localResource = new Resource();\n        }\n      }\n    }\n    return localResource;\n  }\n\n  static class Resource {\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">The \"Double-Checked Locking is Broken\" Declaration</a> </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IgAZAg\">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/609.html\">MITRE, CWE-609</a> - Double-checked locking </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4\">JLS 12.4</a> - Initialization of Classes and Interfaces </li>\n  <li> Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java\">Double-checked locking</a> </li>\n</ul>",
        "mdDesc": "<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized</code> block is\nentered to determine whether or not to initialize the object.</p>\n<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than\n<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object\nrisks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the\nprogram.</p>\n<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.\nWith early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>\nperformance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,\nyou can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@NotThreadSafe\npublic class DoubleCheckedLocking {\n    private static Resource resource;\n\n    public static Resource getInstance() {\n        if (resource == null) {\n            synchronized (DoubleCheckedLocking.class) {\n                if (resource == null)\n                    resource = new Resource();\n            }\n        }\n        return resource;\n    }\n\n    static class Resource {\n\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ThreadSafe\npublic class SafeLazyInitialization {\n    private static Resource resource;\n\n    public synchronized static Resource getInstance() {\n        if (resource == null)\n            resource = new Resource();\n        return resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<p>With inner static holder:</p>\n<pre>\n@ThreadSafe\npublic class ResourceFactory {\n    private static class ResourceHolder {\n        public static Resource resource = new Resource(); // This will be lazily initialised\n    }\n\n    public static Resource getResource() {\n        return ResourceFactory.ResourceHolder.resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<p>Using \"volatile\":</p>\n<pre>\nclass ResourceFactory {\n  private volatile Resource resource;\n\n  public Resource getResource() {\n    Resource localResource = resource;\n    if (localResource == null) {\n      synchronized (this) {\n        localResource = resource;\n        if (localResource == null) {\n          resource = localResource = new Resource();\n        }\n      }\n    }\n    return localResource;\n  }\n\n  static class Resource {\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">The \"Double-Checked Locking is Broken\" Declaration</a> </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IgAZAg\">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/609.html\">MITRE, CWE-609</a> - Double-checked locking </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4\">JLS 12.4</a> - Initialization of Classes and Interfaces </li>\n  <li> Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java\">Double-checked locking</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4348",
        "repo": "squid",
        "name": "\"iterator\" should not return \"this\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There are two classes in the Java standard library that deal with iterations: <code>Iterable&lt;T&gt;</code> and <code>Iterator&lt;T&gt;</code>. An\n<code>Iterable&lt;T&gt;</code> represents a data structure that can be the target of the \"for-each loop\" statement, and an\n<code>Iterator&lt;T&gt;</code> represents the state of an ongoing traversal. An <code>Iterable&lt;T&gt;</code> is generally expected to support\nmultiple traversals.</p>\n<p>An <code>Iterator&lt;T&gt;</code> that also implements <code>Iterable&lt;t&gt;</code> by returning itself as its <code>iterator()</code> will not\nsupport multiple traversals since its state will be carried over.</p>\n<p>This rule raises an issue when the <code>iterator()</code> method of a class implementing both <code>Iterable&lt;T&gt;</code> and\n<code>Iterator&lt;t&gt;</code> returns <code>this</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass FooIterator implements Iterator&lt;Foo&gt;, Iterable&lt;Foo&gt; {\n  private Foo[] seq;\n  private int idx = 0;\n\n  public boolean hasNext() {\n    return idx &lt; seq.length;\n  }\n\n  public Foo next() {\n    return seq[idx++];\n  }\n\n  public Iterator&lt;Foo&gt; iterator() {\n    return this; // Noncompliant\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooSequence implements Iterable&lt;Foo&gt; {\n  private Foo[] seq;\n\n  public Iterator&lt;Foo&gt; iterator() {\n    return new Iterator&lt;Foo&gt;() {\n      private int idx = 0;\n\n      public boolean hasNext() {\n        return idx &lt; seq.length;\n      }\n\n      public Foo next() {\n        return seq[idx++];\n      }\n    };\n  }\n  // ...\n}\n</pre>",
        "mdDesc": "<p>There are two classes in the Java standard library that deal with iterations: <code>Iterable&lt;T&gt;</code> and <code>Iterator&lt;T&gt;</code>. An\n<code>Iterable&lt;T&gt;</code> represents a data structure that can be the target of the \"for-each loop\" statement, and an\n<code>Iterator&lt;T&gt;</code> represents the state of an ongoing traversal. An <code>Iterable&lt;T&gt;</code> is generally expected to support\nmultiple traversals.</p>\n<p>An <code>Iterator&lt;T&gt;</code> that also implements <code>Iterable&lt;t&gt;</code> by returning itself as its <code>iterator()</code> will not\nsupport multiple traversals since its state will be carried over.</p>\n<p>This rule raises an issue when the <code>iterator()</code> method of a class implementing both <code>Iterable&lt;T&gt;</code> and\n<code>Iterator&lt;t&gt;</code> returns <code>this</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass FooIterator implements Iterator&lt;Foo&gt;, Iterable&lt;Foo&gt; {\n  private Foo[] seq;\n  private int idx = 0;\n\n  public boolean hasNext() {\n    return idx &lt; seq.length;\n  }\n\n  public Foo next() {\n    return seq[idx++];\n  }\n\n  public Iterator&lt;Foo&gt; iterator() {\n    return this; // Noncompliant\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooSequence implements Iterable&lt;Foo&gt; {\n  private Foo[] seq;\n\n  public Iterator&lt;Foo&gt; iterator() {\n    return new Iterator&lt;Foo&gt;() {\n      private int idx = 0;\n\n      public boolean hasNext() {\n        return idx &lt; seq.length;\n      }\n\n      public Foo next() {\n        return seq[idx++];\n      }\n    };\n  }\n  // ...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4349",
        "repo": "squid",
        "name": "\"write(byte[],int,int)\" should be overridden",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement\nthe method <code>write(int)</code>. However most uses for such streams don't write a single byte at a time and the default implementation for\n<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>write(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn't provide an\noverride of <code>write(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyStream extends OutputStream { // Noncompliant\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyStream extends OutputStream {\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        fout.write(b, off, len);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>",
        "mdDesc": "<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement\nthe method <code>write(int)</code>. However most uses for such streams don't write a single byte at a time and the default implementation for\n<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>write(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn't provide an\noverride of <code>write(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyStream extends OutputStream { // Noncompliant\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyStream extends OutputStream {\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        fout.write(b, off, len);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1199",
        "repo": "squid",
        "name": "Nested code blocks should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>",
        "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2166",
        "repo": "squid",
        "name": "Classes named like \"Exception\" should extend \"Exception\" or a subclass",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>",
        "mdDesc": "<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "error-handling",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2167",
        "repo": "squid",
        "name": "\"compareTo\" should not return \"Integer.MIN_VALUE\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>\ndoes <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes\ninversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields\n<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  // Noncompliant\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n</pre>",
        "mdDesc": "<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>\ndoes <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes\ninversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields\n<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  // Noncompliant\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1197",
        "repo": "squid",
        "name": "Array designators \"[]\" should be on the type, not the variable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>",
        "mdDesc": "<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2164",
        "repo": "squid",
        "name": "Math should not be performed on floats",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.\n<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the mathematical expression is only used to build a string.</p>\n<pre>\nSystem.out.println(\"[\"+getName()+\"] \" +\n           \"\\n\\tMax time to retrieve connection:\"+(max/1000f/1000f)+\" ms.\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/DgU\">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation\n  is needed </li>\n</ul>",
        "mdDesc": "<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.\n<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the mathematical expression is only used to build a string.</p>\n<pre>\nSystem.out.println(\"[\"+getName()+\"] \" +\n           \"\\n\\tMax time to retrieve connection:\"+(max/1000f/1000f)+\" ms.\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/DgU\">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation\n  is needed </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3014",
        "repo": "squid",
        "name": "\"ThreadGroup\" should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,\n<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren't thread-safe, and still others are insecure\n(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be\navoided.</p>\n<h2>Compliant Solution</h2>\n<pre>\nThreadFactory threadFactory = Executors.defaultThreadFactory();\nThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);\n\nfor (int i = 0; i &lt; 10; i++) {\n  executorPool.execute(new JobThread(\"Job: \" + i));\n}\n\nSystem.out.println(executorPool.getActiveCount()); // Compliant\nexecutorPool.shutdown();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RQCHAQ\">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>\n</ul>",
        "mdDesc": "<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,\n<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren't thread-safe, and still others are insecure\n(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be\navoided.</p>\n<h2>Compliant Solution</h2>\n<pre>\nThreadFactory threadFactory = Executors.defaultThreadFactory();\nThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);\n\nfor (int i = 0; i &lt; 10; i++) {\n  executorPool.execute(new JobThread(\"Job: \" + i));\n}\n\nSystem.out.println(executorPool.getActiveCount()); // Compliant\nexecutorPool.shutdown();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RQCHAQ\">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "design",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "45min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "45min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "45min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "45min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3374",
        "repo": "squid",
        "name": "Struts validation forms should have unique names",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Common Weakness Enumeration,</p>\n<blockquote>\n  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the\n  other. This decision might not correspond to the programmer's expectations...\n</blockquote>\n<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/102.html\">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms\">OWASP, Improper Data\n  Validation</a> - Struts: Duplicate Validation Forms </li>\n</ul>",
        "mdDesc": "<p>According to the Common Weakness Enumeration,</p>\n<blockquote>\n  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the\n  other. This decision might not correspond to the programmer's expectations...\n</blockquote>\n<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/102.html\">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms\">OWASP, Improper Data\n  Validation</a> - Struts: Duplicate Validation Forms </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "struts"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2165",
        "repo": "squid",
        "name": "\"finalize\" should not set fields to \"null\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n</pre>",
        "mdDesc": "<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3011",
        "repo": "squid",
        "name": "Changing or bypassing accessibility is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681\">CVE-2012-4681</a> </li>\n</ul>\n<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or\nbypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>\n<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields\n  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>\n  <li> this method is called by untrusted code. <strong>*</strong> </li>\n  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>\n  <li> untrusted code can access the java reflection API. <strong>*</strong> </li>\n</ul>\n<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don't change or bypass the accessibility of any method or field if possible.</p>\n<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>\n<p>Untrusted code should never have direct access to the java Reflection API. If this method can do it, make sure that it is an exception. Use\nClassLoaders and SecurityManagers in order to sandbox any untrusted code and forbid access to the Reflection API.</p>\n<h2>Questionable Code Example</h2>\n<pre>\npublic void makeItPublic(String methodName) throws NoSuchMethodException {\n\n  this.getClass().getMethod(methodName).setAccessible(true); // Questionable\n}\n\npublic void setItAnyway(String fieldName, int value) {\n  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Questionable; bypasses controls in setter\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3YEVAQ\">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of\n  classes, methods, or fields </li>\n</ul>",
        "mdDesc": "<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681\">CVE-2012-4681</a> </li>\n</ul>\n<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or\nbypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>\n<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields\n  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>\n  <li> this method is called by untrusted code. <strong>*</strong> </li>\n  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>\n  <li> untrusted code can access the java reflection API. <strong>*</strong> </li>\n</ul>\n<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don't change or bypass the accessibility of any method or field if possible.</p>\n<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>\n<p>Untrusted code should never have direct access to the java Reflection API. If this method can do it, make sure that it is an exception. Use\nClassLoaders and SecurityManagers in order to sandbox any untrusted code and forbid access to the Reflection API.</p>\n<h2>Questionable Code Example</h2>\n<pre>\npublic void makeItPublic(String methodName) throws NoSuchMethodException {\n\n  this.getClass().getMethod(methodName).setAccessible(true); // Questionable\n}\n\npublic void setItAnyway(String fieldName, int value) {\n  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Questionable; bypasses controls in setter\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3YEVAQ\">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of\n  classes, methods, or fields </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "owasp-a3"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S3254",
        "repo": "squid",
        "name": "Default annotation parameter values should not be passed as arguments",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@MyAnnotation(arg = \"def\")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>",
        "mdDesc": "<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@MyAnnotation(arg = \"def\")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "finding"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1075",
        "repo": "squid",
        "name": "URIs should not be hardcoded",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File(\"/home/mylogin/Dev/users.txt\"); // Non-Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, \"users.txt\"); // Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>",
        "mdDesc": "<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File(\"/home/mylogin/Dev/users.txt\"); // Non-Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, \"users.txt\"); // Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "android",
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1195",
        "repo": "squid",
        "name": "Array designators \"[]\" should be located after the type in method signatures",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the Java Language Specification: </p>\n<blockquote>\n  <p>For compatibility with older versions of the Java SE platform,</p>\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.</p>\n  <p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n</pre>",
        "mdDesc": "<p>According to the Java Language Specification: </p>\n<blockquote>\n  <p>For compatibility with older versions of the Java SE platform,</p>\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.</p>\n  <p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2162",
        "repo": "squid",
        "name": "\"equals\" methods should be symmetric and work for subclasses",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zIUbAQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the\n  equals() method </li>\n</ul>",
        "mdDesc": "<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zIUbAQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the\n  equals() method </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S1194",
        "repo": "squid",
        "name": "\"java.lang.Error\" should not be extended",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>",
        "mdDesc": "<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3010",
        "repo": "squid",
        "name": "Static fields should not be updated in constructors",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n</pre>",
        "mdDesc": "<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3373",
        "repo": "squid",
        "name": "\"action\" mappings should not have too many \"forward\" entries",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of\nCRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it\nbecomes difficult to maintain a transparent naming convention. </p>\n<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of\n<code>&lt;forward/&gt;</code> tags.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 4:</p>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/action&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n&lt;/action&gt;\n\n&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;\n&lt;/action&gt;\n</pre>",
        "mdDesc": "<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of\nCRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it\nbecomes difficult to maintain a transparent naming convention. </p>\n<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of\n<code>&lt;forward/&gt;</code> tags.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 4:</p>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/action&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n&lt;/action&gt;\n\n&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;\n&lt;/action&gt;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload",
            "struts"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "threshold",
                "htmlDesc": "Maximum allowed number of <code>&lt;forward/&gt;</code> mappings in an <code>&lt;action&gt;</code>",
                "defaultValue": "4",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "20min",
        "effortToFixDescription": "per extra forward",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "20min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "20min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "20min",
        "remFnOverloaded": false,
        "gapDescription": "per extra forward",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1193",
        "repo": "squid",
        "name": "Exception types should not be tested using \"instanceof\" in catch blocks",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/5gFFB\">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception\n  types </li>\n</ul>",
        "mdDesc": "<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/5gFFB\">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception\n  types </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "clumsy",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2160",
        "repo": "squid",
        "name": "Subclasses that add fields should override \"equals\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>",
        "mdDesc": "<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1190",
        "repo": "squid",
        "name": "Future keywords should not be used as names",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>",
        "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "obsolete",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1191",
        "repo": "squid",
        "name": "Classes from \"sun.*\" packages should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>",
        "mdDesc": "<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "lock-in",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "Exclude",
                "htmlDesc": "Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "20min",
        "effortToFixDescription": "per \"sun\" import",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "20min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "20min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "20min",
        "remFnOverloaded": false,
        "gapDescription": "per \"sun\" import",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S1192",
        "repo": "squid",
        "name": "String literals should not be duplicated",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
        "mdDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "threshold",
                "htmlDesc": "Number of times a literal must be duplicated to trigger an issue",
                "defaultValue": "3",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "2min",
        "defaultDebtRemFnOffset": "2min",
        "effortToFixDescription": "per duplicate instance",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "2min",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "2min",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "2min",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "gapDescription": "per duplicate instance",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2059",
        "repo": "squid",
        "name": "\"Serializable\" inner classes of \"Serializable\" classes should be static",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>",
        "mdDesc": "<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "pitfall",
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2177",
        "repo": "squid",
        "name": "Child class methods named for parent class methods should be overrides",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>",
        "mdDesc": "<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3027",
        "repo": "squid",
        "name": "String function use should be optimized for single characters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a\ncall with a <code>char</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf(\"W\");  // Noncompliant\n// ...\nint otherPos = myStr.lastIndexOf(\"r\"); // Noncompliant\n// ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf('W');\n// ...\nint otherPos = myStr.lastIndexOf('r');\n// ...\n</pre>",
        "mdDesc": "<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a\ncall with a <code>char</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf(\"W\");  // Noncompliant\n// ...\nint otherPos = myStr.lastIndexOf(\"r\"); // Noncompliant\n// ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf('W');\n// ...\nint otherPos = myStr.lastIndexOf('r');\n// ...\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2057",
        "repo": "squid",
        "name": "\"Serializable\" classes should have a \"serialVersionUID\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),\nand classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYCpAQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n  </li>\n</ul>",
        "mdDesc": "<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),\nand classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYCpAQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "pitfall",
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2175",
        "repo": "squid",
        "name": "Inappropriate \"Collection\" calls should not be made",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>",
        "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2176",
        "repo": "squid",
        "name": "Class names should not shadow interfaces or superclasses",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>",
        "mdDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2178",
        "repo": "squid",
        "name": "Short-circuit logic should be used in boolean contexts",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>",
        "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:ClassVariableVisibilityCheck",
        "repo": "squid",
        "name": "Class variable fields should not have public accessibility",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>",
        "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1104",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:LeftCurlyBraceStartLineCheck",
        "repo": "squid",
        "name": "An open curly brace should be located at the beginning of a line",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>",
        "mdDesc": "<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1106",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:RightCurlyBraceDifferentLineAsNextBlockCheck",
        "repo": "squid",
        "name": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>",
        "mdDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1108",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2055",
        "repo": "squid",
        "name": "The non-serializable super class of a \"Serializable\" class should have a no-argument constructor",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the\nobject from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until\nthe final object has been instantiated. </p>\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a\n<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>",
        "mdDesc": "<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the\nobject from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until\nthe final object has been instantiated. </p>\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a\n<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "serialization"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2293",
        "repo": "squid",
        "name": "The diamond operator (\"<>\") should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>",
        "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3020",
        "repo": "squid",
        "name": "\"toArray\" should be passed an array of the proper type",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a\n<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the\ncall.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[0]);\n}\n</pre>",
        "mdDesc": "<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a\n<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the\ncall.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[0]);\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4351",
        "repo": "squid",
        "name": "\"compareTo\" should not be overloaded",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When implementing the <code>Comparable&lt;T&gt;.compareTo</code> method, the parameter's type has to match the type used in the\n<code>Comparable</code> declaration. When a different type is used this creates an overload instead of an override, which is unlikely to be the\nintent.</p>\n<p>This rule raises an issue when the parameter of the <code>compareTo</code> method of a class implementing <code>Comparable&lt;T&gt;</code> is not\nsame as the one used in the <code>Comparable</code> declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  static class Bar implements Comparable&lt;Bar&gt; {\n    public int compareTo(Bar rhs) {\n      return -1;\n    }\n  }\n\n  static class FooBar extends Bar {\n    public int compareTo(FooBar rhs) {  // Noncompliant: Parameter should be of type Bar\n      return 0;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  static class Bar implements Comparable&lt;Bar&gt; {\n    public int compareTo(Bar rhs) {\n      return -1;\n    }\n  }\n\n  static class FooBar extends Bar {\n    public int compareTo(Bar rhs) {\n      return 0;\n    }\n  }\n}\n</pre>",
        "mdDesc": "<p>When implementing the <code>Comparable&lt;T&gt;.compareTo</code> method, the parameter's type has to match the type used in the\n<code>Comparable</code> declaration. When a different type is used this creates an overload instead of an override, which is unlikely to be the\nintent.</p>\n<p>This rule raises an issue when the parameter of the <code>compareTo</code> method of a class implementing <code>Comparable&lt;T&gt;</code> is not\nsame as the one used in the <code>Comparable</code> declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  static class Bar implements Comparable&lt;Bar&gt; {\n    public int compareTo(Bar rhs) {\n      return -1;\n    }\n  }\n\n  static class FooBar extends Bar {\n    public int compareTo(FooBar rhs) {  // Noncompliant: Parameter should be of type Bar\n      return 0;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  static class Bar implements Comparable&lt;Bar&gt; {\n    public int compareTo(Bar rhs) {\n      return -1;\n    }\n  }\n\n  static class FooBar extends Bar {\n    public int compareTo(Bar rhs) {\n      return 0;\n    }\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:RedundantThrowsDeclarationCheck",
        "repo": "squid",
        "name": "\"throws\" declarations should not be superfluous",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> a <code>RuntimeException</code>, or one of its descendants </li>\n  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n<ul>\n  <li> in overriding and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement . </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\nclass A extends B {\n  @Override\n  void doSomething() throws IOException {\n    compute(a);\n  }\n\n  public void foo() throws IOException {}\n\n  protected void bar() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object foobar(String s) throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n</pre>",
        "mdDesc": "<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> a <code>RuntimeException</code>, or one of its descendants </li>\n  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n<ul>\n  <li> in overriding and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement . </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\nclass A extends B {\n  @Override\n  void doSomething() throws IOException {\n    compute(a);\n  }\n\n  public void foo() throws IOException {}\n\n  protected void bar() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object foobar(String s) throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1130",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy",
            "error-handling",
            "redundant",
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3077",
        "repo": "squid",
        "name": "Non-primitive fields should not be \"volatile\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Marking an array <code>volatile</code> means that the array itself will always be read fresh and never thread cached, but the items <em>in</em> the\narray will not be. Similarly, marking a mutable object field <code>volatile</code> means the object <em>reference</em> is <code>volatile</code> but\nthe object itself is not, and other threads may not see updates to the object state.</p>\n<p>This can be salvaged with arrays by using the relevant AtomicArray class, such as <code>AtomicIntegerArray</code>, instead. For mutable objects,\nthe <code>volatile</code> should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal\nstorage.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate volatile int [] vInts;  // Noncompliant\nprivate volatile MyObj myObj;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate AtomicIntegerArray vInts;\nprivate MyObj myObj;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/twD1AQ\">CERT, CON50-J.</a> - Do not assume that declaring a reference volatile\n  guarantees safe publication of the members of the referenced object </li>\n</ul>",
        "mdDesc": "<p>Marking an array <code>volatile</code> means that the array itself will always be read fresh and never thread cached, but the items <em>in</em> the\narray will not be. Similarly, marking a mutable object field <code>volatile</code> means the object <em>reference</em> is <code>volatile</code> but\nthe object itself is not, and other threads may not see updates to the object state.</p>\n<p>This can be salvaged with arrays by using the relevant AtomicArray class, such as <code>AtomicIntegerArray</code>, instead. For mutable objects,\nthe <code>volatile</code> should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal\nstorage.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate volatile int [] vInts;  // Noncompliant\nprivate volatile MyObj myObj;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate AtomicIntegerArray vInts;\nprivate MyObj myObj;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/twD1AQ\">CERT, CON50-J.</a> - Do not assume that declaring a reference volatile\n  guarantees safe publication of the members of the referenced object </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4288",
        "repo": "squid",
        "name": "Spring components should use constructor injection",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>\n<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation, or if the constructor of Spring\ncomponent does not have injection annotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String name = null; // Noncompliant\n\n  HelloWorld() {\n   // ...\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @Autowired\n  HelloWorld(String name) {\n    this.name = name;\n   // ...\n  }\n\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>\n<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation, or if the constructor of Spring\ncomponent does not have injection annotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String name = null; // Noncompliant\n\n  HelloWorld() {\n   // ...\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @Autowired\n  HelloWorld(String name) {\n    this.name = name;\n   // ...\n  }\n\n  // ...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "2min by injected field",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "2min by injected field",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3078",
        "repo": "squid",
        "name": "\"volatile\" variables should not be used with compound operators",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using compound operators as well as increments and decrements (and toggling, in the case of <code>boolean</code>s) on primitive fields are not\natomic operations. That is, they don't happen in a single step. For instance, when a <code>volatile</code> primitive field is incremented or\ndecremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as\n<code>AtomicInteger</code>, or synchronize the access.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate volatile int count = 0;\nprivate volatile boolean boo = false;\n\npublic void incrementCount() {\n  count++;  // Noncompliant\n}\n\npublic void toggleBoo(){\n  boo = !boo;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate AtomicInteger count = 0;\nprivate boolean boo = false;\n\npublic void incrementCount() {\n  count.incrementAndGet();\n}\n\npublic synchronized void toggleBoo() {\n  boo = !boo;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RIFJAg\">CERT, VNA02-J.</a> - Ensure that compound operations on shared variables are\n  atomic </li>\n</ul>",
        "mdDesc": "<p>Using compound operators as well as increments and decrements (and toggling, in the case of <code>boolean</code>s) on primitive fields are not\natomic operations. That is, they don't happen in a single step. For instance, when a <code>volatile</code> primitive field is incremented or\ndecremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as\n<code>AtomicInteger</code>, or synchronize the access.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate volatile int count = 0;\nprivate volatile boolean boo = false;\n\npublic void incrementCount() {\n  count++;  // Noncompliant\n}\n\npublic void toggleBoo(){\n  boo = !boo;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate AtomicInteger count = 0;\nprivate boolean boo = false;\n\npublic void incrementCount() {\n  count.incrementAndGet();\n}\n\npublic synchronized void toggleBoo() {\n  boo = !boo;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RIFJAg\">CERT, VNA02-J.</a> - Ensure that compound operations on shared variables are\n  atomic </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4165",
        "repo": "squid",
        "name": "Assignments should not be redundant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>",
        "mdDesc": "<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "redundant"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4042",
        "repo": "squid",
        "name": "\"java.nio.Files#delete\" should be preferred",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On\nthe other hand, when <code>java.nio.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.Files#delete</code> is the\npreferred option.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void cleanUp(Path path) {\n  File file = new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException{\n  Files.delete(path);\n}\n</pre>",
        "mdDesc": "<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On\nthe other hand, when <code>java.nio.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.Files#delete</code> is the\npreferred option.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void cleanUp(Path path) {\n  File file = new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException{\n  Files.delete(path);\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "api-design",
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:TrailingCommentCheck",
        "repo": "squid",
        "name": "Comments should not be located at the end of lines of code",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>",
        "mdDesc": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S139",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "legalTrailingCommentPattern",
                "htmlDesc": "Description Pattern for text of trailing comments that are allowed. By default, comments containing only one word.",
                "defaultValue": "^\\s*+[^\\s]++$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4174",
        "repo": "squid",
        "name": "Local constants should follow naming conventions for constants",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive\nvariables, have names that match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic void doSomething() {\n  final int local = 42;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  final int LOCAL = 42;\n  ...\n}\n</pre>",
        "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive\nvariables, have names that match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic void doSomething() {\n  final int local = 42;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  final int LOCAL = 42;\n  ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the constant names against.",
                "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4266",
        "repo": "squid",
        "name": "\"Stream.collect()\" calls should not be redundant",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>\n<p>This rule raises an issue when one of the following substitution can be made:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n    <tr>\n      <td><code>stream.collect(counting())</code></td>\n      <td><code>stream.count()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(maxBy(comparator))</code></td>\n      <td><code>stream.max(comparator)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(minBy(comparator))</code></td>\n      <td><code>stream.min(comparator)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(mapping(mapper))</code></td>\n      <td><code>stream.map(mapper).collect()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(reducing(...))</code></td>\n      <td><code>stream.reduce(...)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(summingInt(mapper))</code></td>\n      <td><code>stream.mapToInt(mapper).sum()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(summingLong(mapper))</code></td>\n      <td><code>stream.mapToLong(mapper).sum()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(summingDouble(mapper))</code></td>\n      <td><code>stream.mapToDouble(mapper).sum()</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint count = stream.collect(counting());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint count = stream.count();\n</pre>",
        "mdDesc": "<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>\n<p>This rule raises an issue when one of the following substitution can be made:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n    <tr>\n      <td><code>stream.collect(counting())</code></td>\n      <td><code>stream.count()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(maxBy(comparator))</code></td>\n      <td><code>stream.max(comparator)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(minBy(comparator))</code></td>\n      <td><code>stream.min(comparator)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(mapping(mapper))</code></td>\n      <td><code>stream.map(mapper).collect()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(reducing(...))</code></td>\n      <td><code>stream.reduce(...)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(summingInt(mapper))</code></td>\n      <td><code>stream.mapToInt(mapper).sum()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(summingLong(mapper))</code></td>\n      <td><code>stream.mapToLong(mapper).sum()</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.collect(summingDouble(mapper))</code></td>\n      <td><code>stream.mapToDouble(mapper).sum()</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint count = stream.collect(counting());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint count = stream.count();\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2089",
        "repo": "squid",
        "name": "HTTP referers should not be relied on",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may\nbe safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>\n<p>This rule flags uses of the referer header field.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String referer = request.getHeader(\"referer\");  // Noncompliant\n    if(isTrustedReferer(referer)){\n      //..\n    }\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/293\">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may\nbe safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>\n<p>This rule flags uses of the referer header field.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String referer = request.getHeader(\"referer\");  // Noncompliant\n    if(isTrustedReferer(referer)){\n      //..\n    }\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/293\">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a2",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S4143",
        "repo": "squid",
        "name": "Map values should not be replaced unconditionally",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nletters.put(\"a\", \"Apple\");\nletters.put(\"a\", \"Boy\");  // Noncompliant\n\ntowns[i] = \"London\";\ntowns[i] = \"Chicago\";  // Noncompliant\n</pre>",
        "mdDesc": "<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nletters.put(\"a\", \"Apple\");\nletters.put(\"a\", \"Boy\");  // Noncompliant\n\ntowns[i] = \"London\";\ntowns[i] = \"Chicago\";  // Noncompliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4144",
        "repo": "squid",
        "name": "Methods should not have identical implementations",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into account.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String calculateCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  doTheThing();\n  return CODE;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String getCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>",
        "mdDesc": "<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into account.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String calculateCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  doTheThing();\n  return CODE;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String getCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing",
            "duplicate",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3052",
        "repo": "squid",
        "name": "Fields should not be initialized to default values",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>",
        "mdDesc": "<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "finding"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4142",
        "repo": "squid",
        "name": "Duplicate values should not be passed as arguments",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant\n&nbsp;&nbsp;//...\n}\n\nif (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (compare(myPoint.x, myPoint.y) != 0) {\n&nbsp;&nbsp;//...\n}\n\nObject v1 = getNextValue();\nObject v2 = getNextValue();\nif (compare(v1, v2) != 0) {\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
        "mdDesc": "<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant\n&nbsp;&nbsp;//...\n}\n\nif (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (compare(myPoint.x, myPoint.y) != 0) {\n&nbsp;&nbsp;//...\n}\n\nObject v1 = getNextValue();\nObject v2 = getNextValue();\nif (compare(v1, v2) != 0) {\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
        "severity": "MAJOR",
        "status": "DEPRECATED",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S888",
        "repo": "squid",
        "name": "Equality operators should not be used in \"for\" loop termination conditions",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n</ul>",
        "mdDesc": "<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "misra",
            "suspicious"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:ModifiersOrderCheck",
        "repo": "squid",
        "name": "Modifiers should be declared in the correct order",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>",
        "mdDesc": "<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "internalKey": "S1124",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4276",
        "repo": "squid",
        "name": "Functional Interfaces should be as specialised as possible",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method\nreferences. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>\nshould be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>\n<p>This rule raises an issue when any of the following substitution is possible:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Current Interface</th>\n      <th>Preferred Interface</th>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Integer, R&gt;</code></td>\n      <td><code>IntFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Long, R&gt;</code></td>\n      <td><code>LongFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Double, R&gt;</code></td>\n      <td><code>DoubleFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Double,Integer&gt;</code> </td>\n      <td> <code>DoubleToIntFunction</code> </td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Double,Long&gt;</code> </td>\n      <td> <code>DoubleToLongFunction</code> </td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Long,Double&gt;</code> </td>\n      <td> <code>LongToDoubleFunction</code> </td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Long,Integer&gt;</code> </td>\n      <td> <code>LongToIntFunction</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;R,Integer&gt;</code> </td>\n      <td> <code>ToIntFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;R,Long&gt;</code> </td>\n      <td> <code>ToLongFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;R,Double&gt;</code> </td>\n      <td> <code>ToDoubleFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;T,T&gt;</code> </td>\n      <td> <code>UnaryOperator&lt;T&gt;</code> </td>\n    </tr>\n    <tr>\n      <td><code>BiFunction&lt;T,T,T&gt;</code> </td>\n      <td> <code>BinaryOperator&lt;T&gt;</code> </td>\n    </tr>\n    <tr>\n      <td><code>Consumer&lt;Integer&gt;</code></td>\n      <td><code>IntConsumer</code></td>\n    </tr>\n    <tr>\n      <td><code>Consumer&lt;Double&gt;</code></td>\n      <td><code>DoubleConsumer</code></td>\n    </tr>\n    <tr>\n      <td><code>Consumer&lt;Long&gt;</code></td>\n      <td><code>LongConsumer</code></td>\n    </tr>\n    <tr>\n      <td><code>BiConsumer&lt;T,Integer&gt;</code> </td>\n      <td> <code>ObjIntConsumer&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>BiConsumer&lt;T,Long&gt;</code> </td>\n      <td> <code>ObjLongConsumer&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>BiConsumer&lt;T,Double&gt;</code> </td>\n      <td> <code>ObjDoubleConsumer&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Predicate&lt;Integer&gt;</code></td>\n      <td><code>IntPredicate</code></td>\n    </tr>\n    <tr>\n      <td><code>Predicate&lt;Double&gt;</code></td>\n      <td><code>DoublePredicate</code></td>\n    </tr>\n    <tr>\n      <td><code>Predicate&lt;Long&gt;</code></td>\n      <td><code>LongPredicate</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Integer&gt;</code></td>\n      <td><code>IntSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Double&gt;</code></td>\n      <td><code>DoubleSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Long&gt;</code></td>\n      <td><code>LongSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Boolean&gt;</code> </td>\n      <td> <code>BooleanSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>UnaryOperator&lt;Integer&gt;</code></td>\n      <td><code>IntUnaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>UnaryOperator&lt;Double&gt;</code></td>\n      <td><code>DoubleUnaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>UnaryOperator&lt;Long&gt;</code></td>\n      <td><code>LongUnaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>BinaryOperator&lt;Integer&gt;</code> </td>\n      <td> <code>IntBinaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>BinaryOperator&lt;Long&gt;</code> </td>\n      <td> <code>LongBinaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>BinaryOperator&lt;Double&gt;</code> </td>\n      <td> <code>DoubleBinaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;T, Boolean&gt;</code> </td>\n      <td> <code>Predicate&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>BiFunction&lt;T,U,Boolean&gt;</code> </td>\n      <td> <code>BiPredicate&lt;T,U&gt;</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant\n    @Override\n    public Integer get() {\n      // ...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements IntSupplier {\n\n  @Override\n  public int getAsInt() {\n    // ...\n  }\n}\n</pre>",
        "mdDesc": "<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method\nreferences. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>\nshould be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>\n<p>This rule raises an issue when any of the following substitution is possible:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Current Interface</th>\n      <th>Preferred Interface</th>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Integer, R&gt;</code></td>\n      <td><code>IntFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Long, R&gt;</code></td>\n      <td><code>LongFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Double, R&gt;</code></td>\n      <td><code>DoubleFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Double,Integer&gt;</code> </td>\n      <td> <code>DoubleToIntFunction</code> </td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Double,Long&gt;</code> </td>\n      <td> <code>DoubleToLongFunction</code> </td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Long,Double&gt;</code> </td>\n      <td> <code>LongToDoubleFunction</code> </td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;Long,Integer&gt;</code> </td>\n      <td> <code>LongToIntFunction</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;R,Integer&gt;</code> </td>\n      <td> <code>ToIntFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;R,Long&gt;</code> </td>\n      <td> <code>ToLongFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;R,Double&gt;</code> </td>\n      <td> <code>ToDoubleFunction&lt;R&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;T,T&gt;</code> </td>\n      <td> <code>UnaryOperator&lt;T&gt;</code> </td>\n    </tr>\n    <tr>\n      <td><code>BiFunction&lt;T,T,T&gt;</code> </td>\n      <td> <code>BinaryOperator&lt;T&gt;</code> </td>\n    </tr>\n    <tr>\n      <td><code>Consumer&lt;Integer&gt;</code></td>\n      <td><code>IntConsumer</code></td>\n    </tr>\n    <tr>\n      <td><code>Consumer&lt;Double&gt;</code></td>\n      <td><code>DoubleConsumer</code></td>\n    </tr>\n    <tr>\n      <td><code>Consumer&lt;Long&gt;</code></td>\n      <td><code>LongConsumer</code></td>\n    </tr>\n    <tr>\n      <td><code>BiConsumer&lt;T,Integer&gt;</code> </td>\n      <td> <code>ObjIntConsumer&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>BiConsumer&lt;T,Long&gt;</code> </td>\n      <td> <code>ObjLongConsumer&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>BiConsumer&lt;T,Double&gt;</code> </td>\n      <td> <code>ObjDoubleConsumer&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>Predicate&lt;Integer&gt;</code></td>\n      <td><code>IntPredicate</code></td>\n    </tr>\n    <tr>\n      <td><code>Predicate&lt;Double&gt;</code></td>\n      <td><code>DoublePredicate</code></td>\n    </tr>\n    <tr>\n      <td><code>Predicate&lt;Long&gt;</code></td>\n      <td><code>LongPredicate</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Integer&gt;</code></td>\n      <td><code>IntSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Double&gt;</code></td>\n      <td><code>DoubleSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Long&gt;</code></td>\n      <td><code>LongSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>Supplier&lt;Boolean&gt;</code> </td>\n      <td> <code>BooleanSupplier</code></td>\n    </tr>\n    <tr>\n      <td><code>UnaryOperator&lt;Integer&gt;</code></td>\n      <td><code>IntUnaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>UnaryOperator&lt;Double&gt;</code></td>\n      <td><code>DoubleUnaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>UnaryOperator&lt;Long&gt;</code></td>\n      <td><code>LongUnaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>BinaryOperator&lt;Integer&gt;</code> </td>\n      <td> <code>IntBinaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>BinaryOperator&lt;Long&gt;</code> </td>\n      <td> <code>LongBinaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>BinaryOperator&lt;Double&gt;</code> </td>\n      <td> <code>DoubleBinaryOperator</code></td>\n    </tr>\n    <tr>\n      <td><code>Function&lt;T, Boolean&gt;</code> </td>\n      <td> <code>Predicate&lt;T&gt;</code></td>\n    </tr>\n    <tr>\n      <td><code>BiFunction&lt;T,U,Boolean&gt;</code> </td>\n      <td> <code>BiPredicate&lt;T,U&gt;</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant\n    @Override\n    public Integer get() {\n      // ...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements IntSupplier {\n\n  @Override\n  public int getAsInt() {\n    // ...\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "performance"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S3066",
        "repo": "squid",
        "name": "\"enum\" fields should not be publicly mutable",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>",
        "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S3067",
        "repo": "squid",
        "name": "\"getClass\" should not be used for synchronization",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>\nkeyword.</p>\n<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (this.getClass()) {  // Noncompliant\n      // ...\n    }\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (MyClass.class) {\n      // ...\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/bwCaAg\">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by\n  getClass() </li>\n</ul>",
        "mdDesc": "<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>\nkeyword.</p>\n<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (this.getClass()) {  // Noncompliant\n      // ...\n    }\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (MyClass.class) {\n      // ...\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/bwCaAg\">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by\n  getClass() </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "multi-threading"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S4034",
        "repo": "squid",
        "name": "\"Stream\" call chains should be simplified when possible",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it\nalso avoid creating unnecessary temporary objects.</p>\n<p>This rule raises an issue when one of the following substitution is possible:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n    <tr>\n      <td><code>stream.filter(predicate).findFirst().isPresent()</code></td>\n      <td><code>stream.anyMatch(predicate)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.filter(predicate).findAny().isPresent()</code></td>\n      <td><code>stream.anyMatch(predicate)</code></td>\n    </tr>\n    <tr>\n      <td><code>!stream.anyMatch(predicate)</code></td>\n      <td><code>stream.noneMatch(predicate)</code></td>\n    </tr>\n    <tr>\n      <td><code>!stream.anyMatch(x -&gt; !(...))</code></td>\n      <td><code>stream.allMatch(...)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></td>\n      <td><code>stream.anyMatch(predicate)</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);\n</pre>",
        "mdDesc": "<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it\nalso avoid creating unnecessary temporary objects.</p>\n<p>This rule raises an issue when one of the following substitution is possible:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n    <tr>\n      <td><code>stream.filter(predicate).findFirst().isPresent()</code></td>\n      <td><code>stream.anyMatch(predicate)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.filter(predicate).findAny().isPresent()</code></td>\n      <td><code>stream.anyMatch(predicate)</code></td>\n    </tr>\n    <tr>\n      <td><code>!stream.anyMatch(predicate)</code></td>\n      <td><code>stream.noneMatch(predicate)</code></td>\n    </tr>\n    <tr>\n      <td><code>!stream.anyMatch(x -&gt; !(...))</code></td>\n      <td><code>stream.allMatch(...)</code></td>\n    </tr>\n    <tr>\n      <td><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></td>\n      <td><code>stream.anyMatch(predicate)</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2096",
        "repo": "squid",
        "name": "\"main\" should not \"throw\" anything",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>",
        "mdDesc": "<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "error-handling"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4032",
        "repo": "squid",
        "name": "Packages containing only \"package-info.java\" should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value. </p>",
        "mdDesc": "<p>There is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value. </p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2097",
        "repo": "squid",
        "name": "\"equals(Object obj)\" should test argument type",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>",
        "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S3065",
        "repo": "squid",
        "name": "Min and max used in combination should not always return the same value",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When using <code>Math.min()</code> and <code>Math.max()</code> together for bounds checking, it's important to feed the right operands to each\nmethod. <code>Math.min()</code> should be used with the <strong>upper</strong> end of the range being checked, and <code>Math.max()</code> should be\nused with the <strong>lower</strong> end of the range. Get it backwards, and the result will always be the same end of the range.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.min(LOWER, num);  // result = 0\n    return Math.max(UPPER, result);     // Noncompliant; result is now 20: even though 12 was in the range\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<p>Swapping method <code>min()</code> and <code>max()</code> invocations without changing parameters.</p>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.max(LOWER, num);  // result = 12\n    return Math.min(UPPER, result);     // Compliant; result is still 12\n  }\n</pre>\n<p>or swapping bounds <code>UPPER</code> and <code>LOWER</code> used as parameters without changing the invoked methods.</p>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.min(UPPER, num);  // result = 12\n    return Math.max(LOWER, result);     // Compliant; result is still 12\n  }\n</pre>",
        "mdDesc": "<p>When using <code>Math.min()</code> and <code>Math.max()</code> together for bounds checking, it's important to feed the right operands to each\nmethod. <code>Math.min()</code> should be used with the <strong>upper</strong> end of the range being checked, and <code>Math.max()</code> should be\nused with the <strong>lower</strong> end of the range. Get it backwards, and the result will always be the same end of the range.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.min(LOWER, num);  // result = 0\n    return Math.max(UPPER, result);     // Noncompliant; result is now 20: even though 12 was in the range\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<p>Swapping method <code>min()</code> and <code>max()</code> invocations without changing parameters.</p>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.max(LOWER, num);  // result = 12\n    return Math.min(UPPER, result);     // Compliant; result is still 12\n  }\n</pre>\n<p>or swapping bounds <code>UPPER</code> and <code>LOWER</code> used as parameters without changing the invoked methods.</p>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.min(UPPER, num);  // result = 12\n    return Math.max(LOWER, result);     // Compliant; result is still 12\n  }\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S2094",
        "repo": "squid",
        "name": "Classes should not be empty",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>",
        "mdDesc": "<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S4275",
        "repo": "squid",
        "name": "Getters and setters should access the expected fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to\n<code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed getters\nand setters, which can result in the wrong field being accessed by a getter or setter.</p>\n<p>This rule raises an issue in any of these cases:</p>\n<ul>\n  <li> A setter does not update the field with the corresponding name. </li>\n  <li> A getter does not access the field with the corresponding name. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private int x;\n  private int y;\n\n  public void setX(int val) { // Noncompliant: field 'x' is not updated\n    this.y = val;\n  }\n\n  public int getY() { // Noncompliant: field 'y' is not used in the return value\n    return this.x;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int x;\n  private int y;\n\n  public void setX(int val) {\n    this.x = val;\n  }\n\n  public int getY() {\n    return this.y;\n  }\n}\n</pre>",
        "mdDesc": "<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to\n<code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed getters\nand setters, which can result in the wrong field being accessed by a getter or setter.</p>\n<p>This rule raises an issue in any of these cases:</p>\n<ul>\n  <li> A setter does not update the field with the corresponding name. </li>\n  <li> A getter does not access the field with the corresponding name. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private int x;\n  private int y;\n\n  public void setX(int val) { // Noncompliant: field 'x' is not updated\n    this.y = val;\n  }\n\n  public int getY() { // Noncompliant: field 'y' is not used in the return value\n    return this.x;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int x;\n  private int y;\n\n  public void setX(int val) {\n    this.x = val;\n  }\n\n  public int getY() {\n    return this.y;\n  }\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S5122",
        "repo": "squid",
        "name": "Enabling Cross-Origin Resource Sharing is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Enabling Cross-Origin Resource Sharing (CORS) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\">CVE-2018-0269</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\">CVE-2017-14460</a> </li>\n</ul>\n<p>Applications that enable CORS will effectively relax the same-origin policy in browsers, which is in place to prevent AJAX requests to hosts other\nthan the one showing in the browser address bar. Being too permissive, CORS can potentially allow an attacker to gain access to sensitive\ninformation.</p>\n<p>This rule flags code that enables CORS or specifies any HTTP response headers associated with CORS. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Any URLs responding with <code>Access-Control-Allow-Origin: *</code> include sensitive content. </li>\n  <li> Any domains specified in <code>Access-Control-Allow-Origin</code> headers are checked against a whitelist. </li>\n</ul>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only on specific URLs that require access from other domains. Don't enable\n  the header on the entire domain. </li>\n  <li> Don't rely on the <code>Origin</code> header blindly without validation as it could be spoofed by an attacker. Use a whitelist to check that\n  the <code>Origin</code> domain (including protocol) is allowed before returning it back in the <code>Access-Control-Allow-Origin</code> header.\n  </li>\n  <li> Use <code>Access-Control-Allow-Origin: *</code> only if your application absolutely requires it, for example in the case of an open/public API.\n  For such endpoints, make sure that there is no sensitive content or information included in the response. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === Java Servlet ===\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n  resp.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n  resp.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); // Questionable\n  resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); // Questionable\n  resp.setHeader(\"Access-Control-Allow-Methods\", \"GET\"); // Questionable\n  resp.getWriter().write(\"response\");\n}\n</pre>\n<pre>\n// === Spring MVC Controller annotation ===\n@CrossOrigin(origins = \"http://domain1.com\") // Questionable\n@RequestMapping(\"\")\npublic class TestController {\n    public String home(ModelMap model) {\n        model.addAttribute(\"message\", \"ok \");\n        return \"view\";\n    }\n\n    @CrossOrigin(origins = \"http://domain2.com\") // Questionable\n    @RequestMapping(value = \"/test1\")\n    public ResponseEntity&lt;String&gt; test1() {\n        return ResponseEntity.ok().body(\"ok\");\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017</a> - Category A6 - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing\">OWASP HTML5 Security Cheat Sheet</a> - Cross\n  Origin Resource Sharing </li>\n  <li> <a href=\"https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny\">OWASP CORS OriginHeaderScrutiny</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/CORS_RequestPreflighScrutiny\">OWASP CORS RequestPreflighScrutiny</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/346.html\">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/942.html\">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n</ul>",
        "mdDesc": "<p>Enabling Cross-Origin Resource Sharing (CORS) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\">CVE-2018-0269</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\">CVE-2017-14460</a> </li>\n</ul>\n<p>Applications that enable CORS will effectively relax the same-origin policy in browsers, which is in place to prevent AJAX requests to hosts other\nthan the one showing in the browser address bar. Being too permissive, CORS can potentially allow an attacker to gain access to sensitive\ninformation.</p>\n<p>This rule flags code that enables CORS or specifies any HTTP response headers associated with CORS. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Any URLs responding with <code>Access-Control-Allow-Origin: *</code> include sensitive content. </li>\n  <li> Any domains specified in <code>Access-Control-Allow-Origin</code> headers are checked against a whitelist. </li>\n</ul>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only on specific URLs that require access from other domains. Don't enable\n  the header on the entire domain. </li>\n  <li> Don't rely on the <code>Origin</code> header blindly without validation as it could be spoofed by an attacker. Use a whitelist to check that\n  the <code>Origin</code> domain (including protocol) is allowed before returning it back in the <code>Access-Control-Allow-Origin</code> header.\n  </li>\n  <li> Use <code>Access-Control-Allow-Origin: *</code> only if your application absolutely requires it, for example in the case of an open/public API.\n  For such endpoints, make sure that there is no sensitive content or information included in the response. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\n// === Java Servlet ===\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n  resp.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n  resp.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); // Questionable\n  resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); // Questionable\n  resp.setHeader(\"Access-Control-Allow-Methods\", \"GET\"); // Questionable\n  resp.getWriter().write(\"response\");\n}\n</pre>\n<pre>\n// === Spring MVC Controller annotation ===\n@CrossOrigin(origins = \"http://domain1.com\") // Questionable\n@RequestMapping(\"\")\npublic class TestController {\n    public String home(ModelMap model) {\n        model.addAttribute(\"message\", \"ok \");\n        return \"view\";\n    }\n\n    @CrossOrigin(origins = \"http://domain2.com\") // Questionable\n    @RequestMapping(value = \"/test1\")\n    public ResponseEntity&lt;String&gt; test1() {\n        return ResponseEntity.ok().body(\"ok\");\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017</a> - Category A6 - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing\">OWASP HTML5 Security Cheat Sheet</a> - Cross\n  Origin Resource Sharing </li>\n  <li> <a href=\"https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny\">OWASP CORS OriginHeaderScrutiny</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/CORS_RequestPreflighScrutiny\">OWASP CORS RequestPreflighScrutiny</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/346.html\">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/942.html\">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6",
            "sans-top25-porous"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S4274",
        "repo": "squid",
        "name": "Asserts should not be used to check the parameters of a public method",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad\noperational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather\nthan throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected\n<code>catch</code>/<code>throw</code> behavior in normal programs.</p>\n<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n public void setPrice(int price) {\n  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;\n  // Set the price\n }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n public void setPrice(int price) {\n  if (price &lt; 0 || price &gt; MAX_PRICE) {\n    throw new IllegalArgumentException(\"Invalid price: \" + price);\n  }\n  // Set the price\n }\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\">Programming With Assertions</a></p>",
        "mdDesc": "<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad\noperational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather\nthan throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected\n<code>catch</code>/<code>throw</code> behavior in normal programs.</p>\n<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n public void setPrice(int price) {\n  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;\n  // Set the price\n }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n public void setPrice(int price) {\n  if (price &lt; 0 || price &gt; MAX_PRICE) {\n    throw new IllegalArgumentException(\"Invalid price: \" + price);\n  }\n  // Set the price\n }\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\">Programming With Assertions</a></p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "squid:S2095",
        "repo": "squid",
        "name": "Resources should be closed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines(\"input.txt\"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>\n<ul>\n  <li> <code>java.io.ByteArrayOutputStream</code> </li>\n  <li> <code>java.io.ByteArrayInputStream</code> </li>\n  <li> <code>java.io.CharArrayReader</code> </li>\n  <li> <code>java.io.CharArrayWriter</code> </li>\n  <li> <code>java.io.StringReader</code> </li>\n  <li> <code>java.io.StringWriter</code> </li>\n</ul>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gFqAQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GAGQBw\">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">Try With Resources</a> </li>\n</ul>",
        "mdDesc": "<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines(\"input.txt\"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>\n<ul>\n  <li> <code>java.io.ByteArrayOutputStream</code> </li>\n  <li> <code>java.io.ByteArrayInputStream</code> </li>\n  <li> <code>java.io.CharArrayReader</code> </li>\n  <li> <code>java.io.CharArrayWriter</code> </li>\n  <li> <code>java.io.StringReader</code> </li>\n  <li> <code>java.io.StringWriter</code> </li>\n</ul>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gFqAQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GAGQBw\">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">Try With Resources</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "denial-of-service",
            "leak"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "excludedResourceTypes",
                "htmlDesc": "Comma separated list of the excluded resource types, using fully qualified names (example: &quot;org.apache.hadoop.fs.FileSystem&quot;)",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "squid:S899",
        "repo": "squid",
        "name": "Return values should not be ignored when they contain the operation status code",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.</p>\n<p>This rule raises an issue when the return values of the following are ignored:</p>\n<ul>\n  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>\n  <li> <code>Iterator.hasNext()</code> </li>\n  <li> <code>Enumeration.hasMoreElements()</code> </li>\n  <li> <code>Lock.tryLock()</code> </li>\n  <li> non-void <code>Condition.await*</code> methods </li>\n  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>\n  <li> <code>Semaphore.tryAcquire</code> </li>\n  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.\n  </li>\n  <li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/w4C4Ag\">CERT, ERR33-C.</a> - Detect and handle standard library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/iIBfBw\">CERT, POS54-C.</a> - Detect and handle POSIX library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/toHWAw\">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/754\">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>\n</ul>",
        "mdDesc": "<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.</p>\n<p>This rule raises an issue when the return values of the following are ignored:</p>\n<ul>\n  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>\n  <li> <code>Iterator.hasNext()</code> </li>\n  <li> <code>Enumeration.hasMoreElements()</code> </li>\n  <li> <code>Lock.tryLock()</code> </li>\n  <li> non-void <code>Condition.await*</code> methods </li>\n  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>\n  <li> <code>Semaphore.tryAcquire</code> </li>\n  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.\n  </li>\n  <li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/w4C4Ag\">CERT, ERR33-C.</a> - Detect and handle standard library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/iIBfBw\">CERT, POS54-C.</a> - Detect and handle POSIX library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/toHWAw\">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/754\">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "error-handling",
            "misra"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "squid:S2092",
        "repo": "squid",
        "name": "Creating cookies without the \"secure\" flag is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The \"secure\" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.\nInstead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> call <code>setSecure(true)</code> on the <code>Cookie</code> object </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure\nresponse.addCookie(c);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/315\">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/614\">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>The \"secure\" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.\nInstead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> call <code>setSecure(true)</code> on the <code>Cookie</code> object </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure\nresponse.addCookie(c);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/315\">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/614\">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a2",
            "owasp-a3",
            "sans-top25-porous",
            "spring"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "squid:S2093",
        "repo": "squid",
        "name": "Try-with-resources should be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br =\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MACfBg\">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle\n  closeable resources </li>\n</ul>",
        "mdDesc": "<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br =\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MACfBg\">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle\n  closeable resources </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "java8",
            "pitfall"
        ],
        "lang": "java",
        "langName": "Java",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-web:FailedUnitTests",
        "repo": "common-web",
        "name": "Failed unit tests should be fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "mdDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "web",
        "langName": "HTML",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of failed tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of failed tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "common-web:SkippedUnitTests",
        "repo": "common-web",
        "name": "Skipped unit tests should be either removed or fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "mdDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "web",
        "langName": "HTML",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of skipped tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of skipped tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-web:DuplicatedBlocks",
        "repo": "common-web",
        "name": "Source files should not have any duplicated blocks",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "web",
        "langName": "HTML",
        "params": [],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "10min",
        "defaultDebtRemFnOffset": "10min",
        "effortToFixDescription": "number of duplicate blocks",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "10min",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "10min",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "10min",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of duplicate blocks",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-web:InsufficientCommentDensity",
        "repo": "common-web",
        "name": "Source files should have a sufficient density of comment lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "mdDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "web",
        "langName": "HTML",
        "params": [
            {
                "key": "minimumCommentDensity",
                "defaultValue": "25",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines required to meet minimum density",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines required to meet minimum density",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-web:InsufficientLineCoverage",
        "repo": "common-web",
        "name": "Lines should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "web",
        "langName": "HTML",
        "params": [
            {
                "key": "minimumLineCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines under the coverage threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines under the coverage threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-web:InsufficientBranchCoverage",
        "repo": "common-web",
        "name": "Branches should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "web",
        "langName": "HTML",
        "params": [
            {
                "key": "minimumBranchCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "5min",
        "effortToFixDescription": "number of uncovered conditions",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "5min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "5min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "5min",
        "remFnOverloaded": false,
        "gapDescription": "number of uncovered conditions",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-ruby:FailedUnitTests",
        "repo": "common-ruby",
        "name": "Failed unit tests should be fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "mdDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "ruby",
        "langName": "Ruby",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of failed tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of failed tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "common-ruby:SkippedUnitTests",
        "repo": "common-ruby",
        "name": "Skipped unit tests should be either removed or fixed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "mdDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "ruby",
        "langName": "Ruby",
        "params": [],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "10min",
        "effortToFixDescription": "number of skipped tests",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "10min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "10min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of skipped tests",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-ruby:DuplicatedBlocks",
        "repo": "common-ruby",
        "name": "Source files should not have any duplicated blocks",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "pitfall"
        ],
        "lang": "ruby",
        "langName": "Ruby",
        "params": [],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "10min",
        "defaultDebtRemFnOffset": "10min",
        "effortToFixDescription": "number of duplicate blocks",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "10min",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "10min",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "10min",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "gapDescription": "number of duplicate blocks",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-ruby:InsufficientCommentDensity",
        "repo": "common-ruby",
        "name": "Source files should have a sufficient density of comment lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "mdDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "ruby",
        "langName": "Ruby",
        "params": [
            {
                "key": "minimumCommentDensity",
                "defaultValue": "25",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines required to meet minimum density",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines required to meet minimum density",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-ruby:InsufficientLineCoverage",
        "repo": "common-ruby",
        "name": "Lines should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "ruby",
        "langName": "Ruby",
        "params": [
            {
                "key": "minimumLineCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "2min",
        "effortToFixDescription": "number of lines under the coverage threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "2min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "2min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "2min",
        "remFnOverloaded": false,
        "gapDescription": "number of lines under the coverage threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "common-ruby:InsufficientBranchCoverage",
        "repo": "common-ruby",
        "name": "Branches should have sufficient coverage by tests",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "mdDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice"
        ],
        "lang": "ruby",
        "langName": "Ruby",
        "params": [
            {
                "key": "minimumBranchCoverageRatio",
                "defaultValue": "65",
                "type": "FLOAT"
            }
        ],
        "defaultDebtRemFnType": "LINEAR",
        "defaultDebtRemFnCoeff": "5min",
        "effortToFixDescription": "number of uncovered conditions",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR",
        "debtRemFnCoeff": "5min",
        "defaultRemFnType": "LINEAR",
        "defaultRemFnGapMultiplier": "5min",
        "remFnType": "LINEAR",
        "remFnGapMultiplier": "5min",
        "remFnOverloaded": false,
        "gapDescription": "number of uncovered conditions",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1135",
        "repo": "php",
        "name": "Track uses of \"TODO\" tags",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "mdDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "severity": "INFO",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1134",
        "repo": "php",
        "name": "Track uses of \"FIXME\" tags",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator / $denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "mdDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator / $denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S4524",
        "repo": "php",
        "name": "\"default\" clauses should be first or last",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nfirst or the last one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the first or last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.4 - Every switch statement shall have a default label </li>\n  <li> MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement </li>\n</ul>",
        "mdDesc": "<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nfirst or the last one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the first or last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.4 - Every switch statement shall have a default label </li>\n  <li> MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "misra"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S112",
        "repo": "php",
        "name": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to\ncatch all exceptions, including unknown exceptions that they do not know how to handle.</p>\n<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthrow new Exception();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nthrow new InvalidArgumentException();\n// or\nthrow new UnexpectedValueException();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>",
        "mdDesc": "<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to\ncatch all exceptions, including unknown exceptions that they do not know how to handle.</p>\n<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthrow new Exception();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nthrow new InvalidArgumentException();\n// or\nthrow new UnexpectedValueException();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "error-handling"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1131",
        "repo": "php",
        "name": "Lines should not end with trailing whitespaces",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>\n<h2>Exceptions</h2>\n<p>Lines containing only whitespaces.</p>",
        "mdDesc": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>\n<h2>Exceptions</h2>\n<p>Lines containing only whitespaces.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "psr2"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S2068",
        "repo": "php",
        "name": "Credentials should not be hard-coded",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$uname = \"steve\";\n$password = \"blue\";\nconnect($uname, $password);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$uname = getEncryptedUser();\n$password = getEncryptedPass();\nconnect($uname, $password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>",
        "mdDesc": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$uname = \"steve\";\n$password = \"blue\";\nconnect($uname, $password);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$uname = getEncryptedUser();\n$password = getEncryptedPass();\nconnect($uname, $password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a2",
            "sans-top25-porous"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "credentialWords",
                "htmlDesc": "Comma separated list of words identifying potential credentials",
                "defaultValue": "password,passwd,pwd",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "php:S1536",
        "repo": "php",
        "name": "Function argument names should be unique",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be\nerror prone. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute($a, $a, $c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute($a, $b, $c) { // Compliant\n}\n</pre>",
        "mdDesc": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be\nerror prone. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute($a, $a, $c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute($a, $b, $c) { // Compliant\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "php:S1779",
        "repo": "php",
        "name": "Only LF character (Unix-like) should be used to end lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>All developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover\nsome SCM engines like Git might sometimes badly support use of Windows 'CRLF' end of line characters.</p>",
        "mdDesc": "<p>All developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover\nsome SCM engines like Git might sometimes badly support use of Windows 'CRLF' end of line characters.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "psr2"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1656",
        "repo": "php",
        "name": "Variables should not be self-assigned",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic function setName($name) {\n    $name = $name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function setName($name) {\n    $this-&gt;name = $name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic function setName($name) {\n    $name = $name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function setName($name) {\n    $this-&gt;name = $name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "3min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "3min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "3min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "3min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "php:S4529",
        "repo": "php",
        "name": "Exposing HTTP endpoints is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072\">CVE-2016-3072</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175\">CVE-2015-3175</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218\">CVE-2003-0218</a> </li>\n</ul>\n<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers\n(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status\ncode).</p>\n<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>\n  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's\n  headers, cookies, body and status code. </li>\n  <li> the response contains some sensitive information which the user shouldn't have access to. </li>\n</ul>\n<p>no access control prevents attackers from successfully performing a forbidden request.</p>\n<ul>\n  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user\n  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a\nhref=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">sanitized</a> before being used. Their content, length, encoding, name (ex: name\nof URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values\nin a given input, can easily miss some of them.</p>\n<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a\nhref=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\">CSRF</a> tokens when possible.</p>\n<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">Protect your sensitive cookies</a> so that client-side javascript cannot\nread or modify them.</p>\n<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the\nfollowing attacks:</p>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">Cross-site Scripting (XSS)</a>, which happens when\n  an unsafe value is included in an HTML page. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">Unvalidated redirects</a> which can happen when the\n  <code>Location</code> header is compromised. </li>\n</ul>\n<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>\n<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when\nthe existence of a resource is sensitive.</p>\n<h2>Questionable Code Example</h2>\n<p>CakePHP</p>\n<pre>\nuse Cake\\Routing\\Router;\n\nRouter::scope('/', function ($routes) { // Questionable\n    // ...\n});\n\nRouter::connect('/', ['controller' =&gt; 'MyController', 'action' =&gt; 'index']); // Questionable\n\nRouter::plugin('MyPlugin', function ($routes) { // Questionable\n    // ...\n});\n\nRouter::prefix('admin', function ($routes) { // Questionable\n    // ...\n});\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/79.html\">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/22.html\">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal') </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072\">CVE-2016-3072</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175\">CVE-2015-3175</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218\">CVE-2003-0218</a> </li>\n</ul>\n<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers\n(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status\ncode).</p>\n<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>\n  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's\n  headers, cookies, body and status code. </li>\n  <li> the response contains some sensitive information which the user shouldn't have access to. </li>\n</ul>\n<p>no access control prevents attackers from successfully performing a forbidden request.</p>\n<ul>\n  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user\n  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a\nhref=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">sanitized</a> before being used. Their content, length, encoding, name (ex: name\nof URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values\nin a given input, can easily miss some of them.</p>\n<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a\nhref=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\">CSRF</a> tokens when possible.</p>\n<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">Protect your sensitive cookies</a> so that client-side javascript cannot\nread or modify them.</p>\n<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the\nfollowing attacks:</p>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">Cross-site Scripting (XSS)</a>, which happens when\n  an unsafe value is included in an HTML page. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">Unvalidated redirects</a> which can happen when the\n  <code>Location</code> header is compromised. </li>\n</ul>\n<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>\n<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when\nthe existence of a resource is sensitive.</p>\n<h2>Questionable Code Example</h2>\n<p>CakePHP</p>\n<pre>\nuse Cake\\Routing\\Router;\n\nRouter::scope('/', function ($routes) { // Questionable\n    // ...\n});\n\nRouter::connect('/', ['controller' =&gt; 'MyController', 'action' =&gt; 'index']); // Questionable\n\nRouter::plugin('MyPlugin', function ($routes) { // Questionable\n    // ...\n});\n\nRouter::prefix('admin', function ($routes) { // Questionable\n    // ...\n});\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/79.html\">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/22.html\">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal') </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a3",
            "owasp-a7",
            "sans-top25-insecure",
            "sans-top25-porous",
            "sans-top25-risky",
            "spring"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "php:S905",
        "repo": "php",
        "name": "Non-empty statements should change control flow or have at least one side-effect",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$a == 1; // Noncompliant; was assignment intended?\n$a &lt; $b; // Noncompliant; have we forgotten to assign the result to a variable?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/482\">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>",
        "mdDesc": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$a == 1; // Noncompliant; was assignment intended?\n$a &lt; $b; // Noncompliant; have we forgotten to assign the result to a variable?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/482\">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "misra",
            "unused"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "php:S907",
        "repo": "php",
        "name": "\"goto\" statement should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$i = 0;\nloop:\n  echo(\"i = $i\");\n  $i++;\n  if ($i &lt; 10){\n    goto loop;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++){\n  echo(\"i = $i\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>",
        "mdDesc": "<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$i = 0;\nloop:\n  echo(\"i = $i\");\n  $i++;\n  if ($i &lt; 10){\n    goto loop;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++){\n  echo(\"i = $i\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload",
            "misra"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S103",
        "repo": "php",
        "name": "Lines should not be too long",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
        "mdDesc": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "maximumLineLength",
                "defaultValue": "120",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S105",
        "repo": "php",
        "name": "Tabulation characters should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>",
        "mdDesc": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "psr2"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1808",
        "repo": "php",
        "name": "Source code should comply with formatting standards",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently. This rule raises issues for failures to comply with formatting\nstandard. The default parameter values conform to the PSR2 standard.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default PSR2 parameter values:</p>\n<pre>\nuse FooClass;              // Noncompliant; the \"use\" declaration should be placed after the \"namespace\" declaration\n\nnamespace Vendor\\Package;\nuse FooClass;              // Noncompliant; the \"namespace\" declaration should be followed by a blank line\n$foo = 1;                  // Noncompliant; the \"use\" declaration should be followed by a blank line\n\nclass ClassA {             // Noncompliant; an open curly brace should be at the beginning of a new line for classes and functions\n  function my_function(){  // Noncompliant; curly brace on wrong line\n    if ($firstThing)       // Noncompliant; an open curly brace should be at the end of line for a control structure\n    {\n      ...\n    }\n\n    if ($secondThing)    { // Noncompliant; there should be exactly one space between the closing parenthesis and the opening curly brace\n      ...\n    }\n\n    if($thirdThing) {      // Noncompliant; there should be exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    }\n    else {                 // Noncompliant; the close curly brace and the next \"else\" (or \"catch\" or \"finally\") keyword should be located on the same line\n      ...\n    }\n\n    try{                   // Noncompliant; there should be exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n    }\n\n    analyse( $fruit ) ;    // Noncompliant; there should not be any space after the opening parenthesis and before the closing parenthesis\n\n    for ($i = 0;$i &lt; 10;   $i++) { // Nomcompliant; there should be exactly one space after each \";\" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply ,$orange);    // Noncompliant; the comma should be followed by one space and not preceded by any\n\n    do_something ();       // Noncompliant; there should not be any space after the method name\n\n    foreach ($fruits    as $fruit_key =&gt;     $fruit) {  // Noncompliant; in the foreach statement there should be one space before and after \"as\" keyword and \"=&gt;\" operator\n      ...\n    }\n  }\n}\n\nclass ClassB\nextends ParentClass  // Noncompliant; the class name and the \"extends\" / \"implements\" keyword should be on the same line\n{\n  ...\n}\n\nclass ClassC extends ParentClass implements \\ArrayAccess, \\Countable,\n    \\Serializable    // Noncompliant; the list of implemented interfaces should be correctly indented\n{\n\n  public function aVeryLongMethodName(ClassTypeHint $arg1, // Noncompliant; the arguments in a method declaration should be correctly indented\n    &amp;$arg2, array $arg3 = []) {\n\n    $noArgs_longVars = function () use ($longVar1,         // Noncompliant; the arguments in a function declaration should be correctly indented\n        $longerVar2,\n        $muchLongerVar3\n    ) {\n      ...\n    };\n\n    $foo-&gt;bar($longArgument,    // Noncompliant; the arguments in a method call should be correctly indented\n      $longerArgument,\n      $muchLongerArgument);     // Noncompliant; the closing parenthesis should be placed on the next line\n\n    $closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {  // Noncompliant; the closure declaration should be correctly spaced - see (5)\n      ...\n    };\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Vendor\\Package; // Compliant; the \"namespace\" declaration is followed by a blank line\n\nuse FooClass;             // Compliant; the \"use\" declaration is placed after the \"namespace\" declaration\n                          // Compliant; the \"use\" declaration is followed by a blank line\n$foo = 1;\n\nclass ClassA\n{                         // Compliant; the open curly brace is at the beginning of a new line for the class\n  function my_function()\n  {                       // Compliant; the open curly brace is at the beginning of a new line for the function\n    if ($firstThing) {    // Compliant; the open curly brace is at the end of line for the control structure\n      ...\n    }\n\n    if ($secondThing) {   // Compliant; there is exactly one space between the closing parenthesis and the opening curly brace\n      ...\n    }\n\n    if ($thirdThing) {    // Compliant; there is exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    } else {              // Compliant; the close curly brace and the next \"else\" (or \"catch\" or \"finally\") keyword are located on the same line\n      ...\n    }\n\n    try {                 // Compliant; there is exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n      ...\n    }\n\n    analyse($fruit);      // Compliant: there is no space after the opening parenthesis, nor before the closing parenthesis\n\n    for ($i = 0; $i &lt; 10; $i++) { // Compliant: there is exactly one space after each \";\" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply, $orange);   // Compliant; the comma is followed by one space and is not preceded by any\n\n    do_something();       // Compliant; there is no space after the method name\n\n    foreach ($fruits as $fruit_key =&gt; $fruit) {  // Compliant; in the foreach statement there is one space before and after \"as\" keyword and \"=&gt;\" operator\n      ...\n    }\n  }\n}\n\n/* The idea here is to make it obvious at first glance that a class extends\n * some other classes and/or implements some interfaces. The names of\n * extended classes or implemented interfaces can be located on subsequent lines.\n */\nclass ClassB1 extends ParentClass // Compliant; the class name and the \"extends\" (or \"implements\") keyword are located on the same line\n{\n  ...\n}\n\nclass ClassB2 extends             // Compliant; the class name and the \"extends\" (or \"implements\") keyword are located on the same line\nParentClass {\n  ...\n}\n\n/* Lists of implements may be split across multiple lines, where each subsequent line\n * is indented once. When doing so, the first item in the list should be on the next line,\n * and there should be only one interface per line.\n */\nclass ClassC extends ParentClass implements\n    \\ArrayAccess,         // Compliant; the list of implemented interfaces is correctly indented\n    \\Countable,\n    \\Serializable\n{\n  /* Argument lists may be split across multiple lines, where each subsequent line\n   * is indented once. When doing so, the first item in the list should be on the next line,\n   * and there should be only one argument per line. Also, when the argument list is\n   * split across multiple lines, the closing parenthesis and opening brace should be\n   * placed together on their own line with one space between them.\n   */\n  public function aVeryLongMethodName(\n    ClassTypeHint $arg1,  // Compliant; the arguments in a method/function declaration are correctly indented\n      &amp;$arg2,\n      array $arg3 = []\n    ) {\n      $noArgs_longVars = function () use (\n        $longVar1,        // Compliant; the arguments in a method/function declaration are correctly indented\n        $longerVar2,\n        $muchLongerVar3\n      ) {\n        ...\n      };\n\n\n    /* Argument lists may be split across multiple lines, where each subsequent line is\n     * indented once. When doing so, the first item in the list should be on the next line,\n     * and there should be only one argument per line.\n     */\n    $foo-&gt;bar(\n      $longArgument,       // Compliant; the arguments in the method call are be correctly indented\n      $longerArgument,\n      $muchLongerArgument\n    );                     // Compliant; the closing parenthesis is placed on a separate line\n\n    /* Closures should be declared with a space after the \"function\" keyword,\n     * and a space before and after the \"use\" keyword.\n     */\n    $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) { // Compliant; the closure declaration is correctly spaced\n      ...\n    };\n  }\n}\n</pre>",
        "mdDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently. This rule raises issues for failures to comply with formatting\nstandard. The default parameter values conform to the PSR2 standard.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default PSR2 parameter values:</p>\n<pre>\nuse FooClass;              // Noncompliant; the \"use\" declaration should be placed after the \"namespace\" declaration\n\nnamespace Vendor\\Package;\nuse FooClass;              // Noncompliant; the \"namespace\" declaration should be followed by a blank line\n$foo = 1;                  // Noncompliant; the \"use\" declaration should be followed by a blank line\n\nclass ClassA {             // Noncompliant; an open curly brace should be at the beginning of a new line for classes and functions\n  function my_function(){  // Noncompliant; curly brace on wrong line\n    if ($firstThing)       // Noncompliant; an open curly brace should be at the end of line for a control structure\n    {\n      ...\n    }\n\n    if ($secondThing)    { // Noncompliant; there should be exactly one space between the closing parenthesis and the opening curly brace\n      ...\n    }\n\n    if($thirdThing) {      // Noncompliant; there should be exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    }\n    else {                 // Noncompliant; the close curly brace and the next \"else\" (or \"catch\" or \"finally\") keyword should be located on the same line\n      ...\n    }\n\n    try{                   // Noncompliant; there should be exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n    }\n\n    analyse( $fruit ) ;    // Noncompliant; there should not be any space after the opening parenthesis and before the closing parenthesis\n\n    for ($i = 0;$i &lt; 10;   $i++) { // Nomcompliant; there should be exactly one space after each \";\" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply ,$orange);    // Noncompliant; the comma should be followed by one space and not preceded by any\n\n    do_something ();       // Noncompliant; there should not be any space after the method name\n\n    foreach ($fruits    as $fruit_key =&gt;     $fruit) {  // Noncompliant; in the foreach statement there should be one space before and after \"as\" keyword and \"=&gt;\" operator\n      ...\n    }\n  }\n}\n\nclass ClassB\nextends ParentClass  // Noncompliant; the class name and the \"extends\" / \"implements\" keyword should be on the same line\n{\n  ...\n}\n\nclass ClassC extends ParentClass implements \\ArrayAccess, \\Countable,\n    \\Serializable    // Noncompliant; the list of implemented interfaces should be correctly indented\n{\n\n  public function aVeryLongMethodName(ClassTypeHint $arg1, // Noncompliant; the arguments in a method declaration should be correctly indented\n    &amp;$arg2, array $arg3 = []) {\n\n    $noArgs_longVars = function () use ($longVar1,         // Noncompliant; the arguments in a function declaration should be correctly indented\n        $longerVar2,\n        $muchLongerVar3\n    ) {\n      ...\n    };\n\n    $foo-&gt;bar($longArgument,    // Noncompliant; the arguments in a method call should be correctly indented\n      $longerArgument,\n      $muchLongerArgument);     // Noncompliant; the closing parenthesis should be placed on the next line\n\n    $closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {  // Noncompliant; the closure declaration should be correctly spaced - see (5)\n      ...\n    };\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Vendor\\Package; // Compliant; the \"namespace\" declaration is followed by a blank line\n\nuse FooClass;             // Compliant; the \"use\" declaration is placed after the \"namespace\" declaration\n                          // Compliant; the \"use\" declaration is followed by a blank line\n$foo = 1;\n\nclass ClassA\n{                         // Compliant; the open curly brace is at the beginning of a new line for the class\n  function my_function()\n  {                       // Compliant; the open curly brace is at the beginning of a new line for the function\n    if ($firstThing) {    // Compliant; the open curly brace is at the end of line for the control structure\n      ...\n    }\n\n    if ($secondThing) {   // Compliant; there is exactly one space between the closing parenthesis and the opening curly brace\n      ...\n    }\n\n    if ($thirdThing) {    // Compliant; there is exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    } else {              // Compliant; the close curly brace and the next \"else\" (or \"catch\" or \"finally\") keyword are located on the same line\n      ...\n    }\n\n    try {                 // Compliant; there is exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n      ...\n    }\n\n    analyse($fruit);      // Compliant: there is no space after the opening parenthesis, nor before the closing parenthesis\n\n    for ($i = 0; $i &lt; 10; $i++) { // Compliant: there is exactly one space after each \";\" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply, $orange);   // Compliant; the comma is followed by one space and is not preceded by any\n\n    do_something();       // Compliant; there is no space after the method name\n\n    foreach ($fruits as $fruit_key =&gt; $fruit) {  // Compliant; in the foreach statement there is one space before and after \"as\" keyword and \"=&gt;\" operator\n      ...\n    }\n  }\n}\n\n/* The idea here is to make it obvious at first glance that a class extends\n * some other classes and/or implements some interfaces. The names of\n * extended classes or implemented interfaces can be located on subsequent lines.\n */\nclass ClassB1 extends ParentClass // Compliant; the class name and the \"extends\" (or \"implements\") keyword are located on the same line\n{\n  ...\n}\n\nclass ClassB2 extends             // Compliant; the class name and the \"extends\" (or \"implements\") keyword are located on the same line\nParentClass {\n  ...\n}\n\n/* Lists of implements may be split across multiple lines, where each subsequent line\n * is indented once. When doing so, the first item in the list should be on the next line,\n * and there should be only one interface per line.\n */\nclass ClassC extends ParentClass implements\n    \\ArrayAccess,         // Compliant; the list of implemented interfaces is correctly indented\n    \\Countable,\n    \\Serializable\n{\n  /* Argument lists may be split across multiple lines, where each subsequent line\n   * is indented once. When doing so, the first item in the list should be on the next line,\n   * and there should be only one argument per line. Also, when the argument list is\n   * split across multiple lines, the closing parenthesis and opening brace should be\n   * placed together on their own line with one space between them.\n   */\n  public function aVeryLongMethodName(\n    ClassTypeHint $arg1,  // Compliant; the arguments in a method/function declaration are correctly indented\n      &amp;$arg2,\n      array $arg3 = []\n    ) {\n      $noArgs_longVars = function () use (\n        $longVar1,        // Compliant; the arguments in a method/function declaration are correctly indented\n        $longerVar2,\n        $muchLongerVar3\n      ) {\n        ...\n      };\n\n\n    /* Argument lists may be split across multiple lines, where each subsequent line is\n     * indented once. When doing so, the first item in the list should be on the next line,\n     * and there should be only one argument per line.\n     */\n    $foo-&gt;bar(\n      $longArgument,       // Compliant; the arguments in the method call are be correctly indented\n      $longerArgument,\n      $muchLongerArgument\n    );                     // Compliant; the closing parenthesis is placed on a separate line\n\n    /* Closures should be declared with a space after the \"function\" keyword,\n     * and a space before and after the \"use\" keyword.\n     */\n    $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) { // Compliant; the closure declaration is correctly spaced\n      ...\n    };\n  }\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "psr2",
            "style"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "extends_implements_line",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "no_space_method_name",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "closure_format",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "space_comma",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "open_curly_brace_classes_functions",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "namespace_blank_line",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "open_curly_brace_control_structures",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "one_space_after",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "interfaces_indentation",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "foreach_space",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "no_space",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "function_calls_arguments_indentation",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "closing_curly_brace",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "function_declaration_arguments_indentation",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "use_blank_line",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "one_space_for",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "use_after_namespace",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "one_space_before",
                "defaultValue": "true",
                "type": "BOOLEAN"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S104",
        "repo": "php",
        "name": "Files should not have too many lines of code",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>",
        "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "max",
                "htmlDesc": "Maximum authorized lines of code in a file.",
                "defaultValue": "1000",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S107",
        "repo": "php",
        "name": "Functions should not have too many parameters",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n...\n}\n</pre>",
        "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n...\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "max",
                "defaultValue": "7",
                "type": "INTEGER"
            },
            {
                "key": "constructorMax",
                "defaultValue": "7",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S108",
        "repo": "php",
        "name": "Nested blocks of code should not be left empty",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>",
        "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "suspicious"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1301",
        "repo": "php",
        "name": "\"switch\" statements should have at least 3 \"case\" clauses",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>",
        "mdDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "misra"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S2115",
        "repo": "php",
        "name": "Databases should be password-protected",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Failure to password-protect a database is so careless or naive as to be almost negligent. Databases should always be password protected, but the\nuse of a database connection with an empty password is a clear indication of a database that is not protected.</p>\n<p>This rule flags database connections with empty passwords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n  $servername = \"localhost\";\n  $username = \"AppLogin\";\n  $password = \"\";\n\n  // MySQL\n  $conn = new mysqli($servername, $username, $password);\n  // MySQL\n  $conn = mysqli_connect($servername, $username, $password);\n  // PDO way\n  $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);\n  // Oracle\n  $conn = oci_connect($username, $password, \"//localhost/orcl\");\n  // MS SQL Server\n  $sqlsrvName = \"serverName\\sqlexpress\";\n  $sqlsrvConnInfo = array( \"Database\"=&gt;\"myDB\", \"UID\"=&gt;$username, \"PWD\"=&gt;$password);\n  $conn = sqlsrv_connect( $sqlsrvName, $sqlsrvConnInfo);\n  // PosgreSQL\n  $pgConnInfo = \"host=localhost port=5432 dbname=test user=\" . $username . \" password=\" . $password;\n  $conn = pg_connect($pgConnInfo);\n?&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "mdDesc": "<p>Failure to password-protect a database is so careless or naive as to be almost negligent. Databases should always be password protected, but the\nuse of a database connection with an empty password is a clear indication of a database that is not protected.</p>\n<p>This rule flags database connections with empty passwords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n  $servername = \"localhost\";\n  $username = \"AppLogin\";\n  $password = \"\";\n\n  // MySQL\n  $conn = new mysqli($servername, $username, $password);\n  // MySQL\n  $conn = mysqli_connect($servername, $username, $password);\n  // PDO way\n  $conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);\n  // Oracle\n  $conn = oci_connect($username, $password, \"//localhost/orcl\");\n  // MS SQL Server\n  $sqlsrvName = \"serverName\\sqlexpress\";\n  $sqlsrvConnInfo = array( \"Database\"=&gt;\"myDB\", \"UID\"=&gt;$username, \"PWD\"=&gt;$password);\n  $conn = sqlsrv_connect( $sqlsrvName, $sqlsrvConnInfo);\n  // PosgreSQL\n  $pgConnInfo = \"host=localhost port=5432 dbname=test user=\" . $username . \" password=\" . $password;\n  $conn = pg_connect($pgConnInfo);\n?&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "owasp-a3"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "45min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "45min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "45min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "45min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "php:S1145",
        "repo": "php",
        "name": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>",
        "mdDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "misra"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "php:S1541",
        "repo": "php",
        "name": "Functions should not be too complex",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>",
        "mdDesc": "<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "threshold",
                "defaultValue": "20",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "1min",
        "defaultDebtRemFnOffset": "10min",
        "effortToFixDescription": "per complexity point above the threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "1min",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "1min",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "1min",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "gapDescription": "per complexity point above the threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1784",
        "repo": "php",
        "name": "Method visibility should be explicitly declared",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To\nprevent any misunderstanding, this visibility should always be explicitly declared.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function foo(){...}\n</pre>",
        "mdDesc": "<p>Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To\nprevent any misunderstanding, this visibility should always be explicitly declared.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function foo(){...}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "psr2"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "php:S1144",
        "repo": "php",
        "name": "Unused \"private\" methods should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n</pre>",
        "mdDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "unused"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S121",
        "repo": "php",
        "name": "Control structures should use curly braces",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
        "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra",
            "pitfall"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1264",
        "repo": "php",
        "name": "A \"while\" loop should be used instead of a \"for\" loop",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
        "mdDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "clumsy"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1781",
        "repo": "php",
        "name": "PHP keywords and constants \"true\", \"false\", \"null\" should be lower case",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using indifferently lower or upper case for PHP keywords and constants \"true\", \"false\" and \"null\" can impact the readability of PHP source\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php ECHO 'Hello World'; ?&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php echo 'Hello World'; ?&gt;\n</pre>",
        "mdDesc": "<p>Using indifferently lower or upper case for PHP keywords and constants \"true\", \"false\" and \"null\" can impact the readability of PHP source\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php ECHO 'Hello World'; ?&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php echo 'Hello World'; ?&gt;\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention",
            "psr2"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1142",
        "repo": "php",
        "name": "Functions should not contain too many return statements",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction myFunction(){ // Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
        "mdDesc": "<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction myFunction(){ // Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "max",
                "defaultValue": "3",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1780",
        "repo": "php",
        "name": "Closing tag \"?>\" should be omitted on files containing only PHP",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>According to the PSR2 coding standard:</p>\n<blockquote>\n  <p>The closing <code>?&gt;</code> tag should be omitted from files containing only PHP.</p>\n</blockquote>\n<p>According to the PHP manual:</p>\n<blockquote>\n  <p>in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files, and you will still\n  be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at\n  the end of the parts generated by the included files.</p>\n</blockquote>",
        "mdDesc": "<p>According to the PSR2 coding standard:</p>\n<blockquote>\n  <p>The closing <code>?&gt;</code> tag should be omitted from files containing only PHP.</p>\n</blockquote>\n<p>According to the PHP manual:</p>\n<blockquote>\n  <p>in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files, and you will still\n  be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at\n  the end of the parts generated by the included files.</p>\n</blockquote>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "bad-practice",
            "psr2"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S122",
        "repo": "php",
        "name": "Statements should be on separate lines",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored.</p>\n<pre>\n$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant\n$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant\n</pre>",
        "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored.</p>\n<pre>\n$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant\n$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "psr2",
            "style"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S2077",
        "repo": "php",
        "name": "Executing SQL queries is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019\">CVE-2018-9019</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318\">CVE-2018-7318</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611\">CVE-2017-5611</a> </li>\n</ul>\n<p><a href=\"https://www.owasp.org/index.php/SQL_Injection\">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that\nexecute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include\ninput that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL\nbinding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>\n<p>This rule raises an issue when an execution of SQL queries might be susceptible to SQL injection. The goal is to guide security code reviews.</p>\n<p>The following native database functions don't support prepared statements, thus their use is considered susceptible to injection.</p>\n<ul>\n  <li> <code>mysql_query</code> </li>\n  <li> <code>mysql_db_query</code> </li>\n  <li> <code>mysql_unbuffered_query</code> </li>\n  <li> <code>pg_update</code> </li>\n  <li> <code>pg_query</code> </li>\n  <li> <code>pg_send_query</code> </li>\n  <li> <code>mssql_query</code> </li>\n  <li> <code>mysqli_query</code> and <code>mysqli::query</code> </li>\n  <li> <code>mysqli_real_query</code> and <code>mysqli::real_query</code> </li>\n  <li> <code>mysqli_multi_query</code> and <code>mysqli::multi_query</code> </li>\n  <li> <code>mysqli_send_query</code> and <code>mysqli::send_query</code> </li>\n  <li> <code>PDO::query</code> </li>\n  <li> <code>PDO::exec</code> </li>\n</ul>\n<p>In addition, the following function call will also raise an issue if the provided query is a string with one or more interpolated variable\n(containing \"$\" sign).</p>\n<ul>\n  <li> <code>PDO::prepare</code> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.\n  </li>\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> whenever possible. </li>\n  <li> PHP Data Objects (PDO) prepared statement with bound parameters should be preferred to native database functions. </li>\n  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> every unsafe input. </li>\n</ul>\n<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n$id = $_GET['id'];\nmysql_connect('localhost', $username, $password) or die('Could not connect: ' . mysql_error());\nmysql_select_db('myDatabase') or die('Could not select database');\n\n$query = \"SELECT * FROM myTable WHERE id = \" + $id;\n$result = mysql_query($query) or die('Query failed: ' . mysql_error());  // Questionable, seems to be susceptible to SQL injection\n\nwhile ($row = mysql_fetch_object($result)) {\n    echo $row-&gt;name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$id = $_GET['id'];\ntry {\n    $conn = new PDO('mysql:host=localhost;dbname=myDatabase', $username, $password);\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $stmt = $conn-&gt;prepare('SELECT * FROM myTable WHERE id = :id');\n    $stmt-&gt;execute(array('id' =&gt; $id));\n\n    while($row = $stmt-&gt;fetch(PDO::FETCH_OBJ)) {\n        echo $row-&gt;name;\n    }\n} catch(PDOException $e) {\n    echo 'ERROR: ' . $e-&gt;getMessage();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised if one of the functions is called with hard-coded string (no concatenation) and this string does not contain a \"$\"\nsign.</p>\n<pre>\n$result = mysql_query(\"SELECT * FROM myTable WHERE id = 42\") or die('Query failed: ' . mysql_error());  // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>",
        "mdDesc": "<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019\">CVE-2018-9019</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318\">CVE-2018-7318</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611\">CVE-2017-5611</a> </li>\n</ul>\n<p><a href=\"https://www.owasp.org/index.php/SQL_Injection\">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that\nexecute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include\ninput that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL\nbinding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>\n<p>This rule raises an issue when an execution of SQL queries might be susceptible to SQL injection. The goal is to guide security code reviews.</p>\n<p>The following native database functions don't support prepared statements, thus their use is considered susceptible to injection.</p>\n<ul>\n  <li> <code>mysql_query</code> </li>\n  <li> <code>mysql_db_query</code> </li>\n  <li> <code>mysql_unbuffered_query</code> </li>\n  <li> <code>pg_update</code> </li>\n  <li> <code>pg_query</code> </li>\n  <li> <code>pg_send_query</code> </li>\n  <li> <code>mssql_query</code> </li>\n  <li> <code>mysqli_query</code> and <code>mysqli::query</code> </li>\n  <li> <code>mysqli_real_query</code> and <code>mysqli::real_query</code> </li>\n  <li> <code>mysqli_multi_query</code> and <code>mysqli::multi_query</code> </li>\n  <li> <code>mysqli_send_query</code> and <code>mysqli::send_query</code> </li>\n  <li> <code>PDO::query</code> </li>\n  <li> <code>PDO::exec</code> </li>\n</ul>\n<p>In addition, the following function call will also raise an issue if the provided query is a string with one or more interpolated variable\n(containing \"$\" sign).</p>\n<ul>\n  <li> <code>PDO::prepare</code> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.\n  </li>\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> whenever possible. </li>\n  <li> PHP Data Objects (PDO) prepared statement with bound parameters should be preferred to native database functions. </li>\n  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> every unsafe input. </li>\n</ul>\n<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>\n<h2>Questionable Code Example</h2>\n<pre>\n$id = $_GET['id'];\nmysql_connect('localhost', $username, $password) or die('Could not connect: ' . mysql_error());\nmysql_select_db('myDatabase') or die('Could not select database');\n\n$query = \"SELECT * FROM myTable WHERE id = \" + $id;\n$result = mysql_query($query) or die('Query failed: ' . mysql_error());  // Questionable, seems to be susceptible to SQL injection\n\nwhile ($row = mysql_fetch_object($result)) {\n    echo $row-&gt;name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$id = $_GET['id'];\ntry {\n    $conn = new PDO('mysql:host=localhost;dbname=myDatabase', $username, $password);\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $stmt = $conn-&gt;prepare('SELECT * FROM myTable WHERE id = :id');\n    $stmt-&gt;execute(array('id' =&gt; $id));\n\n    while($row = $stmt-&gt;fetch(PDO::FETCH_OBJ)) {\n        echo $row-&gt;name;\n    }\n} catch(PDOException $e) {\n    echo 'ERROR: ' . $e-&gt;getMessage();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised if one of the functions is called with hard-coded string (no concatenation) and this string does not contain a \"$\"\nsign.</p>\n<pre>\n$result = mysql_query(\"SELECT * FROM myTable WHERE id = 42\") or die('Query failed: ' . mysql_error());  // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a1",
            "sans-top25-insecure",
            "sql"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "php:S881",
        "repo": "php",
        "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$u8a = ++$u8b + $u8c--;\n$foo = $bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++$u8b;\n$u8a = $u8b + $u8c;\n$u8c--;\n$foo = $bar / 4;\n$bar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>",
        "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$u8a = ++$u8b + $u8c--;\n$foo = $bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++$u8b;\n$u8a = $u8b + $u8c;\n$u8c--;\n$foo = $bar / 4;\n$bar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "misra"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S4817",
        "repo": "php",
        "name": "Executing XPath expressions is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272\">CVE-2016-6272</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149\">CVE-2016-9149</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837\">CVE-2012-4837</a> </li>\n</ul>\n<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from\ntainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath\ninjections attacks can read sensitive information from the XML document.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XPATH expression might contain some unsafe input coming from a user. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize any user input before using it in an XPATH expression.</p>\n<h2>Questionable Code Example</h2>\n<pre>\nfunction evaluate_xpath($doc, $xpathstring, $xmlstring)\n{\n    $xpath = new DOMXpath($doc);\n    $xpath-&gt;query($xpathstring); // Questionable\n    $xpath-&gt;evaluate($xpathstring); // Questionable\n\n    // There is no risk if the xpath is hardcoded\n    $xpath-&gt;query(\"/users/user[@name='alice']\"); // Compliant\n    $xpath-&gt;evaluate(\"/users/user[@name='alice']\"); // Compliant\n\n    // An issue will also be created if the SimpleXMLElement is created\n    // by simplexml_load_file, simplexml_load_string or simplexml_import_dom\n    $xml = new SimpleXMLElement($doc);\n    $xml-&gt;xpath($xpathstring); // Questionable\n\n    // There is no risk if the xpath is hardcoded\n    $xml-&gt;xpath(\"/users/user[@name='alice']\"); // Compliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/643\">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BwLEAw\">CERT, IDS53-J.</a> - Prevent XPath Injection </li>\n</ul>",
        "mdDesc": "<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272\">CVE-2016-6272</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149\">CVE-2016-9149</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837\">CVE-2012-4837</a> </li>\n</ul>\n<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from\ntainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath\ninjections attacks can read sensitive information from the XML document.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XPATH expression might contain some unsafe input coming from a user. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize any user input before using it in an XPATH expression.</p>\n<h2>Questionable Code Example</h2>\n<pre>\nfunction evaluate_xpath($doc, $xpathstring, $xmlstring)\n{\n    $xpath = new DOMXpath($doc);\n    $xpath-&gt;query($xpathstring); // Questionable\n    $xpath-&gt;evaluate($xpathstring); // Questionable\n\n    // There is no risk if the xpath is hardcoded\n    $xpath-&gt;query(\"/users/user[@name='alice']\"); // Compliant\n    $xpath-&gt;evaluate(\"/users/user[@name='alice']\"); // Compliant\n\n    // An issue will also be created if the SimpleXMLElement is created\n    // by simplexml_load_file, simplexml_load_string or simplexml_import_dom\n    $xml = new SimpleXMLElement($doc);\n    $xml-&gt;xpath($xpathstring); // Questionable\n\n    // There is no risk if the xpath is hardcoded\n    $xml-&gt;xpath(\"/users/user[@name='alice']\"); // Compliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/643\">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BwLEAw\">CERT, IDS53-J.</a> - Prevent XPath Injection </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cert",
            "cwe",
            "owasp-a1"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "php:S4818",
        "repo": "php",
        "name": "Using Sockets is security-sensitive",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785\">CVE-2011-178</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645\">CVE-2017-5645</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597\">CVE-2018-6597</a> </li>\n</ul>\n<p>Sockets are vulnerable in multiple ways:</p>\n<ul>\n  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive\n  sensitive information or inject dangerous input. </li>\n  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>\n</ul>\n<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the\nuse of http connections.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sockets are created without any limit every time a user performs an action. </li>\n  <li> input received from sockets is used without being sanitized. </li>\n  <li> sensitive data is sent via sockets without being encrypted. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>\n  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> any input read from the socket. </li>\n  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\nfunction handle_sockets($domain, $type, $protocol, $port, $backlog, $addr, $hostname, $local_socket, $remote_socket, $fd) {\n    socket_create($domain, $type, $protocol); // Questionable\n    socket_create_listen($port, $backlog); // Questionable\n    socket_addrinfo_bind($addr); // Questionable\n    socket_addrinfo_connect($addr); // Questionable\n    socket_create_pair($domain, $type, $protocol, $fd);\n\n    fsockopen($hostname); // Questionable\n    pfsockopen($hostname); // Questionable\n    stream_socket_server($local_socket); // Questionable\n    stream_socket_client($remote_socket); // Questionable\n    stream_socket_pair($domain, $type, $protocol); // Questionable\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Information Exposure </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "mdDesc": "<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785\">CVE-2011-178</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645\">CVE-2017-5645</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597\">CVE-2018-6597</a> </li>\n</ul>\n<p>Sockets are vulnerable in multiple ways:</p>\n<ul>\n  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive\n  sensitive information or inject dangerous input. </li>\n  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>\n</ul>\n<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the\nuse of http connections.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sockets are created without any limit every time a user performs an action. </li>\n  <li> input received from sockets is used without being sanitized. </li>\n  <li> sensitive data is sent via sockets without being encrypted. </li>\n</ul>\n<p>You are at risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>\n  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> any input read from the socket. </li>\n  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>\n</ul>\n<h2>Questionable Code Example</h2>\n<pre>\nfunction handle_sockets($domain, $type, $protocol, $port, $backlog, $addr, $hostname, $local_socket, $remote_socket, $fd) {\n    socket_create($domain, $type, $protocol); // Questionable\n    socket_create_listen($port, $backlog); // Questionable\n    socket_addrinfo_bind($addr); // Questionable\n    socket_addrinfo_connect($addr); // Questionable\n    socket_create_pair($domain, $type, $protocol, $fd);\n\n    fsockopen($hostname); // Questionable\n    pfsockopen($hostname); // Questionable\n    stream_socket_server($local_socket); // Questionable\n    stream_socket_client($remote_socket); // Questionable\n    stream_socket_pair($domain, $type, $protocol); // Questionable\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Information Exposure </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a1",
            "owasp-a3",
            "sans-top25-porous",
            "sans-top25-risky"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "debtOverloaded": false,
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "SECURITY_HOTSPOT"
    },
    {
        "key": "php:S1788",
        "repo": "php",
        "name": "Method arguments with default values should be last",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many\nor as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. </p>\n<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to \"get to\" the non-default arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction makeyogurt($type = \"acidophilus\", $flavor){...}  // Noncompliant\n\nmakeyogurt(\"raspberry\")}}  // Runtime error: Missing argument 2 in call to makeyogurt()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction makeyogurt($flavor, $type = \"acidophilus\", ){...}\n\nmakeyogurt(\"raspberry\")}} // Works as expected\n</pre>",
        "mdDesc": "<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many\nor as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. </p>\n<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to \"get to\" the non-default arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction makeyogurt($type = \"acidophilus\", $flavor){...}  // Noncompliant\n\nmakeyogurt(\"raspberry\")}}  // Runtime error: Missing argument 2 in call to makeyogurt()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction makeyogurt($flavor, $type = \"acidophilus\", ){...}\n\nmakeyogurt(\"raspberry\")}} // Works as expected\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "psr2"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "20min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "20min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "20min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "20min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S2757",
        "repo": "php",
        "name": "\"=+\" should not be used instead of \"+=\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$target = -5;\n$num = 3;\n\n$target =- $num;  // Noncompliant; target = -3. Is that really what's meant?\n$target =+ $num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$target = -5;\n$num = 3;\n\n$target = -$num;  // Compliant; intent to assign inverse value of num is clear\n$target += $num;\n</pre>",
        "mdDesc": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$target = -5;\n$num = 3;\n\n$target =- $num;  // Noncompliant; target = -3. Is that really what's meant?\n$target =+ $num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$target = -5;\n$num = 3;\n\n$target = -$num;  // Compliant; intent to assign inverse value of num is clear\n$target += $num;\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "php:S1820",
        "repo": "php",
        "name": "Classes should not have too many fields",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
        "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "countNonpublicFields",
                "defaultValue": "true",
                "type": "BOOLEAN"
            },
            {
                "key": "maximumFieldThreshold",
                "defaultValue": "20",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1h",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1h",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1h",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1h",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S113",
        "repo": "php",
        "name": "Files should contain an empty newline at the end",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>",
        "mdDesc": "<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S114",
        "repo": "php",
        "name": "Interface names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\ninterface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface MyInterface {...}\n</pre>",
        "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\ninterface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface MyInterface {...}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "format",
                "htmlDesc": "Regular expression used to check the interface names against.",
                "defaultValue": "^[A-Z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S115",
        "repo": "php",
        "name": "Constant names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\ndefine(\"const1\", true);\n\nclass Foo {\n    const const2 = \"bar\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndefine(\"CONST1\", true);\n\nclass Foo {\n    const CONST2 = \"bar\";\n}\n</pre>",
        "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\ndefine(\"const1\", true);\n\nclass Foo {\n    const const2 = \"bar\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndefine(\"CONST1\", true);\n\nclass Foo {\n    const CONST2 = \"bar\";\n}\n</pre>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "format",
                "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S116",
        "repo": "php",
        "name": "Field names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n  $my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  $myField;\n}\n</pre>",
        "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n  $my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  $myField;\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "format",
                "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S117",
        "repo": "php",
        "name": "Local variable and function parameter names should comply with a naming convention",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic function doSomething($my_param){\n  $LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function doSomething($myParam){\n  $local;\n  ...\n}\n</pre>",
        "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic function doSomething($my_param){\n  $LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function doSomething($myParam){\n  $local;\n  ...\n}\n</pre>",
        "severity": "MINOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "format",
                "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                "type": "STRING"
            }
        ],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "2min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "2min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "2min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "2min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1599",
        "repo": "php",
        "name": "Variable variables should not be used",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>PHP's \"variable variables\" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$var = 'foo';\n$$var = 'bar';      //Noncompliant\n$$$var = 'hello';  //Noncompliant\n\necho $foo; //will display 'bar'\necho $bar; //will display 'hello'\n</pre>",
        "mdDesc": "<p>PHP's \"variable variables\" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$var = 'foo';\n$$var = 'bar';      //Noncompliant\n$$$var = 'hello';  //Noncompliant\n\necho $foo; //will display 'bar'\necho $bar; //will display 'hello'\n</pre>",
        "severity": "BLOCKER",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S2070",
        "repo": "php",
        "name": "SHA-1 and Message-Digest hash algorithms should not be used in secure contexts",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>\n<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$password = ...\n\nif (md5($password) === '1f3870be274f6c49b3e31a0c6728957f') { // Noncompliant; md5() hashing algorithm is not secure for password management\n   [...]\n}\n\nif (sha1($password) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') { // Noncompliant; sha1() hashing algorithm is not secure for password management\n   [...]\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"http://shattered.io/\">SHAttered</a> - The first concrete collision attack against SHA-1. </li>\n</ul>",
        "mdDesc": "<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>\n<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$password = ...\n\nif (md5($password) === '1f3870be274f6c49b3e31a0c6728957f') { // Noncompliant; md5() hashing algorithm is not secure for password management\n   [...]\n}\n\nif (sha1($password) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') { // Noncompliant; sha1() hashing algorithm is not secure for password management\n   [...]\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"http://shattered.io/\">SHAttered</a> - The first concrete collision attack against SHA-1. </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "cwe",
            "owasp-a6",
            "sans-top25-porous",
            "spring"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "30min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "30min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "30min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "30min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "VULNERABILITY"
    },
    {
        "key": "php:S1751",
        "repo": "php",
        "name": "Loops with at most one iteration should be refactored",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) { // Noncompliant\n  echo \"i is $i\";\n  break;\n}\n...\nfor ($i = 0; $i &lt; 10; $i++) { // Noncompliant\n  if ($i == $x) {\n    break;\n  } else {\n    echo \"i is $i\";\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo \"i is $i\";\n}\n...\nfor ($i = 0; $i &lt; 10; $i++) {\n  if ($i == $x) {\n    break;\n  } else {\n    echo \"i is $i\";\n  }\n}\n</pre>",
        "mdDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) { // Noncompliant\n  echo \"i is $i\";\n  break;\n}\n...\nfor ($i = 0; $i &lt; 10; $i++) { // Noncompliant\n  if ($i == $x) {\n    break;\n  } else {\n    echo \"i is $i\";\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo \"i is $i\";\n}\n...\nfor ($i = 0; $i &lt; 10; $i++) {\n  if ($i == $x) {\n    break;\n  } else {\n    echo \"i is $i\";\n  }\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "5min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "BUG"
    },
    {
        "key": "php:S2047",
        "repo": "php",
        "name": "The names of methods with boolean return values should start with \"is\" or \"has\"",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean property should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<p>Note that this rule will only apply to functions that are documented to return a boolean.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function getFoo() // Noncompliant\n{\n  return foo;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function isFoo()\n{\n  return true;\n}\n</pre>",
        "mdDesc": "<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean property should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<p>Note that this rule will only apply to functions that are documented to return a boolean.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function getFoo() // Noncompliant\n{\n  return foo;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function isFoo()\n{\n  return true;\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "convention"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "15min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "15min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "15min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "15min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S3776",
        "repo": "php",
        "name": "Cognitive Complexity of functions should not be too high",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
        "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
        "severity": "CRITICAL",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "brain-overload"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [
            {
                "key": "threshold",
                "htmlDesc": "The maximum authorized complexity.",
                "defaultValue": "15",
                "type": "INTEGER"
            }
        ],
        "defaultDebtRemFnType": "LINEAR_OFFSET",
        "defaultDebtRemFnCoeff": "1min",
        "defaultDebtRemFnOffset": "5min",
        "effortToFixDescription": "per complexity point over the threshold",
        "debtOverloaded": false,
        "debtRemFnType": "LINEAR_OFFSET",
        "debtRemFnCoeff": "1min",
        "debtRemFnOffset": "5min",
        "defaultRemFnType": "LINEAR_OFFSET",
        "defaultRemFnGapMultiplier": "1min",
        "defaultRemFnBaseEffort": "5min",
        "remFnType": "LINEAR_OFFSET",
        "remFnGapMultiplier": "1min",
        "remFnBaseEffort": "5min",
        "remFnOverloaded": false,
        "gapDescription": "per complexity point over the threshold",
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1110",
        "repo": "php",
        "name": "Redundant pairs of parentheses should be removed",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$x = ($y / 2 + 1); // Compliant even if the parenthesis are ignored by the compiler\n\nif ($a &amp;&amp; (($x + $y &gt; 0))) { // Noncompliant\n  //...\n}\n\nreturn (($x + 1)); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$x = ($y / 2 + 1);\n\nif ($a &amp;&amp; ($x + $y &gt; 0)) {\n  //...\n}\n\nreturn ($x + 1);\n</pre>",
        "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$x = ($y / 2 + 1); // Compliant even if the parenthesis are ignored by the compiler\n\nif ($a &amp;&amp; (($x + $y &gt; 0))) { // Noncompliant\n  //...\n}\n\nreturn (($x + 1)); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$x = ($y / 2 + 1);\n\nif ($a &amp;&amp; ($x + $y &gt; 0)) {\n  //...\n}\n\nreturn ($x + 1);\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "confusing"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "1min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "1min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "1min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "1min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    },
    {
        "key": "php:S1871",
        "repo": "php",
        "name": "Two branches in a conditional structure should not have exactly the same implementation",
        "createdAt": "2021-01-06T13:21:33+0800",
        "htmlDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($i) {\n  case 1:\n    doFirst();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirst();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doFirst();\n  doTheThing();\n}\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doFirst();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\n}\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();  // no issue, usually this is done on purpose to increase the readability\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule <a href='/coding_rules#rule_key=php%3AS3923'>S3923</a> raises a bug. </p>\n<pre>\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();   //Noncompliant; this might have been done on purpose but probably not\n}\n</pre>",
        "mdDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($i) {\n  case 1:\n    doFirst();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirst();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doFirst();\n  doTheThing();\n}\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doFirst();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\n}\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();  // no issue, usually this is done on purpose to increase the readability\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule {rule:php:S3923} raises a bug. </p>\n<pre>\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();   //Noncompliant; this might have been done on purpose but probably not\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "isTemplate": false,
        "tags": [],
        "sysTags": [
            "design",
            "suspicious"
        ],
        "lang": "php",
        "langName": "PHP",
        "params": [],
        "defaultDebtRemFnType": "CONSTANT_ISSUE",
        "defaultDebtRemFnOffset": "10min",
        "debtOverloaded": false,
        "debtRemFnType": "CONSTANT_ISSUE",
        "debtRemFnOffset": "10min",
        "defaultRemFnType": "CONSTANT_ISSUE",
        "defaultRemFnBaseEffort": "10min",
        "remFnType": "CONSTANT_ISSUE",
        "remFnBaseEffort": "10min",
        "remFnOverloaded": false,
        "scope": "MAIN",
        "isExternal": false,
        "type": "CODE_SMELL"
    }
]